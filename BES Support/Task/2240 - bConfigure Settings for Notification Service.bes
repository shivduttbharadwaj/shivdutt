<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Configure Settings for Notification Service</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD><DIV id=fixletMessage2 class=FixletMessage><br><DIV id=paramFixletDescription><br><P>Use this Task to update the notification service port number as set in Task <?relevance  (link of fixlets 2238 of bes site whose (id of it = 1)) ?> for Windows and Task <?relevance (link of fixlets 2241 of bes site whose (id of it = 1)) ?> for Linux.</P><br><P>You can also use this task to update the default value of the 'From' parameter used in Task <?relevance  (link of fixlets 2244 of bes site whose (id of it = 1)) ?> to indicate the sender of the notification.</P><br><P>This Task may also be used to configure the SMTP login authentication settings for the email notification service.</P><br><P><STRONG>Prerequisites:</STRONG></P><br><UL><br><LI>The email notification service must be installed before running this Task. To install the email notification service use the <?relevance  (link of fixlets 2238 of bes site whose (id of it = 1)) ?> Task to install on a Windows server or the <?relevance  (link of fixlets 2241 of bes site whose (id of it = 1)) ?> Task to install on a Linux server. </LI></UL><br><P><B>Complete the following form and click Take Action:</B></P><br></DIV><br><DIV id=plainOrdinaryFixletDescription><br><P>Use this Task to configure the SMTP login authentication settings for the email notification service.</P><br><P><STRONG>Prerequisites:</STRONG></P><br><UL><br><LI>The email notification service must be installed before running this Task. To install the email notification service use the <?relevance  (link of fixlets 2238 of bes site whose (id of it = 1)) ?> Task to install on a Windows server or the <?relevance  (link of fixlets 2241 of bes site whose (id of it = 1)) ?> Task to install on a Linux server. </LI></UL><br><P><B>Complete the following form and click Take Action:</B></P><br></DIV><script>
loaded = false;
function loadScript(url, callback){
	var head = document.getElementsByTagName("head")[0];
	var script = document.createElement('script');
	script.type = 'text/javascript';
	script.src = url;
	script.onreadystatechange = callback;
	script.onload = callback;
	head.appendChild(script);
};
loaded = false;
function scriptLoaded(){

	var isSha2Required = function() {
	 	var bRequired = EvaluateRelevance('sha256 download of bes license');
	 	 
	};
	
	if (!loaded){
		if (typeof FixletUtils !== 'undefined'){
			loaded = true;
			paramFixletDescription.style.display="block" ;
			plainOrdinaryFixletDescription.style.display="none" ;
			FixletUtils.initFixletRender();
			/* Set SMTP Method to value found in previously created json file. Value found using analysis 2243 */
			var authMethod = EvaluateRelevance("values of results of property 6 /* Authentication Method */  of bes fixlet whose (analysis flag of it and name of site of it contains \"BES Support\" and id of it = 2243)");
            var methodElem = document.getElementById("SMTPMethodvrt_vrt");
                   for (var i=0; i < methodElem.length; i++){
                     if (methodElem[i].getAttribute("value").toString().toLowerCase() == authMethod.toString().toLowerCase()){
	                     methodElem[i].setAttribute("selected", "true");
	                     if (authMethod.toString().toLowerCase() === "none"){ 
	                     	FixletUtils.setRequired("SMTPUser", false);
	                     	FixletUtils.setRequired("SMTPPass", false);
	                     	FixletUtils.setRequired("SMTPPass_verify", false);/*If method is set to None, user, pass and pass_verfiy are not needed are disabled and set to not required */
	                     	FixletUtils.disableField("SMTPUser", true);       
							FixletUtils.disableField("SMTPPass", true);
							FixletUtils.disableField("SMTPPass_verify", true);	                     	
	                     }
	                     break;
                    }
                }			
		}
		else
		{
			
			paramFixletDescription.style.display="none" ;
			plainOrdinaryFixletDescription.style.display="block" ;
		}
	}
}
loadScript("vrt_FixletUtils.js", scriptLoaded);
</script><br><br><DIV class=FixletProperty></DIV></DIV></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance>exists relay service OR exists main gather service</Relevance>
		<Relevance>exists main gather service</Relevance>
		<Relevance><![CDATA[version of main gather service >= "9"]]></Relevance>
		<Relevance>(if( windows of it ) then (exists services whose(service name of it = "BESPluginService")) else if(name of it contains "Linux") then (exists process "MFS-Linux") else (false) ) of operating system</Relevance>
		<Relevance><![CDATA[( if( windows of it) then (exists file (value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications\Config\ns-notifier.xml") AND exists folder (value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications\NotificationService")) else if(name of it contains "Linux") then (exists file "/var/opt/BESServer/Applications/Config/ns-notifier.xml" AND exists folder "/var/opt/BESServer/Applications/NotificationService") else (false) ) of operating system]]></Relevance>
		<Category>Notification</Category>
		<Source>IBM</Source>
		<SourceID>201505111755</SourceID>
		<SourceReleaseDate>2015-06-30</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Thu, 17 Dec 2015 21:33:00 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>analysis-dependencies</Name>
			<Value>{         "2243 - Notification Service Settings ":      {           "Name": "Notification Service Settings",       "Id":"2243"       }      }      </Value>
		</MIMEField>
		<MIMEField>
			<Name>parametercustomeventstag</Name>
			<Value>{    toggleOtherFields : function (eventObject, metaDataobjects )     {           var method = getParamTableValue( metaDataobjects , "SMTPMethod");           if( method.toString().toLowerCase() == "none" )      /*If method is set to None, user, pass and pass_verfiy are not needed are disabled and set to not required */     {             FixletUtils.disableField( "SMTPUser", true ,metaDataobjects);             FixletUtils.disableField( "SMTPPass", true ,metaDataobjects);      FixletUtils.disableField( "SMTPPass_verify", true ,metaDataobjects);       FixletUtils.setRequired( "SMTPUser", false ,metaDataobjects );      FixletUtils.setRequired( "SMTPPass", false ,metaDataobjects );      FixletUtils.setRequired( "SMTPPass_verify", false ,metaDataobjects );      }          else           {    /*Else these parameters are required and must be enabled */      FixletUtils.disableField( "SMTPUser", false , metaDataobjects);             FixletUtils.disableField( "SMTPPass", false ,metaDataobjects);        FixletUtils.disableField( "SMTPPass_verify", false ,metaDataobjects);      FixletUtils.setRequired( "SMTPUser", true ,metaDataobjects );      FixletUtils.setRequired( "SMTPPass", true ,metaDataobjects );      FixletUtils.setRequired( "SMTPPass_verify", true ,metaDataobjects );     }         }        }</Value>
		</MIMEField>
		<MIMEField>
			<Name>parameterfixletinfotag</Name>
			<Value>{      "FixletInfo": {      "fixletInfoId": "Fixlet_2240",      "messageFileName": "vrt_MimeMessages.js"     }    }</Value>
		</MIMEField>
		<MIMEField>
			<Name>parametermetadatatag</Name>
			<Value>{   "UpdateNotificationPort" : {    "Name": "UpdateNotificationPort",    "Title": "Update Notification Port",    "UIType": "accordion",    "Values": [            {       "Name": "NotificationPort",       "Title": "Notification Service Port :",      "Description": "The port number the Notification Service listens on.",      "UIType": "TextBox",      "DataType" : "Number",      "Required" : "1",      "ValueType": "relevance",      "Values" : "values of results of property 5 /*Notification Service Port */ of bes fixlet whose (analysis flag of it and name of site of it contains \"BES Support\" and id of it = 2243)",       "Default" : "3000",      "CustomValidator" : "validatePort"       }      ]   },    "UpdateFromEmailAddress" : {    "Name": "UpdateFromEmailAddress",    "Title": "Default 'From' Email Address",    "UIType": "accordion",    "Values": [         {      "Name": "NotificationFromEmailAddy",       "Title": "From Email Address :",      "Description": "Updates the email address that will appear in the From field of the Task 2244 (Send an Email Notification) by default. This value is pre-populated only for convenience, and can be overridden when taking action on the Task.",      "UIType": "TextBox",      "Required" : "1",       "ValueType": "relevance",      "Values" : "values of results of property 3 /* Notification From Email Setting */  of bes fixlet whose (analysis flag of it and name of site of it contains \"BES Support\" and id of it = 2243)",      "Default" : "noreply@bigfix.com",      "CustomValidator" : "validateFromEmail"       }    ]   },    "SMTPConfiguration" : {    "Name": "SMTPConfiguration",    "Title": "SMTP Configuration",    "UIType": "accordion",    "Values": [                 {        "Name": "SMTPMethod",             "Title": "SMTP Method :",             "Description": "The method used for authentication on the SMTP server. \n None: Using no SMTP authentication (No username or password needed) \n Plain: Uses plain login authentication with a username and password. Passwords are encrypted",             "UIType": "Select",             "ValueType": "specified",       "Values": [{"key":"Plain_Auth" , "value":"plain"}, {"key":"None_Auth","value":"none"}],     "Required" :"1",     "CustomEvents":[{"event":"onchange" , "action" : "toggleOtherFields"}]        },              {        "Name": "SMTPHost",      "Title": "SMTP Host :",     "Description": "The host name, IP address or Fully Qualified Hostname of the SMTP server.",     "UIType": "TextBox",     "Required" : "1",      "ValueType": "relevance",     "Values" : "values of results of property 1 /* Notification Host name */  of bes fixlet whose (analysis flag of it and name of site of it contains \"BES Support\" and id of it = 2243)",     "Default" : "",     "CustomValidator" : "validateHost"         },     {      "Name": "SMTPPort",      "Title": "SMTP Port :",     "Description": "The port number of the SMTP server.",     "UIType": "TextBox",     "DataType" : "Number",     "Required" : "1",     "ValueType": "relevance",     "Values" : "values of results of property 2 /* STMP Port number */ of bes fixlet whose (analysis flag of it and name of site of it contains \"BES Support\" and id of it = 2243)",      "Default" : "25",     "CustomValidator" : "validatePort"      },                {          "Name": "SMTPUser",     "Title": "Username :",      "Description": "SMTP username to use for sending the notifications.",      "UIType": "TextBox",       "Required" : "1",        "ValueType": "relevance",      "Values" : "values of results of property 4 /* Notification User Name */ of bes fixlet whose (analysis flag of it and name of site of it contains \"BES Support\" and id of it = 2243)",       "Default" : "",        "CustomValidator" : "validateUsername"       },           {        "Name": "SMTPPass",       "Title": "Password :",      "Description": "Password for the specified SMTP username.",      "UIType": "TextBox",        "SubUIType" : "Password",       "Required" : "1",          "Encrypt" : "true",        "Default" : "",        "CustomValidator" : "validatePassword"        },               {      "Name": "SMTPPass_verify",     "Title": "Confirm Password :",      "Description": "Verify the password.",     "UIType": "TextBox",       "SubUIType" : "Password",       "Required" : "1",         "Encrypt" : "true",        "Default" : "",         "FormOnly":"true"        }        ]   }   }</Value>
		</MIMEField>
		<MIMEField>
			<Name>parametermessagestag</Name>
			<Value>{     "FixletGlobalMessages": {       "ERROR_2240_invalidHostErrMsg" : "Error: Invalid DNS name entered. Maximum length of 255 characters and must not contain letters, special characters, spaces or a hyphen. (Alternatively, you can specify a valid IP address for the host).",        "ERROR_2240_invalidIPAddrErrMsg" : "Error: Invalid IP address entered. Must be of the form (0-255).(0-255).(0-255).(0-255) (Alternatively, you can specify a valid DNS name for the the host).",          "ERROR_2240_emptyPortErrMsg" : "Error: you must enter a valid port number.",        "ERROR_2240_invalidPortErrMsg" : "Error: Invalid port number. The port value must be between 1 - 65535.",      "ERROR_2240_emptyUsernameErrMsg" : "Error: you must enter a user name.",     "ERROR_2240_invalidUsernameErrMsg" : "Error: Invalid user name. The user name contains more than 64 characters.",     "ERROR_2240_invalidPasswordErrMsg" : "Error: Invalid password. The password contains more than 64 characters.",    "ERROR_2240_invalidFromEmailAddress" : "Error: Invalid Email Address. The Email Address must be a single valid email address.",      "ERROR_2240_passwordMismatchErrMsg" : "Error: Passwords do not match."     }    }</Value>
		</MIMEField>
		<MIMEField>
			<Name>parametervalidatortag</Name>
			<Value><![CDATA[{    validateFromEmail : function ( validationObj,metaObj ) {      var currentValue = validationObj["currentValue"];      currentValue = FixletUtils.trimStr(currentValue);        if(!currentValue.match(/^([\s]*([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)[\s]*)$/i)){      return "ERROR_2240_invalidFromEmailAddress";      }      },           validateHost : function (validationObj) {    var currentVal = validationObj["currentValue"];          var result = FixletUtils.trimStr(currentVal);             if (result.length <= 0 || result.length > 255) {        return "ERROR_2240_invalidHostErrMsg";              }               /* Check if in ipv4 address format first then check if hostname format */           if (result.match(/^\d+([.]\d+)+$/)) {                               if (!result.match(/^\d{1,3}([.]\d{1,3})*$/)) {         return "ERROR_2240_invalidAddrErrMsg";            } else if (!result.match(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)) {            return "ERROR_2240_invalidIPAddrErrMsg";        }               } else if  (result.match(/^\d+[.]\d+[.].*$/)) {        return "ERROR_2240_invalidHostErrMsg";        } else if (!result.match(/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/i) ) {        return "ERROR_2240_invalidHostErrMsg";         }          },                 validatePort : function ( validationObj ) {         var currentValue = validationObj["currentValue"];          currentValue = FixletUtils.trimStr(currentValue);         if( currentValue.length == 0 )       {        return "ERROR_2240_emptyPortErrMsg";            }             if( currentValue < 1 || currentValue > 65535 )        {        return "ERROR_2240_invalidPortErrMsg";       }           },                 validateUsername : function ( validationObj ) {         var currentValue = validationObj["currentValue"];          currentValue = FixletUtils.trimStr(currentValue);         if( currentValue.length > 64 )        {          return "ERROR_2240_invalidUsernameErrMsg";       }         },               validatePassword : function ( validationObj, metaDataobjects ) {         var currentValue = validationObj["currentValue"];          currentValue = FixletUtils.trimStr(currentValue);           var verifyValue = FixletUtils.getElementText("SMTPPass_verify", metaDataobjects);        if( currentValue.length > 64 )        {          return "ERROR_2240_invalidPasswordErrMsg";         }             if (currentValue != verifyValue) {          return "ERROR_2240_passwordMismatchErrMsg";            }               }              }    ]]></Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Sat, 11 Mar 2017 00:28:25 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action parameter query "NotificationPort" with description "The port number of the Notification Service." with default "3000"
action parameter query "NotificationFromEmailAddy" with description "This is the email address that will appear in the from section of the notification email." with default "noreply@bigfix.com"
action parameter query "SMTPMethod" with description "The authentication method for the SMTP server." with default "none"
action parameter query "SMTPHost" with description "The host name of the SMTP server." with default "localhost"
action parameter query "SMTPPort" with description "The port number of the SMTP server." with default "25"
action parameter query "SMTPUser" with description "Username to use for the sending notifications" with default ""

// Define parameters
parameter "action_id" = "{id of action}"
parameter "curr_site_path" = "{client folder of current site}"
parameter "encrypted_pw_file" = "{parameter "curr_site_path" & "/encrypted." & parameter "action_id" & ".txt"}"
parameter "notification_port_from_file" = "{if (name of operating system starts with "Win") then substring before "," of (substring after ": " of ((lines of file (  value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications\NotificationService\resources\config\nsConfig.json")) whose (it as lowercase contains "%22port%22:"))) else substring before "," of substring after ": " of lines whose( it as lowercase contains "%22port%22:" )of file "/var/opt/BESServer/Applications/NotificationService/resources/config/nsConfig.json"}"
parameter "default_notification_from_setting_from_file" = "{if (name of operating system starts with "Win") then substring between "%22" of substring before "," of (substring after ": " of ((lines of file ( value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications\NotificationService\resources\config\nsConfig.json")) whose (it as lowercase contains "%22from%22:"))) else substring between "%22" of substring before "," of substring after ": " of lines whose( it as lowercase contains "%22from%22:" )of file "/var/opt/BESServer/Applications/NotificationService/resources/config/nsConfig.json"}"
// Define some platform specific parameters
if {name of operating system starts with "Win"}
	parameter "applicationsFolder" = "{pathname of (folder (value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications"))}"
	parameter "crypUtil" = "{parameter "applicationsFolder" & "\CryptoUtility.exe"}"
	parameter "configFileFolder" = "{parameter "applicationsFolder" & "\NotificationService\resources\config\"}"
	// Path to Applications folder under BES Server
	parameter "AppsFolder" = "{pathname of (folder (value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications"))}"
	// Paths to Server Plugin XML files (and corresponding '.stop' files)
	parameter "MFS_XML_Notifier_Registered"   = "{parameter "AppsFolder" & "\Config\ns-notifier.xml"}"
	parameter "MFS_XML_Monitor_Registered"    = "{parameter "AppsFolder" & "\Config\ns-monitor.xml"}"
	parameter "MFS_XML_Notifier_UnRegistered" = "{parameter "MFS_XML_Notifier_Registered" & ".stop"}"
	parameter "MFS_XML_Monitor_UnRegistered"  = "{parameter "MFS_XML_Monitor_Registered"  & ".stop"}"
	
elseif {name of operating system contains "Linux"} 
	parameter "applicationsFolder" = "/var/opt/BESServer/Applications"
	parameter "configFileFolder" = "{parameter "applicationsFolder" & "/NotificationService/resources/config/"}"
	parameter "crypUtil" = "{parameter "applicationsFolder" & "/CryptoUtility"}"
	// Path to Applications folder under BES Server
	parameter "AppsFolder" = "{pathname of (folder ("/var/opt/BESServer/Applications"))}"
	// Paths to Server Plugin XML files (and corresponding '.stop' files)
	parameter "MFS_XML_Notifier_Registered"   = "{parameter "AppsFolder" & "/Config/ns-notifier.xml"}"
	parameter "MFS_XML_Monitor_Registered"    = "{parameter "AppsFolder" & "/Config/ns-monitor.xml"}"
	parameter "MFS_XML_Notifier_UnRegistered" = "{parameter "MFS_XML_Notifier_Registered" & ".stop"}"
	parameter "MFS_XML_Monitor_UnRegistered"  = "{parameter "MFS_XML_Monitor_Registered"  & ".stop"}"
endif

parameter "configFile" = "{parameter "configFileFolder" & "messagingConf.json"}"
parameter "configFile_new" = "{parameter "configFile" & ".new"}"
parameter "configFile_bak" = "{parameter "configFile" & ".bak"}"
parameter "crypUtil_bak" = "{parameter "crypUtil" & ".bak"}"
parameter "notificationConfig" = "{parameter "configFileFolder" & "nsConfig.json"}"



// If a version of CrypUtil utility already exists back it up for restore later
if {exists file (parameter "crypUtil")}
	// Backup old crypUtil
	delete "{parameter "crypUtil_bak"}"
	move "{parameter "crypUtil"}" "{parameter "crypUtil_bak"}"
endif

// Assert that CryptUtility executable no longer exists
continue if {not exists file (parameter "crypUtil")}

// Install CrypUtil utility 1.1.0.0
if {name of operating system contains "Linux"}
	if {architecture of operating system = "x86_64"}
		prefetch CryptoUtility sha1:becc3df2d9235c1fe925ce4859621dae4b385e4d size:2357088 http://software.bigfix.com/download/bes/util/CryptoUtility-linux-1.0.0.x64 sha256:e8da9d427d8d491a1efdb47ea64c9b3626e9c73d94ae2bd1dff6e657cce8a4d8
	else
		prefetch CryptoUtility sha1:878c39f82e11ca3fe27a570d7d65dedfc11ccbba size:2968448 http://software.bigfix.com/download/bes/util/CryptoUtility-linux-1.0.0  sha256:a5a1aeb26c425c213d27a05f981dae88f96ea86cea68df6030dcff55d187e7d6
	endif    
	delete "{parameter "crypUtil"}"
	move "{parameter "curr_site_path" & "/__Download/CryptoUtility"}" "{parameter "crypUtil"}"  
	wait chmod 700 "{parameter "applicationsFolder"}/CryptoUtility"
else
    prefetch CryptoUtility.exe sha1:70714c8c8614e56dee14146ad358764f3162090d size:3076182 http://software.bigfix.com/download/bes/util/CryptoUtility-1.1.0.exe sha256:c9cce66a873445e4e5a9b492a0edde64536cb7fa309aaf5a9abccf5c68982038   
    delete "{ parameter "crypUtil"}"
    move "{parameter "curr_site_path" & "\__Download\CryptoUtility.exe"}" "{parameter "crypUtil"}"
endif

// Assert that CryptUtility executable exists
continue if {exists file (parameter "crypUtil")}
// Assert if config file parameter exists
continue if {exists parameter "configFile" of action AND parameter "configFile" of action != ""}
// Assert if config file parent folder exists
continue if {exists folder (parameter "configFileFolder")}

// Generate a file containing the encrypted value of action parameter "SMTPPass"
delete "{parameter "encrypted_pw_file"}"

if {( (parameter "SMTPMethod") as trimmed string )as lowercase = "none"}
// Create the new configuration settings content
//auth field not required for None method
delete __createfile
createfile until END_SMTP_CONFIG_JSON
{{
"smtp": {{
  "service": "smtp",
  "host": "{parameter "SMTPHost" as trimmed string}",
  "secure": false,
  "port": {parameter "SMTPPort"},
  "ignoreTLs": false,
  "authMethod": "{parameter "SMTPMethod"}",
  "tls": {{
		  "rejectUnauthorized": false
  }
 }	
}
END_SMTP_CONFIG_JSON
	
else

if {name of operating system starts with "Win"}
	waithidden "{parameter "crypUtil"}" -i "{concatenation "\%22" of (substrings separated by "%22" of (concatenation "\\" of (substrings separated by "\" of (parameter "SMTPPass"))))}" -o "{parameter "encrypted_pw_file"}"
else
	wait "{parameter "crypUtil"}" -i "{concatenation "\%22" of (substrings separated by "%22" of (concatenation "\\" of (substrings separated by "\" of (parameter "SMTPPass"))))}" -o "{parameter "encrypted_pw_file"}"
endif
	
// Create the new configuration settings content
delete __createfile
createfile until END_SMTP_CONFIG_JSON
{{
"smtp": {{
  "service": "smtp",
  "host": "{parameter "SMTPHost" as trimmed string}",
  "secure": false,
  "port": {parameter "SMTPPort"},
  "ignoreTLs": false,
  "authMethod": "{parameter "SMTPMethod"}",
  "auth": {{
	  "user": "{parameter "SMTPUser"}",
	  "pass": "{concatenation "|~|" of lines of file (parameter "encrypted_pw_file")}"
	 },
   "tls" :{{
           "rejectUnauthorized": false
	}
  }
}
END_SMTP_CONFIG_JSON
    
// Assert file with encrypted passwords file exists
continue if {exists file (parameter "encrypted_pw_file")}

endif

// Write the new messagingConf settings to a new file, and assert the file was created
if {exists file (parameter "configFile_new")}
	delete "{parameter "configFile_new"}"
endif
continue if {not exists file (parameter "configFile_new")}
move __createfile "{parameter "configFile_new"}"
continue if {exists file (parameter "configFile_new")}

// Back up the existing configuration file and assert the backup file was created
// For first time run config file will not exist
if {exists file (parameter "configFile")}
	if {exists file (parameter "configFile_bak")}
		delete "{parameter "configFile_bak"}"
	endif
	continue if {not exists file (parameter "configFile_bak")}
	move "{parameter "configFile"}" "{parameter "configFile_bak"}"
	continue if {exists file (parameter "configFile_bak")}
endif

// Replace the existing configuration file with the new settings and assert config file was created
delete "{parameter "configFile"}"
move  "{parameter "configFile_new"}" "{parameter "configFile"}"
continue if {exists file (parameter "configFile")}

// Restore old crypUtil version if applicable
if {exists file (parameter "crypUtil_bak")}
    //Delete the newer version
    delete "{parameter "crypUtil"}"
	// Restore old crypUtil
	move "{parameter "crypUtil_bak"}" "{parameter "crypUtil"}"	
endif

// Clean up temporary files
delete "{parameter "configFile_new"}"
delete "{parameter "encrypted_pw_file"}"
	if {exists file (parameter "configFile_bak")}
		delete "{parameter "configFile_bak"}"
	endif
	
//Start writing new nsConfig.json file

		// Assert Notification configuration file has been identified
   continue if {exists parameter "notificationConfig" of action AND parameter "notificationConfig" of action != ""}
	// Update the Notification configuration file by iterating through the file, replacing properties as necessary
	appendfile { concatenation "%0d%0a" of ( if (it as lowercase contains "%22port%22" ) then ("%22port%22: " &(parameter "NotificationPort") & ",") else if (it as lowercase contains "%22from%22" ) then ("%22from%22: " &"%22"&(parameter "NotificationFromEmailAddy" )&"%22" & ",") else it) of lines of file (parameter "notificationConfig" of action as string) }
		// Write the new configuration settings to a new file, and assert the file was created
	if {exists file (parameter "notificationConfig" of action & ".new")}
		delete "{parameter "notificationConfig"}.new"
	endif
		continue if {not exists file (parameter "notificationConfig" of action & ".new")}
		move __appendfile "{parameter "notificationConfig"}.new"
		continue if {exists file (parameter "notificationConfig" of action & ".new")}

		// Back up the existing configuration file
	if {exists file (parameter "notificationConfig" of action & ".bak")}
		delete "{parameter "notificationConfig"}.bak"
	endif

		continue if {not exists file (parameter "notificationConfig" of action & ".bak")}
		copy "{parameter "notificationConfig"}" "{parameter "notificationConfig"}.bak"
		continue if {exists file (parameter "notificationConfig" of action & ".bak")}

// Overwrite the existing configuration file with the new settings
	if {name of operating system starts with "Win"} 
				waithidden cmd.exe /c copy "{parameter "notificationConfig"}.new" "{parameter "notificationConfig"}" /y
	elseif {name of operating system contains "Linux"} 
				wait mv -f "{parameter "notificationConfig"}.new" "{parameter "notificationConfig"}"
	endif
			
			//Clean Up Temporary Files
	if {exists file (parameter "notificationConfig" of action & ".bak")}
			delete "{parameter "notificationConfig"}.bak"
	endif
			
	if {exists file (parameter "notificationConfig" of action & ".new")}
			delete "{parameter "notificationConfig"}.new"
	endif				
if {(parameter "notification_port_from_file") != (parameter "NotificationPort") }
		
	if {name of operating system starts with "Win"}

		// First Un-register the NS apps from the server plugin (first the monitor, then the notifier)
		if { exists file (parameter "MFS_XML_Monitor_Registered") }
			waithidden cmd.exe /C move "{parameter "MFS_XML_Monitor_Registered"}" "{parameter "MFS_XML_Monitor_UnRegistered"}"
			// Assert that the server plugin is no longer monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Monitor_Registered") and exists file (parameter "MFS_XML_Monitor_UnRegistered") }
		endif
		if { exists file (parameter "MFS_XML_Notifier_Registered") }
			waithidden cmd.exe /C move "{parameter "MFS_XML_Notifier_Registered"}" "{parameter "MFS_XML_Notifier_UnRegistered"}"
			// Assert that the server plugin is no longer monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Notifier_Registered") and exists file (parameter "MFS_XML_Notifier_UnRegistered") }	
		endif
		parameter "start" = "{now}"
		pause while {now < ( ((  parameter "start" of action  ) as time ) + 40* second)}
         // Now Re-register the NS apps from the server plugin (first the monitor, then the notifier)
		if { exists file (parameter "MFS_XML_Monitor_UnRegistered") }
			waithidden cmd.exe /C move "{parameter "MFS_XML_Monitor_UnRegistered"}" "{parameter "MFS_XML_Monitor_Registered"}"
			// Assert that the server plugin is now monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Monitor_UnRegistered") and exists file (parameter "MFS_XML_Monitor_Registered") }
		endif
		if { exists file (parameter "MFS_XML_Notifier_UnRegistered") }
			waithidden cmd.exe /C move "{parameter "MFS_XML_Notifier_UnRegistered"}" "{parameter "MFS_XML_Notifier_Registered"}" 
			// Assert that the server plugin is now monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Notifier_UnRegistered") and exists file (parameter "MFS_XML_Notifier_Registered") }	
    endif		
							
	elseif {name of operating system contains "Linux"} 
		// Un-register the NS apps from the server plugin (first the monitor, then the notifier)
		if { exists file (parameter "MFS_XML_Monitor_Registered") }
			wait /bin/sh -c "mv -f {parameter "MFS_XML_Monitor_Registered"} {parameter "MFS_XML_Monitor_UnRegistered"}"
			// Assert that the server plugin is no longer monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Monitor_Registered") and exists file (parameter "MFS_XML_Monitor_UnRegistered") }
		endif
		if { exists file (parameter "MFS_XML_Notifier_Registered") }
			wait /bin/sh -c "mv -f {parameter "MFS_XML_Notifier_Registered"} {parameter "MFS_XML_Notifier_UnRegistered"}"
			// Assert that the server plugin is no longer monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Notifier_Registered") and exists file (parameter "MFS_XML_Notifier_UnRegistered") }
		endif
		parameter "start" = "{now}"
		pause while {now < ( ((  parameter "start" of action  ) as time ) + 40* second)}
		// Re-register the NS apps from the server plugin (first the monitor, then the notifier)
		if { exists file (parameter "MFS_XML_Monitor_UnRegistered") }
			wait /bin/sh -c "mv -f  {parameter "MFS_XML_Monitor_UnRegistered"} {parameter "MFS_XML_Monitor_Registered"}"
			// Assert that the server plugin is now  monitoring the notification service app before continuing
			continue if { not exists file 	(parameter "MFS_XML_Monitor_UnRegistered") and exists file (parameter "MFS_XML_Monitor_Registered") }
		endif
		if { exists file (parameter "MFS_XML_Notifier_UnRegistered") }
			wait /bin/sh -c "mv -f {parameter "MFS_XML_Notifier_UnRegistered"} {parameter "MFS_XML_Notifier_Registered"}"
			// Assert that the server plugin is now  monitoring the notification service app before continuing
			continue if { not exists file (parameter "MFS_XML_Notifier_UnRegistered") and exists file (parameter "MFS_XML_Notifier_Registered") }
	endif
endif
//Update client results 
notify client ForceRefresh]]></ActionScript>
		</DefaultAction>
	</Task>
</BES>
