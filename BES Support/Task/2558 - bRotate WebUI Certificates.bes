<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Rotate WebUI Certificates</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD>Deploy this Fixlet on a device to rotate the WebUI Certificates on the specified Endpoint running the WebUI Service <br> <P>This Fixlet should be used if:</P><UL><LI>If there is suspicion that the old certificates has been compromised</LI><LI>Updated certificates are wanted for the WebUI</LI></UL></TD></TR></TBODY></TABLE><TABLE><TBODY><TR><TD class=input_title>Specify Hostname of Targeted Endpoint: </TD><TD><INPUT onchange=handleEmptyHostIP(this.id) id=webuiRemoteHostIP></TD></TR></TBODY></TABLE><TR><TD><P><B><FONT color=red>Important Note: </FONT></B> BigFix Server Version 9.5.3 or above is required to execute this Fixlet</P> </TD></TR><TR><TD><SCRIPT> var certObj = new Object(); var ACTION = "Action1"; var hostnameIP=""; document.getElementById('webuiRemoteHostIP').value = hostnameIP; function handleEmptyHostIP(id) { var textInput = document.getElementById(id); if(textInput.value.replace(/^\s+|\s+$/g, '') == "") {textInput.value = hostnameIP;} }document.body.ontakeaction = function(event) { if(EvaluateRelevance('master flag of current console user') === "False") {alert('<?jxlat Only Master Operators can run this Fixlet.?>'); return false;} var params = new Object(); var secParams = new Object(); hostnameIP = document.getElementById('webuiRemoteHostIP').value.replace(/^\s+|\s+$/g, ''); if(hostnameIP === "") { alert('<?jxlat Must specify the hostname of targeted Endpoint.?>'); return false;} params["hostnameIP"] = hostnameIP; var getCertificate = confirm('<?jxlat Specified Hostname provided will be used to create a certificate for the WebUI. Do you want to continue? ?>'); if(getCertificate === true){ try{var authPair = RotateWebUIAuthCertificate(hostnameIP);}catch(e){alert('<?jxlat Hostname specified may not be what was originally inputted. ?>'); return false;}} else{return false;} var fixletID = parseInt(EvaluateRelevance('id of current fixlet')); var siteID = 0xffffffff & parseInt(EvaluateRelevance('id of current bes site')); TakeSecureFixletActionOnComputers(fixletID, siteID, ACTION, params, {authCert: authPair.certificate, authKey: authPair.privateKey}); return false;}</SCRIPT></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance><![CDATA[version of registration server >= "9.2.6"]]></Relevance>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance><![CDATA[version of client >= "9.5.3.191"]]></Relevance>
		<Relevance><![CDATA[version of registration server >= "9.5.3"]]></Relevance>
		<Relevance>exists webui service</Relevance>
		<Category></Category>
		<Source>BigFix</Source>
		<SourceID><![CDATA[<Unspecified>]]></SourceID>
		<SourceReleaseDate>2016-09-30</SourceReleaseDate>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Mon, 10 Oct 2016 17:58:06 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Mon, 23 Oct 2017 17:33:34 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to rotate certificates for WebUI Service.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[continue if{(exists parameter "authCert") and (exists parameter "authKey")}

parameter "workDir" = "{if exists setting whose (name of it = "_WebUIAppEnv_WebUI_DIR") of client then value of setting "_WebUIAppEnv_WebUI_DIR" of client else if windows of operating system then pathname of program files x32 folder &"\BigFix Enterprise\BES WebUI" else "/var/opt/BESWebUI"}"

if {windows of operating system}
    wait cmd.exe /C net stop BESWebUI

    parameter "nodeDir" = "{parameter "workDir"}\WebUI\node.exe"
    parameter "currTime" = "{now}"
    pause while {(exists processes whose(pathname of image file of it is (parameter "nodeDir"))) AND (now - time(parameter "currTime")) < (120*second)}

    parameter "webuiDir" = "{value of setting "_WebUIAppEnv_WebUI_DIR" of client}"

    delete "{parameter "webuiDir"}\cert\auth_cert.crt"
    appendfile {parameter "authCert"}
    move "{(client folder of current site as string) & "/__appendfile"}" "{parameter "webuiDir"}\cert\auth_cert.crt"

    //make a file for the privatekey and write it to a file, then encrypt it
    createfile until __EOF
        ren __appendfile auth_key.key
        cipher /e /a auth_key.key
        move /y auth_key.key "{parameter "webuiDir"}\cert\"
    __EOF
    move __createfile createfile.bat
    appendfile {parameter "authKey"}
    delete "{parameter "webuiDir"}\cert\auth_key.key"
    wait cmd.exe /C createfile.bat
    delete createfile.bat

    wait cmd.exe /C net start BESWebUI

else
//linux command
    wait /etc/init.d/beswebui stop

    parameter "nodeDir" = "{parameter "workDir"}/WebUI/node.exe"
    parameter "currTime" = "{now}"

    pause while {(exists processes whose(name of it as string contains "WebUIService" or name of it as string contains "node")) AND (now - time(parameter "currTime")) < (120*second)}


    delete "/var/opt/BESWebUI/cert/auth_cert.crt"
    appendfile {parameter "authCert"}
    move __appendfile "/var/opt/BESWebUI/cert/auth_cert.crt"

    createfile until __EOF
        mv __appendfile /var/opt/BESWebUI/cert/auth_key.key
        /bin/chmod 600 /var/opt/BESWebUI/cert/auth_key.key
    __EOF
    delete "/var/opt/BESWebUI/cert/auth_key.key"
    appendfile {parameter "authKey"}
    wait /bin/sh __createfile
    delete __createfile

    wait /etc/init.d/beswebui start

endif
			]]></ActionScript>
		</DefaultAction>
	</Task>
</BES>
