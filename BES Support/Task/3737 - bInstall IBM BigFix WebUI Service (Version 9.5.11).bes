<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Install IBM BigFix WebUI Service (Version 9.5.11)</Title>
		<Description><![CDATA[
<DIV class=FixletMessage>
<TABLE><TBODY><TR><TD><DIV class=FixletMessage><TABLE style="border: 1px solid red" id="__FixletHTMLField"><TBODY><TR><TD>Deploy this Fixlet on a device to install the IBM BigFix WebUI Service.<br/> <p>This Fixlet will:</p><ul><li>Install and start a service (Windows) or background process (Linux)</li><li>Establish a secure connection with the IBM BigFix Server</li><li>Set relevant client settings</li><li>Send the database connection configuration to the WebUI server</li><li>Encrypt the database credentials</li><li>Store the configuration within the WebUI folder</li><li>Extract and run the WebUI service</li></ul><table> <tbody><tr> <td><br/> <b>Deployment configuration</b></td> </tr><tr> <td class="input_title">Specify WebUI HTTPS Port:</td> <td><input id="webuiHttpsPort" style="width:100%" onblur="handleEmptyPort(this.id)"></td> </tr><tr> <td class="input_title">Specify WebUI HTTP Redirect Port:</td> <td><input id="webuiHttpPort" style="width:100%" onblur="handleEmptyPort(this.id)"></td> </tr><tr> <td class="input_title">Specify Hostname or IP of Target Endpoint:</td> <td><input id="webuiRemoteHostIP" style="width:100%"></td> </tr><tr id="webuiDirectoryRow" > <td class="input_title">Custom WebUI Installation Directory (Optional):</td> <td><input id="webuiDirectory" style="width:100%"></td> </tr><tr> <td><br/><b>Database configuration</b></td> </tr><form><tr id="dbAuthTypeRow1"><td class="input_title">Specify Database Authentication Type:</td><td><input type="radio" id="dbSQLAuthRadio" name="dbSQLOrWinAuth" value="SQLServer" onclick="toggleDbAuthType(this.value)" checked/><label for="dbSQLAuthRadio">SQL Server Authentication</label></td></tr><tr id="dbAuthTypeRow2"><td></td><td><input type="radio" id="dbWinAuthRadio" name="dbSQLOrWinAuth" value="Windows" onclick="toggleDbAuthType(this.value)"/><label for="dbWinAuthRadio">Windows Authentication</label></td></tr></form><tr> <td class="input_title">Specify Database Username:</td> <td><input id="databaseUserName" style="width:100%"></td> </tr><tr> <td class="input_title">Specify Database Password:</td> <td><input id="databasePassword" size="30" type="password"></td> </tr><tr> <td class="input_title">Confirm Database Password:</td> <td><input id="databasePasswordConfirm" style="width:100%" type="password"></td> </tr><tr> <td class="input_title">Specify IBM BigFix Server Database Host (see below): </td> <td><input id="databaseHostIP" style="width:100%"></td> </tr><form><tr id="dbInstanceRow"><td class="input_title"><input type="radio" id="dbInstanceRadio" name="dbInstOrPort" value="instance" onclick="toggleDbInstancePort(this.value)"/><label for="dbInstanceRadio">Specify SQL Server Named Instance:</label></td><td><input id="databaseInstance" style="width:100%"/></td></tr><tr><td class="input_title"><input type="radio" id="dbPortRadio" name="dbInstOrPort" value="port" onclick="toggleDbInstancePort(this.value)" checked/><label for="dbPortRadio">Specify Database Port:</label></td><td><input id="databasePort" style="width:100%" onblur="handleEmptyPort(this.id)"/></td></tr></form></tbody></table></TD></TR><TR><TD><br/><p>Follow this knowledgecenter <a href="http://www.ibm.com/support/knowledgecenter/SSTK87_9.5.0/com.ibm.bigfix.webui.doc/WebUI/Admin_Guide/c_deployment_requirements.html">link</a> to view deployment requirements and detailed information on the inputs to this fixlet.</p><p><b>Deployment notes:</b></p><p><b><font color="red">Important Note:</font></b> IBM BigFix Server Version 9.5.11 is required to execute this Fixlet. Additionally only IBM BigFix Client Version 9.5.3 or later endpoints will be relevant for this Fixlet.</p><p id="targetWinNote"><b><font color="red">Important Note:</font></b> The Target Endpoint must run a Windows OS.</p><p id="targetLinuxNote"><b><font color="red">Important Note:</font></b> The Target Endpoint must run a Linux OS.</p><p id="winPatchNote"><b><font color="red">Important Note:</font></b> This Fixlet will become relevant on Endpoints running Windows Server 2008 R2 only if Hotfix KB2577795 is installed. This Hotfix cannot be applied through a Fixlet. Administrators must visit <a href="https://support.microsoft.com/en-us/kb/2577795">https://support.microsoft.com/en-us/kb/2577795</a>, request the Hotfix from Microsoft and apply it on the target computer.</p><p><b><font color="red">Important Note:</font></b> Only install the WebUI on one Endpoint per deployment. Make sure that no WebUI installation is already present in your deployment.</p><p id="webuiDirNote"><b><font color="red">Important Note:</font></b> If you specify a custom WebUI directory, it should be empty or not exist. Be aware that the installation and removal of the WebUI may overwrite and/or clear that directory. Appropriate subdirectories will be created if custom directories are specified.</p><p><b><font color="red">Important Note:</font></b> If upgrading from a previous WebUI instance, existing SSL certificates from the old WebUI location should be manually copied to the new WebUI location.</p><p><b>Database configuration notes:</b></p><p><b><FONT color=red>Database Host Note: </FONT></b>Specify the computer hosting the BFEnterprise database of the IBM BigFix Server. It should be a resolvable hostname (usually a FQDN) or an IP address.</p><p id="sqlInstanceNote"><b>Note:</b> If using a SQL Server Named Instance, ensure the SQL Server Browser service is running on the computer hosting the database. Otherwise the WebUI will not be able to connect to the database.</p><p><b>Note:</b> WebUI index creation can take more than 20 minutes for large deployments. The WebUI will not be usable before that operation is complete.</p><script>var rootServerWindows = EvaluateRelevance('exists bes computer whose (root server flag of it = true AND operating system of it starts with "Win")');var rootServerHost = EvaluateRelevance('substring before ":" of substring after "http://" of gather url of client license');var defaultWebUIHttpsPort = 443;var webuiHttpsPort = defaultWebUIHttpsPort;var defaultWebUIHttpPort = 80;var webuiHttpPort = defaultWebUIHttpPort;var defaultDatabasePort = (rootServerWindows === 'True') ? 1433 : 50000;var ACTION = "Action1";var certObj = new Object();var webUIDir = '';var webUIHost = '';function handleEmptyPort(id) {var inputEle = document.getElementById(id);if (trimSpaces(inputEle.value) === '') {if (id === 'webuiHttpPort') {inputEle.value = defaultWebUIHttpPort;} else if (id === 'webuiHttpsPort') {inputEle.value = defaultWebUIHttpsPort;} else if (id === 'databasePort') {inputEle.value = defaultDatabasePort;}}}function toggleDbInstancePort(value) {var databaseInstance = document.getElementById('databaseInstance');var databasePort = document.getElementById('databasePort');if (value === "instance") {databaseInstance.disabled = false;databaseInstance.value = 'INSTANCENAME';databasePort.disabled = true;databasePort.value = '';} else {databaseInstance.disabled = true;databaseInstance.value = '';databasePort.disabled = false;databasePort.value = defaultDatabasePort;}}function isDomainSlashUser(fullUsername) {if (fullUsername === '') {return false;}var slashPos = fullUsername.indexOf("\\");var atPos = fullUsername.indexOf("@");if (slashPos === -1 || atPos !== -1) {return false;}var domain = fullUsername.substr(0, slashPos);var user = fullUsername.substr(slashPos + 1);if (user.length < 1 || domain.length < 1) {return false;}return true;}var dbAuthType = '';function toggleDbAuthType(value) {dbAuthType = value;var dbUserEle = document.getElementById('databaseUserName');if (value === "Windows") {dbUserEle.value = "DOMAIN\\username";} else if (value === "SQLServer") {dbUserEle.value = "sa";} else if (value === "DB2") {dbUserEle.value = "db2inst1";}}function trimSpaces(strVal) {return strVal.replace(/^\s+|\s+$/g, '');}function toggleOSFields(isWindows) {if (isWindows) {document.getElementById('webuiDirectoryRow').style.display = '';document.getElementById('dbInstanceRow').style.display = '';document.getElementById('dbInstanceRadio').style.display = '';document.getElementById('dbPortRadio').style.display = '';document.getElementById('dbAuthTypeRow1').style.display = '';document.getElementById('dbAuthTypeRow2').style.display = '';document.getElementById('dbSQLAuthRadio').click();document.getElementById('targetWinNote').style.display = '';document.getElementById('targetLinuxNote').style.display = 'none';document.getElementById('winPatchNote').style.display = '';document.getElementById('webuiDirNote').style.display = '';document.getElementById('sqlInstanceNote').style.display = '';} else {document.getElementById('webuiDirectoryRow').style.display = 'none';document.getElementById('dbInstanceRow').style.display = 'none';document.getElementById('dbPortRadio').style.display = 'none';document.getElementById('dbAuthTypeRow1').style.display = 'none';document.getElementById('dbAuthTypeRow2').style.display = 'none';toggleDbAuthType('DB2');document.getElementById('targetWinNote').style.display = 'none';document.getElementById('targetLinuxNote').style.display = '';document.getElementById('winPatchNote').style.display = 'none';document.getElementById('webuiDirNote').style.display = 'none';document.getElementById('sqlInstanceNote').style.display = 'none';}document.getElementById('dbPortRadio').click();}window.onload = function () {if (rootServerWindows === 'True') {toggleOSFields(true);} else {toggleOSFields(false);}};document.getElementById('webuiRemoteHostIP').value = webUIHost;document.getElementById('webuiHttpPort').value = webuiHttpPort;document.getElementById('webuiHttpsPort').value = webuiHttpsPort;document.getElementById('webuiDirectory').value = webUIDir;document.getElementById('databasePort').value = defaultDatabasePort;function invalidPortNumber(port) {var numOnlyRegEx = /^[0-9]+$/;return (!numOnlyRegEx.test(port) || port < 1 || port > 65535);}document.body.ontakeaction = function (event) {if (event.contentID == 'Action1') {if (EvaluateRelevance('master flag of current console user') === "False") {alert('<?jxlat Only Master Operators can run this Fixlet.?>');return false;}var problemList = [];var params = new Object();var secureParams = new Object();params['isRootWindows'] = rootServerWindows;params['rootServerHost'] = rootServerHost;webuiHttpsPort = trimSpaces(document.getElementById('webuiHttpsPort').value);if (webuiHttpsPort === '') {problemList.push('<?jxlat "WebUI HTTPS Port" field must not be empty.?>');} else if (invalidPortNumber(webuiHttpsPort)) {problemList.push('<?jxlat "WebUI HTTPS Port" field contains an invalid port.?>');}webuiHttpPort = trimSpaces(document.getElementById('webuiHttpPort').value);if (webuiHttpPort === '') {problemList.push('<?jxlat "WebUI HTTP Redirect Port" field must not be empty.?>');} else if (invalidPortNumber(webuiHttpPort)) {problemList.push('<?jxlat "WebUI HTTP Redirect Port" field contains an invalid port.?>');}if (webuiHttpsPort === webuiHttpPort) {problemList.push('<?jxlat WebUI HTTPS port and WebUI HTTP Redirect port must be different.?>');}params['webuiHttpsPort'] = webuiHttpsPort;params['webuiHttpPort'] = webuiHttpPort;webUIHost = trimSpaces(document.getElementById('webuiRemoteHostIP').value);if (webUIHost === '') {problemList.push('<?jxlat "Hostname or IP of Target Endpoint" field must not be empty.?>');}params['webUIHost'] = webUIHost;webUIDir = trimSpaces(document.getElementById('webuiDirectory').value);if (webUIDir !== '') {params['webUIDirEntered'] = webUIDir;}var dbFullUsername = trimSpaces(document.getElementById('databaseUserName').value);if (dbFullUsername === '') {problemList.push('<?jxlat "Database Username" field must not be empty.?>');}var dbUserName = '';var dbUserDomain = '';if (rootServerWindows === 'True') {if (dbAuthType === 'Windows') {if (isDomainSlashUser(dbFullUsername) == true) {var slashPos = dbFullUsername.indexOf("\\");dbUserDomain = dbFullUsername.substr(0, slashPos);dbUserName = dbFullUsername.substr(slashPos + 1);} else {problemList.push('<?jxlat "Database Username" field must be in this format DOMAIN\username.?>');}} else if (dbAuthType === 'SQLServer') {var slashPos = dbFullUsername.indexOf("\\");if (slashPos !== -1) {problemList.push('<?jxlat "Database Username" field cannot contain backslash characters (\).?>');} else {dbUserName = dbFullUsername;}}} else {dbUserName = dbFullUsername;}secureParams['dbUserName'] = encodeURIComponent(dbUserName);params['dbUserDomain'] = encodeURIComponent(dbUserDomain.replace(/^\s+|\s+$|\\$/g, '').toUpperCase());params['dbAuthType'] = encodeURIComponent(dbAuthType);var dbPassword = document.getElementById('databasePassword').value;secureParams['dbPassword'] = encodeURIComponent(dbPassword);if (dbPassword === '') {problemList.push('<?jxlat "Database Password" field must not be empty.?>');}var confirmPassword = document.getElementById('databasePasswordConfirm').value;if (dbPassword !== confirmPassword) {problemList.push('<?jxlat Database Password fields do not match.?>');}var dbHostname = trimSpaces(document.getElementById('databaseHostIP').value);params['dbHostname'] = encodeURIComponent(dbHostname);if (dbHostname === '') {problemList.push('<?jxlat "Database Host" field must not be empty.?>');}var dbInstance = '';var dbInstanceRadioChecked = document.getElementById('dbInstanceRadio').checked;if (dbInstanceRadioChecked === true) {dbInstance = document.getElementById('databaseInstance').value;}params['dbInstance'] = encodeURIComponent(dbInstance);var dbPort = '';var dbPortRadioChecked = document.getElementById('dbPortRadio').checked;if (dbPortRadioChecked === true) {dbPort = document.getElementById('databasePort').value;if (dbPort === '') {problemList.push('<?jxlat "Database Port" field must not be empty.?>');} else if (invalidPortNumber(dbPort)) {problemList.push('<?jxlat "Database Port" field contains an invalid port.?>');}}params['dbPort'] = encodeURIComponent(dbPort);if (problemList.length > 0) {var problemString = '<?jxlat The following problems were encountered:?>';var i = 0;for (i = 0; i < problemList.length; ++i) {problemString += "\n" + problemList[i];}alert(problemString);return false;}var targetConfirmMsg = "<?jxlat The hostname or IP of the target endpoint you specified will be used to create a new set of certificates. The WebUI will use these certificates as credentials to authenticate itself to the Root Server. These new certificates will not replace the WebUI certificates used to access the WebUI via a browser. Do you want to continue? ?>";if (confirm(targetConfirmMsg) !== true) {return false;}var caCert;var authPair;try {caCert = GetWebUICertificateAuthority();authPair = GenerateWebUIAuthCertificate(webUIHost);} catch (e) {alert('<?jxlat Error encountered generating certificates. A IBM BigFix Server version of 99.99.0 is required to run this Fixlet.?>');return false;}secureParams['certAuth'] = caCert;secureParams['authCert'] = authPair.certificate;secureParams['authKey'] = authPair.privateKey;var fixletID = parseInt(EvaluateRelevance('id of current fixlet'));var siteID = 0xffffffff & parseInt(EvaluateRelevance('id of current bes site'));TakeSecureFixletActionOnComputers(fixletID, siteID, ACTION, params, secureParams);return false;}};</script><!--EndFixletField--></DIV></TD></TR></TBODY></TABLE>
</DIV>
<DIV class=FixletProperty>
<H4>File Size:</H4>
30.3 MB
 </DIV>
]]></Description>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance><![CDATA[version of client >= "9.5.3.191"]]></Relevance>
		<Relevance>version of registration server =  "9.5.11"</Relevance>
		<Relevance>"x86_64" = architecture of operating system</Relevance>
		<Relevance><![CDATA[if (windows of operating system) then (major version of it > 6 OR (major version of it = 6 AND minor version of it >= 1)) of operating system AND (platform id of it != 3) of operating system else (exists match (regex "Red Hat Enterprise (Client|Server|Workstation) (6|7)") of name of it) of operating system]]></Relevance>
		<Relevance>not exists webui service</Relevance>
		<Relevance>not exists setting "_WebUI_AppServer_IsEnabled" whose (value of it = "1") of client</Relevance>
		<Relevance><![CDATA[(if (windows of it) then (if (major version of it = 6 and minor version of it = 1 and service pack major version of it <= 1) then NOT ((((exists key "Microsoft-Windows-WinPE-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it) of item 0 of it AND (exists key "amd64_microsoft-windows-winsock-core_31bf3856ad364e35_none_09855afc6f639990" whose (exists key (if (exists default value of it) then default value of it as string else "6.1") whose ((it >= "6.1.7600" AND it < "6.1.7600.21004") of (default value of it as string as version)) of it) of it) of item 1 of it) OR ((exists key "Microsoft-Windows-Foundation-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it OR exists key "Microsoft-Windows-ServerCore-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it) of item 0 of it AND (exists key "amd64_microsoft-windows-winsock-core_31bf3856ad364e35_none_09855afc6f639990" whose (exists key (if (exists default value of it) then default value of it as string else "6.1") whose ((it >= "6.1.7600" AND it < "6.1.7600.21004") of (default value of it as string as version)) of it) of it) of item 1 of it) OR ((exists key "Microsoft-Windows-EmbeddedCore-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it) of item 0 of it AND (exists key "amd64_microsoft-windows-winsock-core_31bf3856ad364e35_none_09855afc6f639990" whose (exists key (if (exists default value of it) then default value of it as string else "6.1") whose ((it >= "6.1.7600" AND it < "6.1.7600.21004") of (default value of it as string as version)) of it) of it) of item 1 of it) OR ((exists key "Microsoft-Windows-WinPE-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it) of item 0 of it AND (exists key "amd64_microsoft-windows-winsock-core_31bf3856ad364e35_none_09855afc6f639990" whose (exists key (if (exists default value of it) then default value of it as string else "6.1") whose ((it >= "6.1.7601" AND it < "6.1.7601.21766") of (default value of it as string as version)) of it) of it) of item 1 of it) OR (((exists key "Microsoft-Windows-Foundation-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it OR exists key "Microsoft-Windows-Foundation-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it OR exists key "Microsoft-Windows-ServerCore-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it OR exists key "Microsoft-Windows-ServerCore-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it) AND (exists key "Microsoft-Windows-EmbeddedCore-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it OR exists key "Microsoft-Windows-Foundation-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it OR exists key "Microsoft-Windows-ServerCore-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it)) of item 0 of it AND (exists key "amd64_microsoft-windows-winsock-core_31bf3856ad364e35_none_09855afc6f639990" whose (exists key (if (exists default value of it) then default value of it as string else "6.1") whose ((it >= "6.1.7601" AND it < "6.1.7601.21766") of (default value of it as string as version)) of it) of it) of item 1 of it) OR (((exists key "Microsoft-Windows-EmbeddedCore-Package~31bf3856ad364e35~amd64~~6.1.7600.16385" of it OR exists key "Microsoft-Windows-EmbeddedCore-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it) AND (exists key "Microsoft-Windows-EmbeddedCore-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it OR exists key "Microsoft-Windows-Foundation-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it OR exists key "Microsoft-Windows-ServerCore-Package~31bf3856ad364e35~amd64~~6.1.7601.17514" of it)) of item 0 of it AND (exists key "amd64_microsoft-windows-winsock-core_31bf3856ad364e35_none_09855afc6f639990" whose (exists key (if (exists default value of it) then default value of it as string else "6.1") whose ((it >= "6.1.7601" AND it < "6.1.7601.21766") of (default value of it as string as version)) of it) of it) of item 1 of it)) of (key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\" of it, key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\" of it) of native registry) else (true) ) else (true) ) of operating system]]></Relevance>
		<Category>Upgrade</Category>
		<DownloadSize>31725329</DownloadSize>
		<Source>IBM</Source>
		<SourceID><![CDATA[<Unspecified>]]></SourceID>
		<SourceReleaseDate>2018-12-18</SourceReleaseDate>
		<SourceSeverity><![CDATA[<Unspecified>]]></SourceSeverity>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Tue, 18 Dec 2018 16:03:16 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-domain-attributes</Name>
			<Value>BES Deploy WebUI</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Mon, 20 May 2019 15:22:47 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<Action ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[ to install the&nbsp; IBM BigFix WebUI&nbsp; 9.5.11 Service]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[parameter "webuiHttpPortNotAvailable" = "{exists sockets whose(local port of it is (parameter "webuiHttpPort" as integer)) of network}"
parameter "webuiHttpsPortNotAvailable" = "{exists sockets whose(local port of it is (parameter "webuiHttpsPort" as integer)) of network}"
//Failure next means ports are in use on the endpoint
continue if{(parameter "webuiHttpsPortNotAvailable" = "False") and (parameter "webuiHttpPortNotAvailable" = "False")}
//Failure next means OS of endpoint does not match the Server's. If failure occurs, revoke WebUI Certificates for this endpoint.
continue if{windows of operating system as string = parameter "isRootWindows"}
//Failure next means authority for WebUI is missing from action
continue if{(exists parameter "certAuth") and (exists parameter "authCert") and (exists parameter "authKey")}
if {windows of operating system}
	if {exists parameter "webUIDirEntered"}
		parameter "webUIDir" = "{(if(last 1 of it is "\") then (preceding text of last "\" of it) else (it)) of ((parameter "webUIDirEntered" of action) as string)}\BES WebUI"
		//Failure next if not fully qualified path
		continue if {character 1 of parameter "webUIDir" = ":"}
	else
		// Choose a default WebUI installation path
		if {exists key "HKLM\Software\BigFix\Enterprise Server" whose (value "EnterpriseServerFolder" of it != "") of registry}
			parameter "webUIDir" = "{pathname of parent folder of folder(value "EnterpriseServerFolder" of key "HKLM\Software\BigFix\Enterprise Server" of registry as string)}\BES WebUI"
		else
			parameter "webUIDir" = "{pathname of program files x32 folder}\BigFix Enterprise\BES WebUI"
		endif
	endif
else
	folder create "/var/opt/BESWebUI"
endif
delete __appendfile
delete __createfile
if {windows of operating system}
	parameter "sitesDir" = "{parameter "webUIDir"}\WebUI\sites"
	if { parameter "dbAuthType" = "Windows" }
		parameter "dbUseSqlAuth" = "0"
	else
		parameter "dbUseSqlAuth" = "1"
	endif
	if { (parameter "dbAuthType" = "Windows") and (parameter "dbUserDomain" != "") }
		parameter "dbAuthUser" = "{parameter "dbUserDomain"}\{parameter "dbUserName"}"
	else
		parameter "dbAuthUser" = "{parameter "dbUserName"}"
	endif
	//Create WebUI certificate folder and files
	parameter "certFolder" = "{(client folder of current site as string) & "\__Local\Certs"}"
	folder delete "{parameter "certFolder"}"
	folder create "{parameter "certFolder"}"
	appendfile {parameter "certAuth"}
	move __appendfile "{parameter "certFolder"}\ca.crt"
	appendfile {parameter "authCert"}
	move __appendfile "{parameter "certFolder"}\auth_cert.crt"
	appendfile {parameter "authKey"}
	move __appendfile "{parameter "certFolder"}\auth_key.key"
	//Download and run the installer
	prefetch WebUIService.exe sha1:7caf38ad0e4963120b2e7cf77b307e52834233f6 size:26439152 http://software.bigfix.com/download/bes/95/BigFix-BES-WebUI-9.5.11.191.exe sha256:0321fedff12e22e601c85671bb83d15903a5b55fbd99a9a2154b87e4366124d1
	wait __Download\WebUIService.exe /s /v"/l*! \"{location of client}\beswebuiinstall.log\" REBOOT=ReallySuppress MSIRESTARTMANAGERCONTROL=Disable /qn INSTALLDIR=\"{parameter "webUIDir"}\" DB_HOSTNAME=\"{parameter "dbHostname"}\" DB_USER=\"{parameter "dbAuthUser"}\" DB_PASSWORD=\"{parameter "dbPassword"}\" DB_INSTANCE=\"{parameter "dbInstance"}\" DB_PORT=\"{parameter "dbPort"}\" DB_USE_SQL_AUTH=\"{parameter "dbUseSqlAuth"}\" WEBUI_SITES_DIR=\"{parameter "sitesDir"}\" WEBUI_SRC_CERT_DIR=\"{parameter "certFolder"}\" WEBUI_HTTP_PORT=\"{parameter "webuiHttpPort"}\" WEBUI_HTTPS_PORT=\"{parameter "webuiHttpsPort"}\""
	folder delete "{parameter "certFolder"}"
	//Stop if the installer did not copy the exe file
	parameter "webUIServiceExe" = "{parameter "webUIDir"}\WebUIService.exe" 
	continue if {exists file (parameter "webUIServiceExe")}
else
	parameter "sitesDir" = "/var/opt/BESWebUI/WebUI/sites"
	//Client settings that the Linux installer does not set by itself
	setting "_WebUI_Redirect_Enable"="1" on "{parameter "action issue date" of action}" for client
	setting "_WebUIAppEnv_PLATFORM_HOST" = "{parameter "rootServerHost"}" on "{parameter "action issue date" of action}" for client
	setting "_WebUIAppEnv_WORK_DIR"="{parameter "sitesDir"}" on "{parameter "action issue date" of action}" for client
	setting "_WebUI_Redirect_Port"="{parameter "webuiHttpPort"}" on "{parameter "action issue date" of action}" for client
	setting "_WebUI_HTTPS_Port"="{parameter "webuiHttpsPort"}" on "{parameter "action issue date" of action}" for client
	setting "_WebUIAppEnv_WebUI_DIR"="/var/opt/BESWebUI" on "{parameter "action issue date" of action}" for client
	//Download and run the installer
	prefetch BESWebUI.rpm sha1:9f6b0784d9133e240464507abc17e7c3a47c048f size:5286177 http://software.bigfix.com/download/bes/95/BESWebUI-9.5.11.191-rhe6.x86_64.rpm sha256:28c9b858433d7ea6e0559481f7a7516d6f469e3a76f6f93978a43a205e620ecb
	folder delete "{(client folder of current site as string) & "/__Local/Upgrade"}"
	folder create "{(client folder of current site as string) & "/__Local/Upgrade"}"
	move __Download/BESWebUI.rpm __Local/Upgrade/BESWebUI.rpm
	wait rpm -i __Local/Upgrade/BESWebUI.rpm
	//Stop if the installer did not copy the binary file
	continue if {exists file "/opt/BESWebUI/bin/BESWebUI"}
	folder create /var/opt/BESWebUI/Mirror
	folder delete /var/opt/BESWebUI/cert
	folder create /var/opt/BESWebUI/cert
	//Create WebUI certificate files
	appendfile {parameter "certAuth"}
	move __appendfile /var/opt/BESWebUI/cert/ca.crt
	appendfile {parameter "authCert"}
	move __appendfile /var/opt/BESWebUI/cert/auth_cert.crt
	appendfile {parameter "authKey"}
	//Move the private key file and restrict access on it
	createfile until __EOF
#!/bin/bash
mv __appendfile /var/opt/BESWebUI/cert/auth_key.key
/bin/chmod 600 /var/opt/BESWebUI/cert/auth_key.key
__EOF
	wait /bin/sh __createfile
	delete __createfile
	//Set firewall rules for firewalld on RHEL 7 and on iptables
	appendfile #!/bin/bash
	if {version of operating system >= "7"}
		appendfile /bin/firewall-cmd --permanent --zone=public --add-port={value of setting "_WebUI_Redirect_Port" of client}/tcp
		appendfile /bin/firewall-cmd --permanent --zone=public --add-port={value of setting "_WebUI_HTTPS_Port" of client}/tcp
		wait /bin/firewall-cmd --state
		if {exists true whose (if true then (exit code of action = 0) else false)}
			appendfile /bin/systemctl restart firewalld
		endif
	endif
	if {exists rpm "iptables"}
		appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebUI_Redirect_Port" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables
		appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebUI_HTTPS_Port" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables
		wait /sbin/service iptables status
		if {exists true whose (if true then (exit code of action = 0) else false)}
			appendfile /sbin/service iptables restart
		endif
	endif
	wait /bin/sh __appendfile
	delete __appendfile
	parameter "webuiDataDir" = "/var/opt/BESWebUI/WebUI"
	if { not exists folder ( parameter "webuiDataDir" ) }
		folder create { parameter "webuiDataDir" }
	endif
	//Run WebUI configuration step
	createfile until EOF
#!/bin/bash
LD_LIBRARY_PATH=/opt/BESWebUI/bin /opt/BESWebUI/bin/BESWebUI "$@"
EOF
	wait /bin/sh __createfile --configure --hostname="{parameter "dbHostname"}" --domain="{parameter "dbUserDomain"}" --user="{parameter "dbUserName"}" --password="{parameter "dbPassword"}" --instance="{parameter "dbInstance"}" --port={parameter "dbPort"} --directory="{parameter "webuiDataDir"}"
	delete __createfile
	//Enable usage of Enterprise database
	setting "_WebUIAppEnv_USE_BFENT"="1" on "{parameter "action issue date" of action}" for client
	//Restart WebUI service
	wait service beswebui restart
endif]]></ActionScript>
		</Action>
	</Task>
</BES>
