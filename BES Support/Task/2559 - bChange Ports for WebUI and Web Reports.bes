<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Change Ports for WebUI and Web Reports</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD><TABLE " id="__FixletHTMLField"><TBODY><TR><TD>Deploy this Fixlet to the Endpoint that is running the WebUI Service to change ports for the WebUI and Web Reports (if available).<BR> <P>This Fixlet changes&nbsp;the ports by doing the following automatically:</P> <UL> <LI>Setting the relevant client settings for WebUI and Web Reports ports<BR> <LI>Restarting the WebUI Service and Web Reports Server service.<BR></LI></UL> <P><B><FONT color=red>Important Note:</FONT></B> If&nbsp;the analysis "BES Component Versions" and Web Reports are both&nbsp;running on the EndPoint running the WebUI Service, additional fields are available that allow you to change Web Reports ports.</P> <br> <P><B><FONT color=red>Important Note:</FONT></B>The name of the targeted Endpoint can be entered to gather additional port information. If no matching name is found, no additional information will be displayed.</P><TABLE id=webuiPorts> <TBODY> <TR><TD class=input_title>Name of EndPoint (Optional):</TD><TD><INPUT onchange=handleEmptyHostname(this.id) id=hostnameOfEndpoint></TD></TR> <TR> <TD class=input_title>Change WebUI HTTPS port: </TD> <TD><INPUT onchange=handleEmpty(this.id) id=webuiHttpsPort> </TD></TR> <TR> <TD class=input_title>Change WebUI HTTP Redirect port: </TD> <TD><INPUT onchange=handleEmpty(this.id) id=webuiHttpPort> </TD></TR></TBODY></TABLE> <TABLE id=webreportPorts> <TBODY> <TR> <TD class=input_title>Change Web Reports HTTP Port: </TD> <TD><INPUT onchange=handleWebReportEmpty(this.id) id=webReportHttpPort></TD></TR> <TR id=webreportHttpsRow> <TD class=input_title>Change Web Reports HTTPS Port: </TD> <TD><INPUT onchange=handleWebReportEmpty(this.id) id=webReportHttpsPort></TD></TR></TBODY></TABLE> <STYLE> .input_title{ font-weight: bold; padding-top: 4px; padding-bottom: 4px; } </STYLE> <SCRIPT>var ACTION = 'Action1'; var hostname = ""; var webuiHttpPort = "N/A"; var webuiHttpsPort = "N/A"; document.getElementById('webuiHttpPort').value = webuiHttpPort; document.getElementById('webuiHttpsPort').value = webuiHttpsPort; var numOnlyRegEx = /^[0-9]+$/; var webreportHttpPort = "N/A"; var webreportHttpsPort = "N/A"; document.getElementById('webReportHttpPort').value = webreportHttpPort; document.getElementById('webReportHttpsPort').value = webreportHttpsPort; function handleEmptyHostname(id) { var textInput = document.getElementById(id); if(textInput.value.replace(/^\s+|\s+$/g,'')=="" || EvaluateRelevance('exists bes computer whose (name of it as lowercase = "'+textInput.value+'" as lowercase)') === 'False') { hostname = ""; webuiHttpPort = "N/A"; webuiHttpsPort = "N/A"; webreportHttpPort = "N/A"; webreportHttpsPort = "N/A"; document.getElementById('webuiHttpPort').value = webuiHttpPort; document.getElementById('webuiHttpsPort').value = webuiHttpsPort; document.getElementById('webReportHttpPort').value = webreportHttpPort; document.getElementById('webReportHttpsPort').value = webreportHttpsPort; document.getElementById('webreportPorts').style.display = ""; document.getElementById("webreportHttpsRow").style.display = ""; } else { hostname = textInput.value.replace(/^\s+|\s+$/g,''); var webuiHttpPorts = EvaluateRelevance('unique values whose (it !="") of (if (exists client settings whose (name of it = "_WebUI_Redirect_Port") of bes computers whose (name of it as lowercase contains "'+textInput.value+'" as lowercase)) then values of client settings whose (name of it = "_WebUI_Redirect_Port") of bes computers whose (name of it as lowercase contains "'+textInput.value+'" as lowercase) else "")'); var webuiHttpPort = "80"; if(webuiHttpPorts.length > 0){ webuiHttpPort = webuiHttpPorts[0]; document.getElementById('webuiHttpPort').value = webuiHttpPort;} var webuiHttpsPorts = EvaluateRelevance('unique values whose (it != "") of (if (exists client settings whose (name of it = "_WebUI_HTTPS_Port") of bes computers whose (name of it as lowercase contains "'+textInput.value+'" as lowercase)) then values of client settings whose (name of it = "_WebUI_HTTPS_Port") of bes computers whose (name of it as lowercase contains "'+textInput.value+'" as lowercase) else "")'); var webuiHttpsPort = "443"; if(webuiHttpsPorts.length > 0){ webuiHttpsPort = webuiHttpsPorts[0]; document.getElementById('webuiHttpsPort').value = webuiHttpsPort;} var webreportsExists = EvaluateRelevance('unique values whose (it != "False") of ((if (exists(best activation of item 0 of it) and active flag of best activation of item 0 of it) then (exists property result whose (value of it != "Not Installed" and name of property of it contains "BES Web Reports Version") of item 1 of it) and (exists client settings whose (name of it = "_WebUIAppEnv_WebUI_DIR") of item 1 of it) else False) of (bes analyses whose ((name of site of it) = "BES Support" and name of it = "BES Component Versions"),bes computers whose (name of it as lowercase contains "'+textInput.value+'" as lowercase)) as string)'); if(webreportsExists.length > 0) { var webreportHttpPorts = EvaluateRelevance('unique values whose (it != "") of (if (exists client settings whose (name of it = "_WebReports_HTTPServer_PortNumber") of bes computers whose (root server flag of it)) then values of client settings whose (name of it = "_WebReports_HTTPServer_PortNumber") of bes computers whose (name of it as lowercase contains "'+textInput.value+'" as lowercase) else "") as string');if(webreportHttpPorts.length > 0){ webreportHttpPort = webreportHttpPorts[0]; }var webreportHttpPortRedirect = EvaluateRelevance('unique values whose (it != "") of values of client settings whose (name of it = "_WebReports_HTTPRedirect_PortNumber") of bes computers whose (name of it as lowercase contains "'+textInput.value+'")');if(webreportHttpPortRedirect.length > 0 && numOnlyRegEx.test(webreportHttpPortRedirect)) {webreportHttpsPort = webreportHttpPort; webreportHttpPort = webreportHttpPortRedirect[0]; document.getElementById("webreportHttpsRow").style.display = ""; document.getElementById('webreportPorts').style.display = "";}else{document.getElementById('webreportPorts').style.display = ""; document.getElementById("webreportHttpsRow").style.display = "none";} document.getElementById('webReportHttpPort').value = webreportHttpPort; document.getElementById('webReportHttpsPort').value = webreportHttpsPort; } else { document.getElementById('webreportPorts').style.display = "none"; }}} function handleWebReportEmpty(id){ var textInput = document.getElementById(id); if (textInput.value.replace(/^\s+|\s+$/g,'')==""){ textInput.value = (id == 'webReportHttpPort' ? webreportHttpPort : webreportHttpsPort); } } function handleEmpty(id){ var textInput= document.getElementById(id); if (textInput.value.replace(/^\s+|\s+$/g,'')==""){ textInput.value = (id == 'webuiHttpPort' ? webuiHttpPort : webuiHttpsPort); } }document.body.ontakeaction = function (event) { var params = new Object(); if (event.contentID == ACTION) { var webreportHttpPort = document.getElementById('webReportHttpPort').value.replace(/^\s+|\s+$/g,''); var webreportHttpsPort = document.getElementById('webReportHttpsPort').value.replace(/^\s+|\s+$/g,''); if(webreportHttpPort === 'N/A'){ webreportHttpPort = ''; } if(webreportHttpsPort === 'N/A'){ webreportHttpsPort = ''; } var webuiHttpPort = document.getElementById('webuiHttpPort').value.replace(/^\s+|\s+$/g,''); var webuiHttpsPort = document.getElementById('webuiHttpsPort').value.replace(/^\s+|\s+$/g,''); if ((webuiHttpPort !== '' && (!numOnlyRegEx.test(webuiHttpPort) || webuiHttpPort < 1 || webuiHttpPort > 65535)) || (webuiHttpsPort !== '' && (!numOnlyRegEx.test(webuiHttpsPort) || webuiHttpsPort < 1 || webuiHttpsPort > 65535))) { alert('<?jxlat Port numbers must be a number between 1 and 65535.?>'); return false; } else if( (webreportHttpPort !== '' && (!numOnlyRegEx.test(webreportHttpPort) || webreportHttpPort < 1 || webreportHttpPort > 65535)) || (webreportHttpsPort !== '' && (!numOnlyRegEx.test(webreportHttpsPort) || webreportHttpsPort < 1 || webreportHttpsPort > 65535))){ alert('<?jxlat Port numbers must be between 1 and 65535.?>'); return false; } else if (webuiHttpPort !== '' && (webuiHttpPort == webreportHttpPort || webuiHttpPort == webreportHttpsPort)) { alert('<?jxlat Port numbers for WebUI must be different than the port numbers for Web Reports.?>'); return false; } else if(webuiHttpsPort !== '' && (webuiHttpsPort == webreportHttpPort || webuiHttpsPort == webreportHttpsPort)){ alert('<?jxlat Port numbers for WebUI must be different than the port numbers for Web Reports.?>'); return false; } else if (webuiHttpPort !== '' && webuiHttpsPort !== '' && webuiHttpPort == webuiHttpsPort) { alert('<?jxlat WebUI\'s HTTP port number and HTTPS port number must be different.?>'); return false; } else if (webreportHttpPort !== '' && webreportHttpPort !== '' && webreportHttpPort == webreportHttpsPort) { alert('<?jxlat Web Report\'s HTTP port number and HTTPS port number must be different.?>'); return false; } var fixletID = parseInt(EvaluateRelevance('id of current fixlet')); var siteID = 0xffffffff & parseInt(EvaluateRelevance('id of current bes site')); params["hostname"] = hostname; params["webuiHttpPort"] = webuiHttpPort; params["webuiHttpsPort"] = webuiHttpsPort; params["inputWebReportHttpPort"] = webreportHttpPort; params["inputWebReportHttpsPort"] = webreportHttpsPort; TakeFixletAction(fixletID, siteID, ACTION, params); return false; } else { return false; } }</SCRIPT> <BR></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance><![CDATA[version of registration server >= "9.2.6"]]></Relevance>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance><![CDATA[version of client >= "9.5.3.191"]]></Relevance>
		<Relevance><![CDATA[version of registration server >= "9.5.3"]]></Relevance>
		<Relevance>exists webui service</Relevance>
		<Category></Category>
		<Source>BigFix</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-09-30</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Mon, 10 Oct 2016 17:58:06 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-domain_attributes</Name>
			<Value>BES Component WUI</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Tue, 18 Dec 2018 16:03:16 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[// WebReport Ports
parameter "webreportSSLEnabled" = "{if (exists setting "_WebReports_HTTPServer_UseSSLFlag" of client) then value of setting "_WebReports_HTTPServer_UseSSLFlag" of client as string else "0"}" 
parameter "webreportRedirectEnabled" = "{if (exists setting "_WebReports_HTTPRedirect_Enabled" of client) then value of setting "_WebReports_HTTPRedirect_Enabled" of client as string else "0"}" 
parameter "webreportHttpPortDefault" = "{if (exists service "BESWebReportsServer") then (if (parameter "webreportSSLEnabled" != "0") then "443" else "80") else ""}" 
parameter "webreportRedirectPortDefault" = "{if (exists service "BESWebReportsServer") then (if ((parameter "webreportRedirectEnabled" != "0") and (parameter "webreportSSLEnabled" != "0")) then "80" else "") else ""}" 
parameter "webreportHttpPort" = "{if (exists parameter "inputWebReportHttpPort") then (parameter "inputWebReportHttpPort" as string) else if(exists service "BESWebReportsServer") and (exists setting "_WebReports_HTTPServer_PortNumber" of client) then value of setting "_WebReports_HTTPServer_PortNumber" of client else parameter "webreportHttpPortDefault"}"
parameter "webreportRedirectPort"="{if(exists service "BESWebReportsServer") and (exists setting "_WebReports_HTTPRedirect_PortNumber" of client) then value of setting "_WebReports_HTTPRedirect_PortNumber" of client else parameter "webreportRedirectPortDefault"}"
parameter "webreportHttpsPort" = "{if (exists parameter "inputWebReportHttpsPort") then (parameter "inputWebReportHttpsPort" as string) else if(exists service "BESWebReportsServer") of client then if(exists setting "_WebReports_HTTPServer_UseSSLFlag" whose (value of it = "1") of it) of client then value of setting "_WebReports_HTTPServer_PortNumber" of client else "" else ""}"
//Enable WebUI only if WebUI ports do not match Web Reports ports and WebUI HTTP port is not equal to WebUI HTTPS port
continue if {parameter "webuiHttpPort" != parameter "webuiHttpsPort" and parameter "webuiHttpPort" != parameter "webreportHttpPort" and parameter "webuiHttpPort" != parameter "webreportRedirectPort" and parameter "webuiHttpsPort" != parameter "webreportHttpPort" and parameter "webuiHttpsPort" != "webreportRedirectPort" and parameter "webuiHttpPort" != parameter "webreportHttpsPort"}
if{(parameter "webreportHttpPort" != "") and (parameter "webreportHttpsPort" !="")}
  continue if{(parameter "webreportHttpPort" != parameter "webreportHttpsPort")}
endif
if {(exists service "BESWebReportsServer")}
  if{(parameter "webreportHttpPort" != "" and parameter "webreportHttpsPort" != "")}
    parameter "oldWebReportHttpsPort" = "{value of setting whose(name of it ="_WebReports_HTTPServer_PortNumber") of client}"
    setting "_WebReports_HTTPServer_PortNumber"="{parameter "webreportHttpsPort"}" on "{parameter "action issue date" of action}" for client
     parameter "oldWebReportHttpPort" = "{value of setting whose(name of it ="_WebReports_HTTPRedirect_PortNumber") of client}"
    setting "_WebReports_HTTPRedirect_Enabled"="1" on "{parameter "action issue date" of action}" for client
    setting "_WebReports_HTTPRedirect_PortNumber"="{parameter "webreportHttpPort"}" on "{parameter "action issue date" of action}" for client
  elseif {(parameter "webreportHttpPort" != "") and (parameter "webreportHttpsPort" = "")}
  parameter "oldWebReportHttpPort" = "{value of setting whose(name of it ="_WebReports_HTTPServer_PortNumber") of client}"
    setting "_WebReports_HTTPServer_PortNumber"="{parameter "webreportHttpPort"}" on "{parameter "action issue date" of action}" for client
  endif
endif
parameter "oldWebUIHttpPort"="{value of setting whose(name of it ="_WebUI_Redirect_Port") of client}"
parameter "oldWebUIHttpsPort"="{value of setting whose(name of it ="_WebUI_HTTPS_Port") of client}"
if {(parameter "webuiHttpPort" != "80") or ((exists setting "_WebUI_Redirect_Enable" whose (value of it != "0") of it and exists setting "_WebUI_Redirect_Port" whose (value of it != parameter "webuiHttpPort") of it) of client)}
  setting "_WebUI_Redirect_Enable"="1" on "{parameter "action issue date" of action}" for client
  setting "_WebUI_Redirect_Port"="{parameter "webuiHttpPort"}" on "{parameter "action issue date" of action}" for client
endif
if {(parameter "webuiHttpsPort" != "443") or (exists setting "_WebUI_HTTPS_Port" whose (value of it != parameter "webuiHttpPort") of client)}
  setting "_WebUI_HTTPS_Port"="{parameter "webuiHttpsPort"}" on "{parameter "action issue date" of action}" for client
endif
if{windows of operating system}
  if {version of webui service < "9.5.11"}
    parameter "webuiHttpRule"="BES WebUI HTTP"
    parameter "webuiHttpsRule"="BES WebUI HTTPS"
  else
    parameter "webuiHttpRule"="BES WebUI (HTTP)"
    parameter "webuiHttpsRule"="BES WebUI (HTTPS)"
  endif
  wait "{pathname of system folder}\netsh.exe" advfirewall firewall set rule name="{parameter "webuiHttpRule"}" new localport={parameter "webuiHttpPort"}
  wait "{pathname of system folder}\netsh.exe" advfirewall firewall set rule name="{parameter "webuiHttpsRule"}" new localport={parameter "webuiHttpsPort"}
  if {exists running service "MpsSvc"}
    waithidden cmd /c net stop "Windows Firewall"
    waithidden cmd /c net start "Windows Firewall"
  endif
  if{(exists running service "BESWebReportsServer")}
    wait cmd.exe /C net stop BESWebUI
    wait cmd.exe /C net stop BESWebReportsServer
    wait cmd.exe /C net start BESWebUI
    wait cmd.exe /C net start BESWebReportsServer
  else
    wait cmd.exe /C net stop BESWebUI
    wait cmd.exe /C net start BESWebUI
  endif
else
  delete __appendfile
  appendfile #!/bin/bash
  if{version of operating system >= "7"}
appendfile firewall-cmd --permanent --zone=public --remove-port={parameter "oldWebUIHttpPort"}/tcp
appendfile firewall-cmd --permanent --zone=public --remove-port={parameter "oldWebUIHttpsPort"}/tcp

    if{exists parameter "oldWebReportHttpPort"}
      appendfile firewall-cmd --permanent --zone=public --remove-port={parameter "oldWebReportHttpPort"}/tcp  
    endif
    if {exists parameter "oldWebReportHttpPort"}
      appendfile firewall-cmd --permanent --zone=public --remove-port={parameter "oldWebReportHttpsPort"}/tcp
    endif

appendfile firewall-cmd --permanent --zone=public --add-port={value of setting "_WebUI_Redirect_Port" of client}/tcp
appendfile firewall-cmd --permanent --zone=public --add-port={value of setting "_WebUI_HTTPS_Port" of client}/tcp

    if{(parameter "webreportHttpPort" != "" and parameter "webreportHttpsPort" != "")}
      appendfile /bin/firewall-cmd --permanent --zone=public --add-port={parameter "webreportHttpPort"}/tcp  
      appendfile /bin/firewall-cmd --permanent --zone=public --add-port={parameter "webreportHttpsPort"}/tcp 
    elseif {(parameter "webreportHttpPort" != "" and parameter "webreportHttpsPort" = "")}
      appendfile /bin/firewall-cmd --permanent --zone=public --add-port={parameter "webreportHttpPort"}/tcp
    endif
    wait firewall-cmd --state
    if {exists true whose (if true then (exit code of action = 0) else false)}
      appendfile /bin/systemctl restart firewalld
    endif
  endif
  if{exists rpm "iptables"}
appendfile /sbin/iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport {parameter "oldWebUIHttpPort"} -j ACCEPT
appendfile /sbin/iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport {parameter "oldWebUIHttpsPort"} -j ACCEPT

    if{exists parameter "oldWebReportHttpPort"}
      appendfile /sbin/iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport {parameter "oldWebReportHttpPort"} -j ACCEPT  
    endif
    if {exists parameter "oldWebReportHttpPort"}
      appendfile /sbin/iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport {parameter "oldWebReportHttpPort"} -j ACCEPT
    endif

appendfile /sbin/service iptables save

appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebUI_Redirect_Port" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables
appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebUI_HTTPS_Port" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables

    if{(parameter "webreportHttpPort" != "" and parameter "webreportHttpsPort" != "")}
      appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebReports_HTTPServer_PortNumber" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables
      appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebReports_HTTPRedirect_PortNumber" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables
    elseif {(parameter "webreportHttpPort" != "" and parameter "webreportHttpsPort" = "")}
      appendfile sed -i -n '1h;1!H;${{;g;s/*filter\n\(:[^\n]*\n\)*/&-A INPUT -m state --state NEW -m tcp -p tcp --dport {value of setting "_WebReports_HTTPServer_PortNumber" of client} -j ACCEPT\n/g;p;}' /etc/sysconfig/iptables
    endif

    wait /sbin/service iptables status
    if{exit code of action = 0}
      appendfile /sbin/service iptables restart 
    endif 
  endif
wait /bin/sh __appendfile
  if{(exists running service "BESWebReportsServer")}
    wait /etc/init.d/beswebui stop
    wait /etc/init.d/beswebreports stop
    wait /etc/init.d/beswebui start
    wait /etc/init.d/beswebreports start
  else
    wait /etc/init.d/beswebui stop
    wait /etc/init.d/beswebui start
  endif
endif
parameter "serverStartTime" = "{apparent registration server time}"
pause while {(apparent registration server time - time(parameter "serverStartTime")) < (60 * second)}
relay select]]></ActionScript>
		</DefaultAction>
	</Task>
</BES>
