<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Install Latest Notification Service</Title>
		<Description><![CDATA[
<DIV class=FixletMessage>
<TABLE><TBODY><TR><TD><br><DIV class=FixletMessage><br>	<TABLE><br>		<TBODY><br>			<TR><br>				<TD><br>        <br>					<DIV id=fixletMessage2 class=FixletMessage><br><br>						<DIV id = paramFixletDescription><br><br>							<P><br>								<br>Use this Task to set up and start the email Notification Service. <br><br>							</P><br>			 <br>							<P><STRONG>Prerequisites:</STRONG></P><br><br>							<UL><br><br>								<LI>The BES Server Plugin must be installed before running this Task.<BR><br><br>								    To install the BES Server Plugin use the <?relevance  (link of fixlets 708 of bes site whose (id of it = 1)) ?> Task.</LI><br><br>								<LI>The REST API credentials for the BES Server Plugin must also be configured before running this Task.<BR><br>				 <br>							  	  To configure REST API credentials for the BES Server Plugin use the <?relevance  (link of fixlets 1294 of bes site whose (id of it = 1)) ?> Task.</LI><br><br>							  	<LI><STRONG>NOTE:</STRONG> In order to use the notification service with the Web UI, the notification service must be installed on the same host as the Web UI.</LI><br><br>					 		</UL><br><br>					 		<P><br><br>							<P><br><br>								This Task downloads the software and starts the notification service.<br><br><br>								You must run this Task to set up the notification service before you can send email notifications. <br><br><br>								The SMTP notification settings must also be configured after running this Task.<br><br> <br>								To configure the SMTP settings, run Task <?relevance  (link of fixlets 2240 of bes site whose (id of it = 1))?> to configure SMTP Settings for the Notification Service.<br><br>							</P><br><br><br>			    		<script>
		
		   	loaded = false;
				
		 	
			function loadScript(url, callback) 						
			{ 													   
				var head = document.getElementsByTagName("head")[0]; 						   
				var script = document.createElement('script'); 						   
				script.type = 'text/javascript'; 						   
				script.src = url;  						   				   
				script.onreadystatechange = callback; 						   
				script.onload = callback;  						   
				head.appendChild(script); 						
				
			} 						 						
		 		
		
			function scriptLoaded(){ 			
				if (!loaded){ 	
					var paramFixletDescription = document.getElementById('paramFixletDescription');
					if ( typeof FixletUtils !== 'undefined') {
						loaded = true;
						paramFixletDescription.style.display="block" ;
						FixletUtils.initFixletRender(); 
					} else {
						paramFixletDescription.style.display="none" ;
					}
			    } 						
			} 	
	
			loadScript("vrt_fixletUtils.js", scriptLoaded);
			 										
							</script><br><br><br>						</DIV><br>					</DIV><br>				</TD><br>			</TR><br>		</TBODY><br>	</TABLE><br></DIV><br><DIV class=FixletProperty><br>	<H4>File Size:</H4><br>		19.5 MB<br></DIV><br></TD></TR></TBODY></TABLE>
</DIV>
<DIV class=FixletProperty>
<H4>File Size:</H4>
21.0 MB
 </DIV>
]]></Description>
		<Relevance>exists relay service OR exists main gather service</Relevance>
		<Relevance>exists main gather service</Relevance>
		<Relevance><![CDATA[version of main gather service >= "9"]]></Relevance>
		<Relevance>exists relay service OR exists main gather service</Relevance>
		<Relevance>exists main gather service</Relevance>
		<Relevance><![CDATA[version of main gather service >= "9"]]></Relevance>
		<Relevance>(windows of it AND x64 of it) of operating system</Relevance>
		<Relevance>exists services whose(service name of it = "BESPluginService")</Relevance>
		<Relevance><![CDATA[exists   (    folder     (      value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications"    )  )  whose  (    exists file "MFS.exe"     whose    (      version of it >= "2.0.0.0"    )    of it  ) 		]]></Relevance>
		<Relevance><![CDATA[if    (      not exists folder       (        value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications\NotificationService"      )    )  then    true   else    if      (        exists folder         (          value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications\NotificationService"        )      )    then      if        (          not           (            exists file             (              value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server\" of registry as string & "Applications\NotificationService\resources\metadata.xml"            )          )        )      then        true       else        (          (            exists file             (              value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server\" of registry as string & "Applications\NotificationService\resources\metadata.xml"            )           and            (              (                node value of xpath "/ns.metadata/property[@name='ns.build.version']/text()" of xml document of file                 (                  value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server\" of registry as string & "Applications\NotificationService\resources\metadata.xml"                )                as version              )              <               (                "2.0.2" as version              )            )          )        )    else      false 		]]></Relevance>
		<Category>Notification</Category>
		<DownloadSize>22039779</DownloadSize>
		<Source>IBM</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2015-11-18</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Thu, 17 Dec 2015 21:33:00 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>parameterfixletinfotag</Name>
			<Value>{ 			   "FixletInfo":{ 			      "fixletInfoId":"Fixlet_2238", 			      "messageFileName":"vrt_MimeMessages.js" 			   } 			}</Value>
		</MIMEField>
		<MIMEField>
			<Name>parametermetadatatag</Name>
			<Value>{ 			   "Port":{ 			      "Name":"Port", 			      "Title":"Notification Service Port *", 			      "Description":"Notification Service port number (1-65535).", 			      "UIType":"textbox", 			      "Disabled":"false", 			      "Override":"false", 			      "DataType":"number", 			      "Required":"1", 			      "Default":"3000", 			      "CustomValidator":"validatePortNumber" 			   } 			}</Value>
		</MIMEField>
		<MIMEField>
			<Name>parametermessagestag</Name>
			<Value>{ 			   "FixletGlobalMessages":{ 			      "FIXLET_2238_INVALID_PORT_NUMBER":"Invalid port number. The port value must be between 1 - 65535." 			   } 			}</Value>
		</MIMEField>
		<MIMEField>
			<Name>parametervalidatortag</Name>
			<Value><![CDATA[{ 				validatePortNumber : function (validationObj , metaDataobjects ) { 					/* YL */ 					var PortValue = FixletUtils.getDomElement('Port' , metaDataobjects).value; 					if (PortValue.replace(/\ /g,"") === '' || parseInt(PortValue, 10)  > 65535 || parseInt(PortValue, 10) < 1)  { 						return 'FIXLET_2238_INVALID_PORT_NUMBER'; 					} 				} 			}]]></Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Mon, 11 Mar 2019 10:58:50 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
prefetch NotificationService-2.0.2-win.zip sha1:5afbfedbec7f52746c4a1f811bc51c37e5914454 size:22039779 http://software.bigfix.com/download/bes/util/NotificationService/NotificationService-2.0.2-win.zip sha256:0abcd09f080c484df523e3113b3117fec52ab75e675e3f24295ab609afb40591
prefetch unzip.exe sha1:e1652b058195db3f5f754b7ab430652ae04a50b8 size:167936 http://software.bigfix.com/download/redist/unzip-5.52.exe utility __Download\unzip.exe sha256:8d9b5190aace52a1db1ac73a65ee9999c329157c8e88f61a772433323d6b7a4a


// Path to Applications folder under BES Server
parameter "AppsFolder" = "{pathname of (folder (value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string & "Applications"))}"

// Path to existing Notification Service installation (if any) under Applications folder
parameter "NS_RootFolder" = "{parameter "AppsFolder" & "\NotificationService"}"

// Folder to use for unpacking installation zip.
// (the paths of some of the node module dependencies are very deep, so we need to unpack to a directory close to root)
parameter "NS_StagingFolder_drive" = "{name of (drive of (folder (value "EnterpriseServerFolder" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string)))}"
parameter "NS_StagingFolder" = "{parameter "NS_StagingFolder_drive" & "\ns-staging"}"

// Folder to use for backing up user-modified content that should persist over upgrade.
parameter "NS_BackupFolder" = "{parameter "AppsFolder" & "\NS-upgrade-tmp"}"

// Paths to Server Plugin XML files (and corresponding '.stop' files)
parameter "MFS_XML_Notifier_Registered"   = "{parameter "AppsFolder" & "\Config\ns-notifier.xml"}"
parameter "MFS_XML_Monitor_Registered"    = "{parameter "AppsFolder" & "\Config\ns-monitor.xml"}"
parameter "MFS_XML_Notifier_UnRegistered" = "{parameter "MFS_XML_Notifier_Registered" & ".stop"}"
parameter "MFS_XML_Monitor_UnRegistered"  = "{parameter "MFS_XML_Monitor_Registered"  & ".stop"}"

//Path to log file
parameter "InstallLogFile" = "{parameter "AppsFolder" & "\ns_install_trace.log"}"

// Path to Notification Service configuration files
parameter "NS_ConfigJson"       = "{parameter "NS_RootFolder" & "\resources\config\nsConfig.json"}"
parameter "NS_LogConfigJson"    = "{parameter "NS_RootFolder" & "\resources\config\nsLogConfig.json"}"
parameter "NS_SMTPConfigJson"   = "{parameter "NS_RootFolder" & "\resources\config\messagingConf.json"}"
parameter "NS_MonitorCacheFile" = "{parameter "NS_RootFolder" & "\apps\ns-monitor\resources\processedIds.cache"}"

// Security artifacts
parameter "privateKeyFile"  = "ns-private.pem"
parameter "certificateFile" = "ns-public.cert"

parameter "NS_MetadataXml"  = "{parameter "NS_RootFolder" & "\resources\metadata.xml"}"
parameter "NS_NotifierPort" = "{ parameter "Port" of action }"

waithidden cmd.exe /C echo =========================================================== >> "{parameter "InstallLogFile"}"
waithidden cmd.exe /C echo Notification Service Install (%date% @ %time%)              >> "{parameter "InstallLogFile"}"
waithidden cmd.exe /C echo =========================================================== >> "{parameter "InstallLogFile"}"

// Un-register the NS apps from the server plugin (first the monitor, then the notifier)
if { exists file (parameter "MFS_XML_Monitor_Registered") }
	waithidden cmd.exe /C echo Unregistering the Notification Service App [ns-monitor] from the BES Server Plugin ... >> "{parameter "InstallLogFile"}"
	waithidden cmd.exe /C move "{parameter "MFS_XML_Monitor_Registered"}" "{parameter "MFS_XML_Monitor_UnRegistered"}"

	// Assert that the server plugin is no longer monitoring the notification service app before continuing
	continue if { not exists file (parameter "MFS_XML_Monitor_Registered") and exists file (parameter "MFS_XML_Monitor_UnRegistered") }
	waithidden cmd.exe /C echo   ^> Unregistered successfully. >> "{parameter "InstallLogFile"}"
endif
if { exists file (parameter "MFS_XML_Notifier_Registered") }
    waithidden cmd.exe /C echo Unregistering the Notification Service App [ns-notifier] from the BES Server Plugin ... >> "{parameter "InstallLogFile"}"
    waithidden cmd.exe /C move "{parameter "MFS_XML_Notifier_Registered"}" "{parameter "MFS_XML_Notifier_UnRegistered"}"

    // Assert that the server plugin is no longer monitoring the notification service app before continuing
    continue if { not exists file (parameter "MFS_XML_Notifier_Registered") and exists file (parameter "MFS_XML_Notifier_UnRegistered") }
    waithidden cmd.exe /C echo   ^> Unregistered successfully. >> "{parameter "InstallLogFile"}"
endif

// ==============
// *** BACKUP ***
// ==============

delete __createfile
delete backup.bat

// ====================================
createfile until END_BACKUP_BAT
@echo off
pushd        "{ parameter "AppsFolder"   }"
rmdir /S /Q  "{ parameter "NS_BackupFolder" }"
mkdir        "{ parameter "NS_BackupFolder" }"

if exist "{parameter "NS_SMTPConfigJson"}" (
	echo Backing up existing NS SMTP config file ... >> "{parameter "InstallLogFile"}"
    copy /Y  "{parameter "NS_SMTPConfigJson"}" "{parameter "NS_BackupFolder"}"
)
if exist "{parameter "NS_ConfigJson"}" (
	echo Backing up existing NS service config file ... >> "{parameter "InstallLogFile"}"
    copy /Y  "{parameter "NS_ConfigJson"}" "{parameter "NS_BackupFolder"}"
)
if exist "{parameter "NS_LogConfigJson"}" (
    echo Backing up existing NS service log config file ... >> "{parameter "InstallLogFile"}"
    copy /Y  "{parameter "NS_LogConfigJson"}" "{parameter "NS_BackupFolder"}"
)
if exist "{parameter "NS_MonitorCacheFile"}" (
	echo Backing up existing NS service cache file ... >> "{parameter "InstallLogFile"}"
    copy /Y  "{parameter "NS_MonitorCacheFile"}" "{parameter "NS_BackupFolder"}"
)
if exist "{(parameter "NS_RootFolder") & "\apps\ns-notifier\resources\certs\" & (parameter "privateKeyFile")}" if exist "{(parameter "NS_RootFolder") & "\apps\ns-notifier\resources\certs\" & (parameter "certificateFile")}" (
	echo Backing up ns-notifier app's existing key/cert files ... >> "{parameter "InstallLogFile"}"
    copy /Y  "{(parameter "NS_RootFolder") & "\apps\ns-notifier\resources\certs\" & (parameter "privateKeyFile")}" "{parameter "NS_BackupFolder"}"
    copy /Y  "{(parameter "NS_RootFolder") & "\apps\ns-notifier\resources\certs\" & (parameter "certificateFile")}" "{parameter "NS_BackupFolder"}"
)

popd
END_BACKUP_BAT
// ====================================

move __createfile backup.bat
waithidden backup.bat
delete backup.bat

// ==============
// *** REMOVE ***
// ==============

// Delete NS folders and files
if { exists folder (parameter "NS_RootFolder") }
	delete __createfile
	delete remove.bat

// ====================================
	createfile until END_REMOVE_BAT
@echo off
@setlocal enableextensions enabledelayedexpansion

:: Set directory to navigate to in order to use the node.exe binary
pushd "{ parameter "AppsFolder" }"

if exist "{parameter "NS_RootFolder"}" (
	echo Removing the Notification Service directory ... >> "{parameter "InstallLogFile"}"
	rmdir  /S /Q "{parameter "NS_RootFolder"}"
	
	echo Creating the temporary staging directory for the installation .. >> "{parameter "InstallLogFile"}"
	if exist "{parameter "NS_StagingFolder"}" (
        rmdir  /S /Q "{parameter "NS_StagingFolder"}"
    )
)

popd
endlocal
END_REMOVE_BAT
// ====================================

	move __createfile remove.bat
// Assert un-install was successful.Pause and allow time for the application to shut down  to avoid failing to delete the folders due to running notification application
parameter "start" = "{now}"
pause while {now < ( ((  parameter "start" of action  ) as time ) + 40* second)}
	waithidden remove.bat
	delete remove.bat

	if { not exists folder ( parameter "NS_RootFolder" ) }
		waithidden cmd.exe /C echo   ^> Directory removed successfully. >> "{parameter "InstallLogFile"}"
	else 
	   waithidden cmd.exe /C echo   ^> Directory removal FAILED! >> "{parameter "InstallLogFile"}"
	endif
endif


continue if { not exists folder ( parameter "NS_RootFolder" ) }
// ===============
// *** INSTALL ***
// ===============

waithidden cmd.exe /C echo Unpacking the Notification Service install bundle ... >> "{parameter "InstallLogFile"}"
folder create "{parameter "NS_StagingFolder"}"
continue if { exists folder ( parameter "NS_StagingFolder" ) }
waithidden __Download\unzip.exe -qq -o -d "{parameter "NS_StagingFolder"}" __Download\NotificationService-2.0.2-win.zip"
waithidden cmd.exe /C move "{parameter "NS_StagingFolder"}" "{parameter "NS_RootFolder"}"

if { not exists file (parameter "MFS_XML_Notifier_UnRegistered") OR not exists file (parameter "MFS_XML_Monitor_UnRegistered") }
	// Write NS configuration file for BES Plug-in Service/MFS.
	waithidden cmd.exe /C echo Configuring the BES Server Plugin ... >> "{parameter "InstallLogFile"}"
	delete __createfile
	delete mfs_xml_gen.bat

// ====================================
	createfile until END_NS_XML_GEN
@ECHO OFF

set NS_ROOT_DIR=%~1
set APP_NAME=%2
set XML_FILE=%3

IF EXIST %XML_FILE% ( DEL %XML_FILE% )

echo ^<^?xml version="1.0"^?^> >> %XML_FILE%
echo ^<BESPluginRegistration^> >> %XML_FILE%
echo     ^<Name^>%APP_NAME%^</Name^> >> %XML_FILE%
echo     ^<Command^>^"%NS_ROOT_DIR%\bin\startNSApp.bat^" %APP_NAME%^</Command^> >> %XML_FILE%
echo    ^<Schedule^> >> %XML_FILE%
echo        ^<WaitPeriodSeconds^>30^</WaitPeriodSeconds^> >> %XML_FILE%
echo    ^</Schedule^> >> %XML_FILE%
echo    ^<ForceKill^>true^</ForceKill^> >> %XML_FILE%
echo ^</BESPluginRegistration^> >> %XML_FILE%
END_NS_XML_GEN
// ====================================

    // Write it as the stopped file so the server plugin doesn't try to execute it immediately
	move "__createfile" mfs_xml_gen.bat
	
	// Create MFS XML files initially with the .stop extension (they'll be modified at the end of the fixlet)
    if { not exists file (parameter "MFS_XML_Notifier_Registered") }	
	   waithidden mfs_xml_gen.bat "{parameter "NS_RootFolder"}" ns-notifier "{parameter "MFS_XML_Notifier_UnRegistered"}"
	   waithidden cmd.exe /C echo   ^> Configured [ns-notifier] successfully. >> "{parameter "InstallLogFile"}"
	endif
	if { not exists file (parameter "MFS_XML_Monitor_Registered") } 
       waithidden mfs_xml_gen.bat "{parameter "NS_RootFolder"}" ns-monitor "{parameter "MFS_XML_Monitor_UnRegistered"}"
       waithidden cmd.exe /C echo   ^> Configured [ns-monitor] successfully. >> "{parameter "InstallLogFile"}"
    endif
	
	delete mfs_xml_gen.bat
endif

waithidden cmd.exe /C echo Configuring the Notification Service ... >> "{parameter "InstallLogFile"}"
waithidden cmd.exe /C echo ^> Metadata ... >> "{parameter "InstallLogFile"}"

// ====================================
createfile until END_NS_METADATA_XML
<?xml version="1.0" encoding="UTF-8"?>
<ns.metadata>
  <property name="ns.build.version">2.0.2</property>
  <property name="ns.build.timestamp">2019/02/25 15:23:01</property>
</ns.metadata>

END_NS_METADATA_XML
// ====================================

if { exists file ( parameter "NS_MetadataXml" ) }
    delete "{parameter "NS_MetadataXml"}"
endif
move "__createfile" "{parameter "NS_MetadataXml"}"
delete __createfile

continue if { exists file   ( parameter "NS_MetadataXml"   ) }
waithidden cmd.exe /C echo   ^> Metadata configured successfully. >> "{parameter "InstallLogFile"}"

waithidden cmd.exe /C echo ^> Service ... >> "{parameter "InstallLogFile"}"

// Check if we need to set up the bundled nsConfig.json file, or if we'll be using the one in the backup folder
if {not exists file (parameter "NS_BackupFolder" & "\" & parameter "NS_ConfigJson") }
	// Update the Notification configuration file by iterating through the file, replacing properties as necessary
	appendfile { concatenation "%0d%0a" of ( if (it as lowercase contains "%22port%22" ) then ("  %22port%22: " & (parameter "NS_NotifierPort") & ",") else if (it as lowercase contains "%22bes-server-host%22" ) then ("  %22bes-server-host%22: %22" & (substring before ":" of substring after "//" of (value "hostname" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server\Installer" of registry as string)) & "%22,") else if (it as lowercase contains "%22bes-server-port%22" ) then ("  %22bes-server-port%22: " & (value "Port" of key "HKEY_LOCAL_MACHINE\SOFTWARE\BigFix\Enterprise Server" of registry as string) & "," ) else it) of lines of file (parameter "NS_ConfigJson" of action as string) }
	
	// Write the new configuration settings to a new file (*.new), and assert the file was created
	if {exists file (parameter "NS_ConfigJson" of action & ".new")}
	    delete "{parameter "NS_ConfigJson"}.new"
	endif
	continue if {not exists file (parameter "NS_ConfigJson" of action & ".new")}
	move __appendfile "{parameter "NS_ConfigJson"}.new"
	continue if {exists file (parameter "NS_ConfigJson" of action & ".new")}
	
	// Back up the existing configuration file (*.bak)
	if {exists file (parameter "NS_ConfigJson" of action & ".bak")}
	    delete "{parameter "NS_ConfigJson"}.bak"
	endif
	continue if {not exists file (parameter "NS_ConfigJson" of action & ".bak")}
	copy "{parameter "NS_ConfigJson"}" "{parameter "NS_ConfigJson"}.bak"
	continue if {exists file (parameter "NS_ConfigJson" of action & ".bak")}
	
	// Overwrite the existing configuration file with the new settings
	waithidden cmd.exe /c copy "{parameter "NS_ConfigJson"}.new" "{parameter "NS_ConfigJson"}" /y
	        
	//Clean Up Temporary Files
	delete "{parameter "NS_ConfigJson"}.bak"
	delete "{parameter "NS_ConfigJson"}.new"
	
	waithidden cmd.exe /C echo ^> Service configured successfully. >> "{parameter "InstallLogFile"}"
endif


// =================
// *** CONFIGURE ***
// =================

waithidden cmd.exe /C echo ^> Security ... >> "{parameter "InstallLogFile"}"
parameter "cryptoFolderPath" = "{parameter "NS_RootFolder"}\crypto"

parameter "regRootPath"     = "HKEY_LOCAL_MACHINE\Software\BigFix\EnterpriseClient\EncryptionControl"
parameter "privateKey"      = "PrivateKeyPath"
parameter "privateKeyPath"  = "{parameter "regRootPath"}\{parameter "privateKey"}"
parameter "certificateKey"  = "CertificatePath"
parameter "certificatePath" = "{parameter "regRootPath"}\{parameter "certificateKey"}"

if { exists key (parameter "regRootPath" of action) of registry }
	parameter "originalPrivateKeyPath"  = "{(value (parameter "privateKey" of action) of key (parameter "regRootPath" of action) of registry as string)}"
	parameter "originalCertificatePath" = "{(value (parameter "certificateKey" of action) of key (parameter "regRootPath" of action) of registry as string)}"
endif

if { not exists file ((parameter "NS_BackupFolder" of action) & "\" & (parameter "privateKeyFile" of action)) AND not exists file ((parameter "NS_BackupFolder" of action) & "\" & (parameter "certificateFile" of action)) }

	waithidden cmd.exe /C echo   ^> Need to generate new security artifacts ... >> "{parameter "InstallLogFile"}"

	// Create folder if needed
	if {not exists folder (parameter "cryptoFolderPath")}
		waithidden cmd.exe /C mkdir "{parameter "cryptoFolderPath"}"
	endif

	// Check for an existing version of the DLL
	if {exists key "HKEY_CLASSES_ROOT\AppEngUtility.Crypto\CLSID" of registry }
		// One is already registered - note the location of the original DLL and ensure it actually exists
		parameter "dLLPathValue" = "{default value of key ("HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\" & (default value of key "HKEY_CLASSES_ROOT\AppEngUtility.Crypto\CLSID" of registry as string) & "\InprocServer32") of registry as string}"

		if{ exists file (parameter "dLLPathValue") }
			parameter "originalDLLPath" = "{ parameter "dLLPathValue" }"
			waithidden cmd.exe /C echo   ^> Found existing DLL: "{parameter "originalDLLPath"}" >> "{parameter "InstallLogFile"}"
		else 
			waithidden cmd.exe /C echo   ^> Non-existent DLL file specified: "{parameter "dLLPathValue"}" >> "{parameter "InstallLogFile"}"
		endif
	endif

	if { exists parameter "originalDLLPath" AND exists file "initCrypto.vbs" of folder (parent folder of file (parameter "originalDLLPath" of action) as string) }
		// Use an existing initCrypto.vbs if it already exists
		parameter "initCryptoPath" = "{ parent folder of file (parameter "originalDLLPath" of action) as string }"
		waithidden cmd.exe /C echo   ^> Found existing init crypto script to use >> "{parameter "InstallLogFile"}"
	else 
	    waithidden cmd.exe /C echo   ^> No existing init crypto script found, need to generate one ... >> "{parameter "InstallLogFile"}"
		// Otherwise create a new initCrypto.vs and use that
		parameter "initCryptoPath" = "{ parameter "cryptoFolderPath" }"
		parameter "newDLLRegistered" = "true"
		
		prefetch AppEngUtility.dll sha1:700a3e14aba91d4ef7cf748e816838e5e18ef9ba size:751616 http://software.bigfix.com/download/bes/util/NotificationService/AppEngUtility-9.2.8.74.dll sha256:abd5f3d026e026f74ef0ccb3febd693483b119ae3843d6695bdfbe3da0a98839
		prefetch libBEScrypto.dll sha1:8db914d52bc05a33d43d248aaaaf933406226de2 size:1413304 http://software.bigfix.com/download/bes/util/NotificationService/libBEScrypto-9.2.8.74.dll sha256:6ecfc3dd3e30dc8b44112fc91672b60791e2eff66415e8ff92287b5e980c8ea2

		delete "{parameter "cryptoFolderPath"}\AppEngUtility.dll"
		move __Download\AppEngUtility.dll "{parameter "cryptoFolderPath"}\AppEngUtility.dll"
		delete "{parameter "cryptoFolderPath"}\libBEScrypto.dll"
		move __Download\libBEScrypto.dll "{parameter "cryptoFolderPath"}\libBEScrypto.dll"

		// create initCrypto.vbs and run it to create public/private keys
// ====================================
createfile until __the_end
option explicit
dim crypto, shell
set crypto=createobject("AppEngUtility.Crypto")
'Only need to call it once during setup
crypto.InitializeKeyPairAndCert
__the_end
// ====================================

		delete "{parameter "cryptoFolderPath"}\initCrypto.vbs"
		move __createfile "{parameter "cryptoFolderPath"}\initCrypto.vbs"

		// Wait until last possible moment before registering AppEngUtility-xxx.dll and libBEScrypto-xxx.dll
		if { exists parameter "originalDLLPath" }
		    waithidden cmd.exe /C echo   ^> Unregistering existing DLL ... >> "{parameter "InstallLogFile"}"
			waithidden cmd.exe /C regsvr32.exe /s /u "{parameter "originalDLLPath"}"
		endif
		waithidden cmd.exe /C echo   ^> Registering latest DLL ... >> "{parameter "InstallLogFile"}"
		waithidden cmd.exe /C regsvr32.exe /s "{parameter "cryptoFolderPath"}\AppEngUtility.dll"
	endif
	
	// Use the initCrypto.vbs from the correct location	
	createfile until __END__
	cd /D "{ parameter "initCryptoPath" }"
	cscript /B initCrypto.vbs
	__END__
	delete runInitCrypto.bat
	move __createfile runInitCrypto.bat	 

	waithidden cmd.exe /C echo   ^> Updating registry ... >> "{parameter "InstallLogFile"}"
	regset "[{parameter "regRootPath"}]" "{parameter "privateKey"}"="{escape of (parameter "cryptoFolderPath")}\\{parameter "privateKeyFile"}"
	regset "[{parameter "regRootPath"}]" "{parameter "certificateKey"}"="{escape of (parameter "cryptoFolderPath")}\\{parameter "certificateFile"}"

	waithidden cmd.exe /C echo   ^> Generating artifacts ... >> "{parameter "InstallLogFile"}"
	waithidden runInitCrypto.bat

	// Restore original settings
	if { exists parameter "originalPrivateKeyPath" AND exists parameter "originalCertificatePath" }
	 	waithidden cmd.exe /C echo   ^> Restoring registry ... >> "{parameter "InstallLogFile"}"
		regset "[{parameter "regRootPath"}]" "{parameter "privateKey"}"="{escape of (parameter "originalPrivateKeyPath")}"
		regset "[{parameter "regRootPath"}]" "{parameter "certificateKey"}"="{escape of (parameter "originalCertificatePath")}"
	endif

	if { exists parameter "newDLLRegistered" } 
		// Unregister
		waithidden cmd.exe /C echo   ^> Un-registering latest DLL ... >> "{parameter "InstallLogFile"}"
		waithidden cmd.exe /C regsvr32.exe /s /u "{parameter "cryptoFolderPath"}\AppEngUtility.dll"

		if { exists parameter "originalDLLPath" } 
			waithidden cmd.exe /C echo   ^> Re-registering original DLL ... >> "{parameter "InstallLogFile"}"
			waithidden cmd.exe /C regsvr32.exe /s "{parameter "originalDLLPath"}" 
		endif
	endif
	
	waithidden cmd.exe /C echo   ^> Deploying generated artifacts ... >> "{parameter "InstallLogFile"}"
	waithidden cmd.exe /C copy /Y  "{(parameter "cryptoFolderPath") & "\" & (parameter "privateKeyFile")}" "{parameter "NS_RootFolder" & "\apps\ns-notifier\resources\certs\"}"
    waithidden cmd.exe /C copy /Y  "{(parameter "cryptoFolderPath") & "\" & (parameter "certificateFile")}" "{parameter "NS_RootFolder" & "\apps\ns-notifier\resources\certs\"}"
    
   	waithidden cmd.exe /C echo   ^> Cleaning up temporary security directory ... >> "{parameter "InstallLogFile"}"
	waithidden cmd.exe /C rmdir /S /Q  "{parameter "cryptoFolderPath"}"

else 
	waithidden cmd.exe /C echo   ^> (Will re-use existing security artifacts ...) >> "{parameter "InstallLogFile"}"
endif


// ================
// *** RESTORE ****
// ================

delete __createfile
delete restore.bat

// ====================================
createfile until END_RESTORE_BAT
@echo off
pushd "{ parameter "AppsFolder"   }"

if exist "{parameter "NS_BackupFolder"}" (
	echo Restoring original NS JSON and cache files ... >> "{parameter "InstallLogFile"}"
    copy /Y  "{parameter "NS_BackupFolder" & "\*.json"}" "{parameter "NS_RootFolder" & "\resources\config\."}"
    copy /Y  "{parameter "NS_BackupFolder" & "\*.cache"}" "{parameter "NS_RootFolder" & "\apps\ns-monitor\resources\."}"
    
    if exist "{(parameter "NS_BackupFolder") & "\" & (parameter "privateKeyFile")}" if exist "{(parameter "NS_BackupFolder") & "\" & (parameter "certificateFile")}" (
		echo Restoring original key/cert files ... >> "{parameter "InstallLogFile"}"
    	copy /Y  "{(parameter "NS_BackupFolder") & "\" & (parameter "privateKeyFile")}" "{parameter "NS_RootFolder" & "\apps\ns-notifier\resources\certs\"}"
    	copy /Y  "{(parameter "NS_BackupFolder") & "\" & (parameter "certificateFile")}" "{parameter "NS_RootFolder" & "\apps\ns-notifier\resources\certs\"}"
	)
	
	echo Removing backup directory ... >> "{parameter "InstallLogFile"}"
	rmdir  /S /Q "{parameter "NS_BackupFolder"}"
)

popd
END_RESTORE_BAT
// ====================================

move __createfile restore.bat
waithidden restore.bat
delete restore.bat


// Re-register the NS apps with the server plugin (first the notifier, then the monitor)
if { exists file (parameter "MFS_XML_Notifier_UnRegistered") }
	waithidden cmd.exe /C echo Registering the Notification Service app [ns-notifier] with the BES Server Plugin ... >> "{parameter "InstallLogFile"}"
	waithidden cmd.exe /C move "{parameter "MFS_XML_Notifier_UnRegistered"}" "{parameter "MFS_XML_Notifier_Registered"}"
endif
// Assert that the server plugin is no longer monitoring the notification service before continuing
continue if { not exists file (parameter "MFS_XML_Notifier_UnRegistered") AND exists file (parameter "MFS_XML_Notifier_Registered") }
waithidden cmd.exe /C echo   ^> Registered [ns-notifier] successfully. >> "{parameter "InstallLogFile"}"

if { exists file (parameter "MFS_XML_Monitor_UnRegistered") }
    waithidden cmd.exe /C echo Registering the Notification Service app [ns-monitor] with the BES Server Plugin ... >> "{parameter "InstallLogFile"}"
    waithidden cmd.exe /C move "{parameter "MFS_XML_Monitor_UnRegistered"}" "{parameter "MFS_XML_Monitor_Registered"}"
endif
// Assert that the server plugin is no longer monitoring the notification service before continuing
continue if { not exists file (parameter "MFS_XML_Monitor_UnRegistered") AND exists file (parameter "MFS_XML_Monitor_Registered") }
waithidden cmd.exe /C echo   ^> Registered [ns-monitor] successfully. >> "{parameter "InstallLogFile"}"

// Assert install/upgrade was successful.
continue if { exists folder ( parameter "NS_RootFolder" ) }
waithidden cmd.exe /C echo Notification Service Install Complete. >> "{parameter "InstallLogFile"}"

// Move the install log into the NS directory itself
waithidden cmd.exe /C move "{parameter "InstallLogFile"}" "{parameter "NS_RootFolder"}\"

// NS Installation or upgrade complete.

//Update client results 
notify client ForceRefresh]]></ActionScript>
		</DefaultAction>
	</Task>
</BES>
