<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Install IBM Bigfix Clients with Client Deploy Tool</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD>Deploy BES Clients by using the Client Deploy Tool.        <DIV id=fixletMessage2 class=FixletMessage>            <style>                .osflag                {                    padding-right: 1em;                }                .fieldsetdiv                {                    padding: 1em;                }                .fieldsetwarning                {                    border: 1px solid black;                }            </style>            <TABLE><TBODY><TR><TD> <P><FONT size=2><B>Deploy the BigFix Clients using the Client Deploy Tool installed on the selected Applicable Computer. <BR><BR></B>    Depending on whether you are using the Client Deploy Tool on a Windows or on a Linux system, you can:    <BR><B>CDT on Windows</B>: Installs Windows, UNIX and Mac target computers.    <BR><B>CDT on Linux</B>:  Installs UNIX and Mac target computers.<BR><BR>To install target computers on Windows, the CDT  issues a Remote Procedural Call that accesses the shared installer and, with the appropriate administration credentials, runs it silently with no user interaction.<BR><BR>To install target computers on UNIX, the CDT issues an SSH connection, uses SCP to copy the installer and run the installation remotely using sudo if the user provided is not root.<BR><BR>To successfully deploy target computers from the CDT selected , ensure that you satisfy the following <A href="https://www.ibm.com/support/knowledgecenter/SSQL82_9.5.0/com.ibm.bigfix.doc/Platform/Installation/c_cdt_prereqs.html">IBM BigFix Client Deploy Tool: Target prerequisites</A>.<BR><BR> For more information on BigFix Client Deploy Tool, please visit the following support web pages:<UL> <LI><A href="https://www.ibm.com/support/knowledgecenter/SSQL82_9.5.0/com.ibm.bigfix.doc/Platform/Installation/c_using_the_client_deploy_tool_new.html">IBM BigFix Client Deploy Tool.</A></LI></UL></TD></TR></TBODY></TABLE></FONT></P></TD></TR></TBODY></TABLE>            <fieldset class="fieldsetwarning">                <legend><b>Warnings</b></legend>                <div class="fieldsetdiv">                <UL>                     <LI> If you run this action on more than one Applicable Computer, they will all attempt to install the Client on the same list of targets.<br></LI>                    <LI> The task completes even if some targets were not successfully deployed. To check the deployment status of each target, see <A href="https://www.ibm.com/support/knowledgecenter/SSQL82_9.5.0/com.ibm.bigfix.doc/Platform/Installation/c_installing_the_cdt_logs_client.html">IBM BigFix Client Deploy Tool: Log files</A>.</LI>                </UL>                </div>            </fieldset>            <br>            <fieldset>                <legend>Operating systems</legend>                <div class="fieldsetdiv">                    Select the operating systems to be deployed:                    <br>                    <br>                    <div id="osflags"></div>                </div>            </fieldset>            <br>            <fieldset>                <legend>Select the client version to be installed</legend>                <div class="fieldsetdiv">                                         <br>                    <div>                        <table id="clientversion">                        </table>                    </div>                </div>            </fieldset>            <br>            <fieldset>                <legend>Client Deploy Tool computer credentials</legend>                <div class="fieldsetdiv">                    Specify the credentials of a user that has access to the computer where the Client Deploy Tool is installed. It is required only if the Client Deploy Tool runs on a Windows system and to deploy Windows targets.                    <br>                    <br>                    <div>                        <table id="cdtcredentials">                        </table>                    </div>                    <br>                    <button id="clearcredentialsfields" type="button">Clear credentials</button>                </div>            </fieldset>            <br>            <fieldset>                <legend>Targets</legend>                <div class="fieldsetdiv">                    Specify the following information for the target computers that you want to deploy:                    <ul style="margin-top:3px">                    <li>List of IP addresses/hostnames/IP address ranges (e.g. "192.0.2.1-20"), separated by newline.</li>                    <li>The user credentials needed for the connection.</li>                    </ul>                    <br>                    <div id="deploylist">                    </div>                    <br>                    <button id="adddeployment" type="button">Add group of targets</button>                </div>            </fieldset>            <br>            <br>            <label><input id="showadvancedsettings" type="checkbox"></input>Show advanced settings</label>            <br>            <br>            <div id="advancedsettings" style="display:none">                <fieldset>                    <legend>Custom Settings</legend>                    <div class="fieldsetdiv">                        Specify one or more custom settings that will be set on each client deployed.                        <br>                        <br>                        <div>                            <table id="settingslist">                            </table>                        </div>                        <br>                        <button id="addsetting" type="button">Add Custom Setting</button>                        <button id="clearsettingsfields" type="button">Clear Custom Settings</button>                    </div>                </fieldset>                <br>                <fieldset>                    <legend>Proxy Settings</legend>                    <div class="fieldsetdiv">                        Configure the proxy connection, in case clients to be deployed need to communicate through a proxy.                        <br>                        <br>                        <div>                            <table id="proxysettings">                            </table>                        </div>                        <br>                        <button id="clearproxysettings" type="button">Clear Proxy Settings</button>                    </div>                </fieldset>                <br>            </div>                        <xml id="xmlCatalog"></xml>                        <script>                var actionScriptTemplate = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\                <BES xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"BES.xsd\">\n\                    <SingleAction>\n\                        <Title>Install IBM Bigfix Clients with Client Deploy Tool</Title>\n\                        <Relevance>__RELEVANCE__</Relevance>\n\                        <ActionScript MIMEType=\"application/x-Fixlet-Windows-Shell\">__ACTIONSCRIPT__</ActionScript>\n\                        <SuccessCriteria Option=\"RunToCompletion\"></SuccessCriteria>\n\                        __UNSECURE__PARAMETER__\n\                        __SECURE__PARAMETER__\n\                        <Settings>\n\                            <PreActionShowUI>false</PreActionShowUI>\n\                            <HasRunningMessage>false</HasRunningMessage>\n\                            <HasTimeRange>false</HasTimeRange>\n\                            <HasStartTime>false</HasStartTime>\n\                            <HasEndTime>true</HasEndTime>\n\                            <EndDateTimeLocalOffset>P2D</EndDateTimeLocalOffset>\n\                            <HasDayOfWeekConstraint>false</HasDayOfWeekConstraint>\n\                            <UseUTCTime>false</UseUTCTime>\n\                            <ActiveUserRequirement>NoRequirement</ActiveUserRequirement>\n\                            <ActiveUserType>AllUsers</ActiveUserType>\n\                            <HasWhose>false</HasWhose>\n\                            <PreActionCacheDownload>false</PreActionCacheDownload>\n\                            <Reapply>false</Reapply>\n\                            <HasReapplyLimit>true</HasReapplyLimit>\n\                            <ReapplyLimit>3</ReapplyLimit>\n\                            <HasReapplyInterval>false</HasReapplyInterval>\n\                            <HasRetry>false</HasRetry>\n\                            <HasTemporalDistribution>false</HasTemporalDistribution>\n\                            <ContinueOnErrors>true</ContinueOnErrors>\n\                            <PostActionBehavior Behavior=\"Nothing\"></PostActionBehavior>\n\                            <IsOffer>false</IsOffer>\n\                        </Settings>\n\                        <SettingsLocks>\n\                            <ActionUITitle>false</ActionUITitle>\n\                            <PreActionShowUI>false</PreActionShowUI>\n\                            <PreAction>\n\                                <Text>false</Text>\n\                                <AskToSaveWork>false</AskToSaveWork>\n\                                <ShowActionButton>false</ShowActionButton>\n\                                <ShowCancelButton>false</ShowCancelButton>\n\                                <DeadlineBehavior>false</DeadlineBehavior>\n\                                <ShowConfirmation>false</ShowConfirmation>\n\                            </PreAction>\n\                            <HasRunningMessage>false</HasRunningMessage>\n\                            <RunningMessage>\n\                                <Text>false</Text>\n\                            </RunningMessage>\n\                            <TimeRange>false</TimeRange>\n\                            <StartDateTimeOffset>false</StartDateTimeOffset>\n\                            <EndDateTimeOffset>false</EndDateTimeOffset>\n\                            <DayOfWeekConstraint>false</DayOfWeekConstraint>\n\                            <ActiveUserRequirement>false</ActiveUserRequirement>\n\                            <ActiveUserType>false</ActiveUserType>\n\                            <Whose>false</Whose>\n\                            <PreActionCacheDownload>false</PreActionCacheDownload>\n\                            <Reapply>false</Reapply>\n\                            <ReapplyLimit>false</ReapplyLimit>\n\                            <RetryCount>false</RetryCount>\n\                            <RetryWait>false</RetryWait>\n\                            <TemporalDistribution>false</TemporalDistribution>\n\                            <ContinueOnErrors>false</ContinueOnErrors>\n\                            <PostActionBehavior>\n\                                <Behavior>false</Behavior>\n\                                <AllowCancel>false</AllowCancel>\n\                                <Deadline>false</Deadline>\n\                                <Title>false</Title>\n\                                <Text>false</Text>\n\                            </PostActionBehavior>\n\                            <IsOffer>false</IsOffer>\n\                            <AnnounceOffer>false</AnnounceOffer>\n\                            <OfferCategory>false</OfferCategory>\n\                            <OfferDescriptionHTML>false</OfferDescriptionHTML>\n\                        </SettingsLocks>\n\                        <IsUrgent>false</IsUrgent>\n\                        <Target><AllComputers>false</AllComputers></Target>\n\                        <SourceFixlet>\n\                            <SiteID>__SITEID__</SiteID>\n\                            <FixletID>__FIXLETID__</FixletID>\n\                            <Action>Action1</Action>\n\                        </SourceFixlet>\n\                    </SingleAction>\n\                </BES>\n\                ";                                            var xmlCatalogObject;                if( Relevance( "external site flag of site of current fixlet" ) == false )                {                    var base = document.getElementsByTagName( "base" )[0];                    base.href = "C:/";                }                                function loadCatalogsList()                {                                       loadCatalog( "BESClientVersions.js" , initUI );                }                                               function base64encode( str )                {                    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";                    str = unescape( encodeURIComponent( str ) );                    var pad = '';                    var oct1, oct2, oct3, hex1, hex2, hex3, hex4, bits;                    var enc = [];                    var c = str.length % 3;                    if ( c > 0 ) {                        while ( c < 3 ) {                            pad += '=';                            str += '\0';                            c++;                        }                    }                    for ( c = 0; c < str.length; c += 3 ) {                        oct1 = str.charCodeAt( c );                        oct2 = str.charCodeAt( c+1 );                        oct3 = str.charCodeAt( c+2 );                        bits = oct1 << 16 | oct2 << 8 | oct3;                        hex1 = bits >> 18 & 0x3f;                        hex2 = bits >> 12 & 0x3f;                        hex3 = bits >> 6 & 0x3f;                        hex4 = bits & 0x3f;                        enc[c/3] = code.charAt( hex1 ) + code.charAt( hex2 ) + code.charAt( hex3 ) + code.charAt( hex4 );                    }                    var output = enc.join( '' );                    return output.slice( 0, output.length - pad.length ) + pad;                }                                if ( !String.prototype.trim )                {                    ( function()                    {                        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;                        String.prototype.trim = function()                        {                            return this.replace( rtrim, '' );                        };                    } )();                }                var supportedPlatforms =                 [                     {                         Name: "Windows OS" ,                        Flag: "Windows_OSFlag" ,                        Platforms: [ "MicrosoftWindows" ] ,                        Architectures: []                    },                    {                        Name: "Linux Intel" ,                        Flag: "LinuxIntel_OSFlag" ,                        Platforms: [ "Debian" , "Redhat" , "Suse" , "Ubuntu" , "OracleLinux" , "CentOS" ] ,                        Architectures: [ "i386" , "i486"  , "i586" , "i686" , "x86_64" ]                    },                    {                        Name: "Linux PPC" ,                                            Flag: "LinuxPPC_OSFlag" ,                        Platforms: [ "Redhat" , "Suse" ] ,                        Architectures: [ "ppc64" , "ppc64le" ]                    },                    {                        Name: "Linux s390x" ,                        Flag: "Linuxs390x_OSFlag" ,                        Platforms: [ "Redhat" , "Suse" ] ,                         Architectures: [ "s390x" ]                    },                    {                        Name: "AIX" ,                        Flag: "AIX_OSFlag" ,                        Platforms: [ "IBMAIX" ] ,                        Architectures: ["64"]                    },                    {                        Name: "SunOS Intel" ,                        Flag: "SunOSIntel_OSFlag" ,                        Platforms: [ "SunOS" ] ,                        Architectures: [ "i86pc" ]                    },                    {                        Name: "SunOS SPARC" ,                        Flag: "SunOSSPARC_OSFlag" ,                        Platforms: [ "SunOS" ] ,                        Architectures: [ "sun4v" , "sun4u" , "sun4m" ]                    },                    {                        Name: "Mac OS X" ,                        Flag: "MacOSX_OSFlag" ,                        Platforms: [ "MacOS" ] ,                        Architectures: [ "i386"  , "x86_64" ]                    }                                  ];                                function throwException( message )                {                    var exception = {};                    exception.message = message;                    throw exception;                }                                function indexOfArrayElement( array , element )                {                    if( typeof( array ) != "undefined" && typeof( element ) != "undefined" )                    {                        for( var index = 0 ; index < array.length ; index++ )                        {                            if( array[index] === element )                            {                                return index;                            }                        }                    }                                        return -1;                }                                function createCheckboxes()                {                    var container = document.getElementById( "osflags" );                                        var table = document.createElement( "table" );                    var tbody = document.createElement( "tbody" );                                        var tr;                    for( var index = 0 ; index < supportedPlatforms.length ; index++ )                    {                        var td = document.createElement( "td" );                        td.className = "osflag";                        var label = document.createElement( "label" );                                                var input = document.createElement( "input" );                        input.setAttribute( "type" , "checkbox" );                        input.setAttribute( "name" , supportedPlatforms[index].Name );                        input.setAttribute( "id" , supportedPlatforms[index].Flag );                                                td.appendChild( label );                        td.appendChild( input );                                                if( index % 2 == 0 )                        {                            tr = document.createElement( "tr" );                            tbody.appendChild( tr );                            }                                                tr.appendChild( td );                                                label.appendChild( input );                        label.innerHTML += supportedPlatforms[index].Name;                    }                                        table.appendChild( tbody );                    container.appendChild( table );                }                                function showAdvancedSettings( object )                {                    var checkbox = document.getElementById( "showadvancedsettings" );                    var display = "none";                                        if( checkbox.checked )                    {                            display = "block";                    }                                        document.getElementById( object ).style.display = display;                }                                function onClientVersionSelected()                {                    var index = document.getElementById( "clientversionselector" ).selectedIndex;                                        if( index > 0 )                    {                        var catalogFile = catalogVersionsMap[ index - 1 ].CatalogFile;                        loadCatalog( catalogFile , onCatalogLoaded );                                        }                }                                              function createClientVersionTable()                {                    var table = document.getElementById( "clientversion" );                    var tableHeaderRow = table.createTHead().insertRow( 0 );                    var row = table.insertRow( table.rows.length );                                        var versionTitle = tableHeaderRow.insertCell( 0 );                    var versionSelectorCell = row.insertCell( 0 );                    var versionSelector = document.createElement( "select" );                    var defaultSelectorEntry = document.createElement( "option" );                                        defaultSelectorEntry.value = "";                    defaultSelectorEntry.text = "";                    versionSelector.add( defaultSelectorEntry );                                        versionTitle.innerHTML = "<th><b>Client Version</b></th>";                    versionSelectorCell.appendChild( versionSelector );                    versionSelector.onchange = onClientVersionSelected;                    versionSelector.id = "clientversionselector";                                                            for( var index = 0 ; index < catalogVersionsMap.length ; index ++ )                    {                        var versionSelectorEntry = document.createElement( "option" );                        versionSelectorEntry.value = catalogVersionsMap[index].Version;                        versionSelectorEntry.text = versionSelectorEntry.value;                        versionSelector.add( versionSelectorEntry );                    }                }                                function createSettingsTable( settings )                 {                    var table = document.getElementById( settings );                    var tableHeaderRow = table.createTHead().insertRow( 0 );                    var row = table.insertRow( table.rows.length );                                        var i = 0;                    if( settings == "proxysettings" )                    {                        var addressTitle = tableHeaderRow.insertCell( i );                        var addressInput = row.insertCell( i++ );                        var portTitle = tableHeaderRow.insertCell( i );                        var portInput = row.insertCell( i++ );                        addressTitle.innerHTML = "<th><b>Address</b></th>";                        addressInput.innerHTML = "<input type=\"text\" name=\"address\">";                        portTitle.innerHTML = "<th><b>Port</b></th>";                        portInput.innerHTML = "<input type=\"text\" name=\"port\">";                    }                                        var usernameTitle = tableHeaderRow.insertCell( i );                    var usernameInput = row.insertCell( i++ );                    var passwordTitle = tableHeaderRow.insertCell( i );                    var passwordInput = row.insertCell( i++ );                    usernameTitle.innerHTML = "<th><b>Username</b></th>";                    usernameInput.innerHTML = "<input type=\"text\" name=\"username\">";                    passwordTitle.innerHTML = "<th><b>Password</b></th>";                    passwordInput.innerHTML = "<input type=\"password\" name=\"password\">";                }                                function addDeploymentEntry()                {                    var deployList = document.getElementById( "deploylist" );                    var newTableDiv = document.createElement( "div" );                    var newTable = document.createElement( "table" );                    var credentialsRow = newTable.insertRow( newTable.rows.length );                    var tableHeaderRow = newTable.createTHead().insertRow( 0 );                    var computersTitle = tableHeaderRow.insertCell( 0 );                    var usernameTitle = tableHeaderRow.insertCell( 1 );                    var passwordTitle = tableHeaderRow.insertCell( 2 );                    var computersList = credentialsRow.insertCell( 0 );                    var usernameInput = credentialsRow.insertCell( 1 );                    var passwordInput = credentialsRow.insertCell( 2 );                    var clearButton = credentialsRow.insertCell( 3 );                    var removeButton = credentialsRow.insertCell( 4 );                                        newTable.style.padding = "50px 50px 50px 50px";                    newTableDiv.setAttribute( "id" , "deploylist" + deployList.getElementsByTagName( "table" ).length );                                        computersTitle.innerHTML = "<th><b>Computers</b></th>";                    computersTitle.style.padding = "0px 0px 0px 5px";                    usernameTitle.innerHTML = "<th><b>Username</b></th>";                    usernameTitle.style.padding = "0px 0px 0px 5px";                    passwordTitle.innerHTML = "<th><b>Password</b></th>";                    passwordTitle.style.padding = "0px 0px 0px 5px";                    computersList.innerHTML = "<textarea rows=\"5\" style=\"overflow: auto;\" wrap=\"off\" type=\"text\" name=\"computers\"></textarea>";                    computersList.style.padding = "0px 0px 0px 5px";                    usernameInput.innerHTML = "<input type=\"text\" name=\"username\">";                    usernameInput.style.padding = "0px 0px 0px 5px";                    passwordInput.innerHTML = "<input type=\"password\" name=\"password\">";                    passwordInput.style.padding = "0px 0px 0px 5px";                                                clearButton.innerHTML = "<button style=\"display:block ; width:80px\" id=\"cleardeployfields\" type=\"button\">Clear</button>";                    clearButton.style.padding = "0px 0px 0px 5px";                    removeButton.innerHTML = "<button style=\"display:block ; width:80px\" id=\"deployRemoveButton\" type=\"button\">Remove</button>";                    removeButton.style.padding = "0px 0px 0px 5px";                    removeButton.style.width = "200px";                    removeButton.childNodes[0].onclick = removeDeploymentEntry;                    clearButton.childNodes[0].onclick = clearDeploymentEntry;                    if( deployList.childNodes.length == 0 )                    {                        removeButton.childNodes[0].disabled = true;                    }                    else                    {                        deployList.childNodes[0].childNodes[0].rows[ deployList.childNodes[0].childNodes[0].rows.length - 1 ].cells[4].childNodes[0].disabled = false;                    }                                        newTableDiv.appendChild( newTable );                    newTableDiv.appendChild( document.createElement( "br" ) );                    deployList.appendChild( newTableDiv );                }                                                function addSettingsEntry()                {                    var settingsList = document.getElementById( "settingslist" );                    var newRow = settingsList.insertRow( settingsList.rows.length );                                        var nameInput = newRow.insertCell( 0 );                    var valueInput = newRow.insertCell( 1 );                    var removeButton = newRow.insertCell( 2 );                                        nameInput.innerHTML = "<input type=\"text\" name=\"name\">";                    valueInput.innerHTML = "<input type=\"text\" name=\"value\">";                    removeButton.innerHTML = "<button type=\"button\">Remove</button>";                    removeButton.onclick = removeSettingsEntry;                                        if( settingsList.rows.length < 2 )                    {                        var tableHeaderRow = settingsList.createTHead().insertRow( 0 );                        var nameTitle = tableHeaderRow.insertCell( 0 );                        var valueTitle = tableHeaderRow.insertCell( 1 );                                                nameTitle.innerHTML = "<th><b>Name</b></th>";                        valueTitle.innerHTML = "<th><b>Value</b></th>";                                                removeButton.disabled = true;                    }                    else                    {                        settingsList.rows[1].cells[2].disabled = false;                    }                }                                function removeDeploymentEntry()                {                    var deployList = document.getElementById( "deploylist" );                    var triggerObject = window.event.srcElement;                    var table = triggerObject.parentNode.parentNode.parentNode.parentNode;                    var tableToDelete = table.parentNode;                    tableToDelete.outerHTML = "";                                        if( deployList.childNodes.length == 1 )                    {                        deployList.childNodes[0].childNodes[0].rows[ deployList.childNodes[0].childNodes[0].rows.length - 1 ].cells[4].childNodes[0].disabled = true;                    }                }                                function removeSettingsEntry()                {                    var triggerObject = window.event.srcElement;                    var settingsList = document.getElementById( "settingslist" );                    var rowToDelete = triggerObject.parentNode.parentNode.rowIndex;                                        settingsList.deleteRow( rowToDelete );                                        if( settingsList.rows.length == 2 )                    {                        settingsList.rows[1].cells[2].disabled = true;                    }                }                function clearFields( tableID, noOfFields )                {                    var list = document.getElementById( tableID );                                        for( var i = 1; i < list.rows.length; i++ )                    {                        for( var j = 0; j < noOfFields; j++ )                        {                            list.rows[i].cells[j].children[0].value = "";                        }                    }                }                function clearDeploymentEntry()                {                    var triggerObject = window.event.srcElement;                    var table = triggerObject.parentNode.parentNode.parentNode.parentNode;                                        var inputFields = table.getElementsByTagName( "input" );                                        for( var innerIndex = 0 ; innerIndex < inputFields.length ; innerIndex++ )                    {                        inputFields[innerIndex].value = "";                    }                                        table.getElementsByTagName( "textarea" )[0].value = "";                }                                 function onCatalogLoaded()                 {                    xmlCatalogObject = document.getElementById( "xmlCatalog" );                    xmlCatalogObject.innerHTML = "";                    xmlCatalogObject.XMLDocument.loadXML( xmlCatalogString );                }                                function loadCatalog( catalogName , onLoadCallback )                {                       var thisHead = document.getElementsByTagName("head")[0];                    var contentObject = document.createElement( "script" );                                                            contentObject.type="text/javascript";                    contentObject.onreadystatechange = onLoadCallback;                    contentObject.src = catalogName;                                                            thisHead.appendChild( contentObject );                }                                function getCatalogObject()                {                                              if( typeof( xmlCatalogObject ) != "undefined" )                    {                        return xmlCatalogObject.XMLDocument;                    }                                        return undefined;                }                            function getSelectedCheckboxes()                {                    var selectedBoxes = [];                                        for( var index = 0 ; index < supportedPlatforms.length ; index++ )                    {                        var checkBoxObject = document.getElementById( supportedPlatforms[index].Flag );                                                if( checkBoxObject.checked )                        {                            selectedBoxes.push( supportedPlatforms[index] );                        }                    }                                        return selectedBoxes;                }                                function isImageSelected( selectedBoxes , osPlatforms , osArchitectures )                {                    for( var index = 0 ; index < selectedBoxes.length ; index++ )                    {                        var imageIsSelected = false;                                                for( var innerIndex = 0 ; innerIndex < osPlatforms.length ; innerIndex++ )                        {                            if( indexOfArrayElement( selectedBoxes[index].Platforms , osPlatforms[innerIndex].getAttribute( "name" ) ) != -1 )                            {                                imageIsSelected = true;                                break;                            }                        }                                                if( imageIsSelected )                        {                            imageIsSelected = false;                                                        if( osArchitectures.length > 0 )                            {                                for( var innerIndex = 0 ; innerIndex < osArchitectures.length ; innerIndex++ )                                {                                    if( indexOfArrayElement( selectedBoxes[index].Architectures , osArchitectures[innerIndex].text ) != -1 )                                    {                                        imageIsSelected = true;                                        break;                                    }                                }                                if( imageIsSelected )                                {                                    selectedBoxes[index].FoundInCatalog = true;                                    return true;                                }                            }                            else                            {                                selectedBoxes[index].FoundInCatalog = true;                                return true;                            }                        }                    }                                      return false;                }                                function makeImageObject( rawXMLImage )                {                    var imageObject = { name: "" , sha: "" , size: "" , url: "", sha256: "" };                                        imageObject.name = rawXMLImage.getElementsByTagName( "ImageName" )[0].text;                    imageObject.sha = rawXMLImage.getElementsByTagName( "ImageSha" )[0].text;                    imageObject.size = rawXMLImage.getElementsByTagName( "ImageSize" )[0].text;                    imageObject.url = rawXMLImage.getElementsByTagName( "ImageURL" )[0].text;                    imageObject.sha256 = rawXMLImage.getElementsByTagName( "ImageSha256" )[0].text;                                        return imageObject;                }                                function getSelectedClientImages()                {                    var selectedBoxes = getSelectedCheckboxes();                    var xmlCatalogObject = getCatalogObject();                    var clientImages = xmlCatalogObject.getElementsByTagName( "IEMOSAgentImage" );                    var selectedClientImages = [];                                        for( var index = 0 ; index < selectedBoxes.length ; index++ )                    {                        selectedBoxes[index].FoundInCatalog = false;                    }                                        for( var index = 0 ; index < clientImages.length ; index++ )                    {                        var osPlatforms = clientImages[index].getElementsByTagName( "CompatibleOS" );                        var osArchitectures = clientImages[index].getElementsByTagName( "OSArch" );                                                if( isImageSelected( selectedBoxes , osPlatforms , osArchitectures ) )                        {                            selectedClientImages.push( makeImageObject( clientImages[index] ) );                        }                    }                                        return selectedClientImages;                }                                function makeCDTCredentialsObject( username, password )                {                    var cdtCredentialsObject =                     {                         username: { value: username , prefix: "cdtUsername" } ,                        password: { value: password , prefix: "cdtPassword" }                    };                    return cdtCredentialsObject;                }                                function makeDeployObject( computers , username , password )                {                    var deployObject =                     {                         computers: { value: computers , prefix: "deployComputers" } ,                         username: { value: username , prefix: "deployUsername" } ,                         password: { value: password , prefix: "deployPassword" }                     };                    return deployObject;                }                                function makeSettingsObject( name, value )                {                    var settingsObject =                    {                        name: {value: name , prefix: "name" } ,                        value: {value: value , prefix: "value" }                    };                                        return settingsObject;                }                function escapeBackslash( s )                {                    return s.replace(/\\/g, "\\\\");                }                function getCDTCredentials()                {                    var cdtParameters = [];                    var cdtList = document.getElementById( "cdtcredentials" );                                        var username = cdtList.rows[1].cells[0].children[0].value.trim();                    var password = cdtList.rows[1].cells[1].children[0].value;                    if( username.length > 0 && password.length > 0 )                    {                        cdtParameters.push( makeCDTCredentialsObject( username, password ) );                    }                    else                    {                        cdtParameters = null;                    }                                        return cdtParameters;                }                                function getSelectedClientVersion()                {                    return document.getElementById( "clientversionselector" ).value;                }                                              function getCustomSettings()                {                    var customSettings = [];                    var settingsList = document.getElementById( "settingslist" );                                        for( var index = 1; index < settingsList.rows.length; index++ )                    {                        var name = settingsList.rows[index].cells[0].children[0].value.trim();                        var value = settingsList.rows[index].cells[1].children[0].value.trim();                                                if( name.length > 0 && value.length > 0 )                        {                            customSettings.push( makeSettingsObject( name, value ) );                        }                        else if( ( name.length == 0 && value.length > 0 ) || ( name.length > 0 && value.length == 0 ) )                        {                            throwException( "Please fill name and value for each custom setting." );                        }                    }                                        var proxySettings = document.getElementById( "proxysettings" );                                        var names = [                        "_BESClient_Comm_ProxyServer",                        "_BESClient_Comm_ProxyPort",                        "_BESClient_Comm_ProxyUser",                        "_BESClient_Comm_ProxyPass"                    ];                                        var values = [];                                        var index = 0;                                        for( ; index < proxySettings.rows[1].cells.length - 1; index++ )                    {                        values[index] = proxySettings.rows[1].cells[index].children[0].value.trim();                    }                                        values[index] = proxySettings.rows[1].cells[index].children[0].value;                                        if( values[0].length > 0 )                     {                        if( values[1].length == 0 )                        {                            throwException( "Proxy port cannot be empty. Please specify a value for the proxy port, or clear all proxy parameters." );                        }                        else                        {                            var port = parseInt( values[1] );                            if( isNaN( port ) || port < 1 || port > 65535 )                            {                                throwException( "Proxy port is invalid. Please specify a value between 1 and 65535, or clear all proxy parameters." );                            }                            else if( ( values[2].length > 0 && values[3].length == 0 ) || ( values[2].length == 0 && values[3].length > 0 ) )                            {                                throwException( "If the proxy service requires authentication, please specify both username and password. Otherwise, leave these parameters empty." );                            }                        }                    }                    else if( values[1].length > 0 )                    {                        throwException( "Proxy address cannot be empty. Please specify a value for the proxy address, or clear all proxy parameters." );                    }                    else if( values[2].length > 0 || values[3].length > 0 )                     {                        throwException( "Please specify values for proxy address and port, or clear all proxy parameters." );                    }                                        for( var index = 0; index < names.length; index++ )                    {                        if( values[index].length > 0)                            customSettings.push( makeSettingsObject( names[index], values[index] ) );                    }                                        if( customSettings.length == 0 )                        customSettings = null;                                        return customSettings;                }                function getDeployParameters()                {                    var deployParameters = [];                    var deployList = document.getElementById( "deploylist" ).childNodes;                    for( var index = 0 ; index < deployList.length ; index++ )                    {                        var table = deployList[index].childNodes[0];                        var computersStr = table.rows[1].cells[0].children[0].value.trim();                        var computers = [];                        if( computersStr.length > 0 )                            computers = computersStr.split( "\r\n" );                                                var username = escapeBackslash( table.rows[1].cells[1].children[0].value.trim() );                        var password = escapeBackslash( table.rows[1].cells[2].children[0].value );                                                                       if( computers.length > 0 && username.length > 0 && password.length > 0 )                        {                            deployParameters.push( makeDeployObject( computers , username , password ) );                        }                        else                        {                            throwException( "Please fill target information in all group of targets" );                        }                    }                    return deployParameters;                }                function generateJSONFile( deployParameters )                {                    var result = "[";                    for ( var i = 0; i < deployParameters.length; i++ )                    {                        result += "{{";                         result += "\"hostnames\":[{parameter \"deployComputers" + i + "\"}],";                        result += "\"username\":\"{parameter \"deployUsername" + i + "\"}\",";                        result += "\"password\":\"{parameter \"deployPassword" + i + "\"}\"";                        result += "}";                        if ( i < deployParameters.length -1 )                        {                            result += ",";                        }                    }                    result += "]";                    return result;                }                function generateActionScript( selectedImages , deployParameters, cdtCredentials, clientVersion, customSettings )                {                    var actionScript = "";                    var udtPath = "(value \"Path\" of key \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\BESClientDeploy.exe\" of registry) as string";                    var udtUnixPath = "/opt/BESClientDeployTool/bin/";                    var udtShFile = "BESClientDeployTool.sh";                    var udtExeFile = "BESClientDeploy.exe";                    var udtUnixInstallersFolder = "/var/opt/BESClientDeployTool/BigFixInstallSource/ClientInstaller/";                    var udtCatalogPathUnix = "/var/opt/BESClientDeployTool/";                    var imgDownloadPathWin = "__Download\\";                    var imgDownloadPathUnix = "__Download/";                    var udtJsonFile = "opt.json";                    var udtExecutablePathParameter = "parameter \"udtExecutablePath\"";                    var udtInstallersFolderParameter = "parameter \"udtInstallersFolder\"";                    var udtCmdParameter = "parameter \"udtCmd\"";                    var imgDownloadPathParameter = "parameter \"imgDownloadPath\"";                    var udtCatalogPathParameter = "parameter \"udtCatalogPath\"";                    var jsonOptionParameter = "parameter \"jsonFile\"";                    actionScript += "if {windows of operating system}\n";                    actionScript += udtExecutablePathParameter + " = \"{" + udtPath + "}\"\n";                    actionScript += udtInstallersFolderParameter + " = \"{" + udtPath + "}BigFixInstallSource\\ClientInstaller\\\"\n";                    actionScript += udtCmdParameter + " = \"{" + udtPath + "}" + udtExeFile + "\"\n";                    actionScript += imgDownloadPathParameter + " = \"" + imgDownloadPathWin + "\"\n";                    actionScript += udtCatalogPathParameter + " = \"{" + udtPath + "}\"\n";                    actionScript += jsonOptionParameter + " = \"{" + udtPath + "}" + udtJsonFile + "\"\n";                    actionScript += "elseif {unix of operating system}\n";                    actionScript += udtExecutablePathParameter + " = \"" + udtUnixPath + "\"\n";                    actionScript += udtInstallersFolderParameter + " = \"" + udtUnixInstallersFolder + "\"\n";                    actionScript += udtCmdParameter + " = \"" + udtUnixPath + udtShFile + "\"\n";                    actionScript += imgDownloadPathParameter + " = \"" + imgDownloadPathUnix + "\"\n";                    actionScript += udtCatalogPathParameter + " = \"" + udtCatalogPathUnix + "\"\n";                                        actionScript += jsonOptionParameter + " = \"" + udtCatalogPathUnix + udtJsonFile + "\"\n";                    actionScript += "endif\n";                    actionScript += "delete \"{" + udtCatalogPathParameter + "}BESClientsCatalog.xml\"\n";                    actionScript += "appendfile " + getCatalogObject().xml.replace( /\r/g , "" ).replace( /\n/g , "" ).replace( /\t/g , "" ) + "\n";                    actionScript += "move __appendfile \"{" + udtCatalogPathParameter + "}BESClientsCatalog.xml\"\n";                                        for( var index = 0 ; index < selectedImages.length ; index++ )                    {                        var image = selectedImages[index];                        var prefetch = "prefetch " + image.name + " sha1:" + image.sha + " size:" + image.size + " " + image.url + " sha256:" + image.sha256 + "\n";                        var copy = "copy \"{" + imgDownloadPathParameter + "}" + image.name + "\" \"{" + udtInstallersFolderParameter + "}" + image.name + "\"\n";                                                actionScript += "if { not exists file " + "( ( " + udtInstallersFolderParameter + " as string ) & \"" + image.name + "\")" + " }\n";                        actionScript += prefetch;                        actionScript += copy;                        actionScript += "endif\n";                    }                                        actionScript += "delete \"{" + jsonOptionParameter + "}\"\n";                    actionScript += "appendfile " + generateJSONFile( deployParameters ) + "\n";                    actionScript += "move __appendfile \"{" + jsonOptionParameter + "}\"\n";                    var cdtParameters = "";                    if( cdtCredentials != null )                    {                       cdtParameters += " /cdtUsername \"{parameter \"" + cdtCredentials[0].username.prefix + "\"}\" /cdtPassword \"{parameter \"" + cdtCredentials[0].password.prefix + "\"}\" ";                    }                                        var clientVersionParameter = "";                    if( clientVersion != null )                    {                        clientVersionParameter += " /version " + clientVersion + " ";                    }                                        var customSettingsParameters = "";                    if( customSettings != null )                    {                        actionScript += "delete \"{" + udtInstallersFolderParameter + "}CustomSettings.txt\"\n";                        for( var index = 0; index < customSettings.length; index++ )                        {                            actionScript += "appendfile { parameter \"" + customSettings[index].name.prefix + index + "\"}={ parameter \"" + customSettings[index].value.prefix + index + "\"}\n";                        }                        actionScript += "move __appendfile \"{" + udtInstallersFolderParameter + "}CustomSettings.txt\"\n";                        customSettingsParameters += " /customSettings \"{" + udtInstallersFolderParameter + "}CustomSettings.txt\" ";                    }                    actionScript += "if {windows of operating system}\n";                    actionScript += "waithidden \"{" + udtCmdParameter + "}\"" + " /jsonOption \"{" + jsonOptionParameter + "}\" /automatic /isFixlet " + cdtParameters + " " + clientVersionParameter + " " + customSettingsParameters + " \n";                    actionScript += "elseif {unix of operating system}\n";                    actionScript += "wait \"{" + udtCmdParameter + "}\"" + " /jsonOption \"{" + jsonOptionParameter + "}\" /automatic /isFixlet " + cdtParameters + " " + clientVersionParameter + " " + customSettingsParameters + " \n";                    actionScript += "endif\n";                    actionScript += "delete \"{" + jsonOptionParameter + "}\"\n";                    actionScript += "delete \"{" + udtInstallersFolderParameter + "}CustomSettings.txt\"\n";                                        actionScript += "parameter \"Exitcode\" = \"{if exist exit code of action then exit code of action as string else \"52311\"}\"\n";                    actionScript += "continue if {parameter \"Exitcode\" = \"0\"}\n";                    actionScript += "exit {parameter \"Exitcode\" as integer}\n";                    return actionScript;                }                                function injectActionScript( actionScript )                {                    var actionXML = actionScriptTemplate;                    var relevanceText = Relevance( "relevance of current fixlet" );                    var currentSiteID = Relevance("id of site of current fixlet");                    var currentFixletID = Relevance("id of current fixlet");                                        actionXML = actionXML.replace("__RELEVANCE__" , "<!" +"[CDATA[" + relevanceText + "]" + "]" + ">" );                    actionXML = actionXML.replace("__ACTIONSCRIPT__" , "<!" +"[CDATA[" + actionScript + "]" + "]" + ">" );                    actionXML = actionXML.replace("__SITEID__" , currentSiteID );                    actionXML = actionXML.replace("__FIXLETID__" , currentFixletID );                                        return actionXML;                }                                function generateDeployParameterTag( name , value , isSecure )                {                    var secureParameterTemplate = "<SecureParameter Name=\"__NAME__\">" + "<!" +"[CDATA[__CONTENT__]" + "]" + ">" + "</SecureParameter>";                    var unsecureParameterTemplate = "<Parameter Name=\"__NAME__\">" + "<!" +"[CDATA[__CONTENT__]" + "]" + ">" + "</Parameter>";                    var parameter = "";                                        if( isSecure )                    {                        parameter = secureParameterTemplate;                    }                    else                    {                        parameter = unsecureParameterTemplate;                    }                                        parameter = parameter.replace( "__NAME__" , name );                                            parameter = parameter.replace( "__CONTENT__" , value );                                        return parameter;                 }                                function injectDeployParameters( actionXML , deployParameters, cdtCredentials, customSettings )                {                    var secureParameterList = "";                                        var unsecureParameterList = "";                    var index;                    for( index = 0 ; index < deployParameters.length ; index++ )                    {                        var computersToDeploy = deployParameters[index].computers.value;                         var content = "";                                                for( var innerIndex = 0 ; innerIndex < computersToDeploy.length ; innerIndex++ )                        {                            content += "\"" + computersToDeploy[innerIndex] + "\"";                                                        if( innerIndex < computersToDeploy.length - 1 )                            {                                content += ",";                            }                        }                                                unsecureParameterList += generateDeployParameterTag( deployParameters[index].computers.prefix + index , content , false );                                                                        secureParameterList += generateDeployParameterTag( deployParameters[index].username.prefix + index , deployParameters[index].username.value , true );                        secureParameterList += generateDeployParameterTag( deployParameters[index].password.prefix + index , base64encode( deployParameters[index].password.value ) , true );                    }                                        if( cdtCredentials != null )                    {                        secureParameterList += generateDeployParameterTag( cdtCredentials[0].username.prefix , cdtCredentials[0].username.value , true );                        secureParameterList += generateDeployParameterTag( cdtCredentials[0].password.prefix , cdtCredentials[0].password.value , true );                    }                                        if( customSettings != null )                    {                        for( index = 0; index < customSettings.length; index++ )                        {                            secureParameterList += generateDeployParameterTag( customSettings[index].name.prefix + index , customSettings[index].name.value , true );                            secureParameterList += generateDeployParameterTag( customSettings[index].value.prefix + index , customSettings[index].value.value , true );                        }                    }                    actionXML = actionXML.replace( "__SECURE__PARAMETER__" , secureParameterList );                    actionXML = actionXML.replace( "__UNSECURE__PARAMETER__" , unsecureParameterList );                    return actionXML;                }                function initUI()                {                    if( ! window.catalogVersionsMap )                    {                        alert( "Cannot find the BES Client catalog files.\nThis fixlet can only be used from the BES Support site" );                        return;                    }                                        createCheckboxes();                    createClientVersionTable();                    createSettingsTable( "cdtcredentials" );                    createSettingsTable( "proxysettings" );                    addDeploymentEntry();                    addSettingsEntry();                        }                document.body.ontakeaction = function()                {                    try                    {                        var computerIDs = Relevance( "ids of applicable computers of current fixlet" );                                                if( computerIDs.length == 0 )                        {                            throwException( "No applicable computers for this action. Please wait that at least one applicable computer is present." );                        }                                                var clientVersion = getSelectedClientVersion();                                                                       if( clientVersion == "" )                        {                             throwException( "Please select the client version you want to deploy" );                        }                                                var selectedImages = getSelectedClientImages();                        var selectedBoxes = getSelectedCheckboxes();                                                 if( selectedImages.length == 0 )                        {                            if( selectedBoxes.length == 0 )                            {                                throwException( "Please select at least one target OS" );                            }                        }                                                var osNotFoundInCatalog = "";                                                for( var index = 0 ; index < selectedBoxes.length ; index++ )                        {                            if( selectedBoxes[index].FoundInCatalog == false )                            {                                if( osNotFoundInCatalog.length > 0 )                                {                                    osNotFoundInCatalog += " , ";                                }                                                            osNotFoundInCatalog +=  selectedBoxes[index].Name;                            }                        }                                            if( osNotFoundInCatalog.length > 0 )                        {                            throwException( "The version " + clientVersion + " doesn't support " + osNotFoundInCatalog );                        }                                                    var deployParameters = getDeployParameters();                        var cdtCredentials = getCDTCredentials();                        var customSettings = getCustomSettings();                                                if( deployParameters.length > 0 )                        {                            var actionXML = injectActionScript( generateActionScript( selectedImages, deployParameters, cdtCredentials, clientVersion, customSettings ) );                            actionXML = injectDeployParameters( actionXML, deployParameters, cdtCredentials, customSettings );                                                        ImportXML( actionXML , true , undefined , computerIDs );                        }                        else                        {                            throwException( "Please fill target information." );                        }                    }                    catch( error )                    {                        alert( error.message );                    }                                        return false;                };                                document.getElementById( "adddeployment" ).onclick = addDeploymentEntry;                document.getElementById( "addsetting" ).onclick = addSettingsEntry;                document.getElementById( "clearcredentialsfields" ).onclick = function f() { clearFields( "cdtcredentials", 2 ); };                document.getElementById( "clearsettingsfields" ).onclick = function f() { clearFields( "settingslist", 2 ); };                document.getElementById( "clearproxysettings" ).onclick = function f() { clearFields( "proxysettings", 4 ); };                document.getElementById( "showadvancedsettings" ).onclick = function f() { showAdvancedSettings( "advancedsettings" ); };                                loadCatalogsList();                                                            </script>                     <DIV class=FixletProperty></DIV></DIV></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance><![CDATA[version of client >= "9.1"]]></Relevance>
		<Relevance>((it starts with "Win") OR (exists match (regex "Linux Red Hat Enterprise (Server|Client|Workstation) (5|6|7)") of it) OR (exists match (regex "CentOS (5|6|7)") of it) OR (exists match (regex "Ubuntu (12|14|16)") of it)  OR (exists match (regex "Linux SuSE Enterprise (Desktop|Server) (11|12)") of it)) of name of operating system</Relevance>
		<Relevance>if windows of operating system then exists regapp "BESClientDeploy.exe" else true  </Relevance>
		<Relevance>if name of operating system contains "Red Hat" then exists package "BESClientDeployTool" of rpm else true </Relevance>
		<Relevance>if name of operating system contains "SuSE" then exists package "BESClientDeployTool" of rpm else true </Relevance>
		<Relevance>if name of operating system contains "CentOS" then exists package "BESClientDeployTool" of rpm else true </Relevance>
		<Relevance>if name of operating system contains "Ubuntu" then exists package "besclientdeploytool" of debianpackage else true </Relevance>
		<Category>Setup</Category>
		<Source>IBM</Source>
		<SourceID><![CDATA[<Unspecified>]]></SourceID>
		<SourceReleaseDate>2010-11-04</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Tue, 28 Mar 2017 17:03:44 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-domain_attributes</Name>
			<Value>BES Deploy Client</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Thu, 13 Jul 2017 13:38:51 +0000</Value>
		</MIMEField>
		<Delay>PT5M</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">//The action script is auto-generated</ActionScript>
		</DefaultAction>
	</Task>
</BES>
