<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Generate BigFix  license tags</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD><?hxlat It creates or updates license tag files daily ?></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance><![CDATA[version of client >= "7.2"]]></Relevance>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance>if exists property "in agent context" then (in agent context) else true</Relevance>
		<Relevance>(if (windows of it) then (platform id of it != 3) else (name of it as lowercase does not contain "android")) of operating system</Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2015-10-14</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Wed, 29 Jun 2016 12:47:50 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Thu, 27 Sep 2018 12:50:57 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[//The idea is a BES Support fixlet (policy action) that daily enumerates the subscribed sites.

parameter "ClientPrefix" = "_BESClient_LicenseType_"

if {(((name of operating system) as lowercase) contains "win")}
	parameter "TagDir"="{expand environment string of "%25temp%25"}"
else
	parameter "TagDir"="/tmp"
endif



// url of the site 'BES Support'
parameter "SupportSiteUrl"="{url of site whose (name of it is "BES Support")},"

// prefix name of the tag files
parameter "Prefix" = "ibm.com_IBM_BigFix_"

// default license type based on os platform
parameter "defaultMetric"="{ (if ( it starts with "win" ) then ( if ( product type of operating system is nt workstation product type ) then "ClientDevice" else "RVU" ) else if ( it contains "os x" and it contains "server") then "RVU" else if (it contains "os x") then  "ClientDevice" else if (it contains "linux" or it contains "aix"  or it contains "sun" or it contains "hp-ux" ) then "RVU"  else "Undefined" ) of ( name of operating system as lowercase ) }"

//identify the place where to put the ISO software tags
parameter "ParentTagsFolder" = "{ pathname of parent folder of client }"
if {(((name of operating system) as lowercase) contains "win")}
	parameter "Sep"="\"	
else
	parameter "Sep"="/"    
endif
// Unix/Linux/Windows: put the tags into: /opt/BESClient/bin/swidtag or into: /opt/BESClient/bin/iso-swid or into: /opt/BESClient/bin/properties/version
parameter "IsoFolder"= "{ (if exists folder ((parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "swidtag") then ((parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "swidtag") else (if exists folder ((parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "iso-swid") then ((parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "iso-swid") else ((parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "properties" & (parameter "Sep" of action) & "version") ) ) }" 

// this is : /opt/BESClient/bin/swidtag (or Windows equivalent)
parameter "swidtag_Folder"="{(parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "swidtag"}"

// this is : /opt/BESClient/bin/iso-swid (or Windows equivalent)
parameter "iso_swid_Folder"="{(parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "iso-swid"}"

// this is : /opt/BESClient/bin/properties/version (or Windows equivalent)
parameter "propVersion_Folder"="{(parameter "ParentTagsFolder" of action) & (parameter "Sep" of action) & "properties" & (parameter "Sep" of action) & "version"}"

// location of the rebranded product names
//parameter "ProductMapping"="{ (pathname of client folder of current site) & (parameter "Sep" of action) & "Products.txt" }"

// location of the mapping file
parameter "ActionSiteMapping"="{ (pathname of client folder of site "actionsite") & (parameter "Sep" of action) & "siteMapping.csv" }"

// licensed products returned from the mapping file 
parameter "LicensedProducts"="{ substring after (parameter "SupportSiteUrl" of action) of line 1 of file (parameter "ActionSiteMapping" of action) }"

// intersection of the licensed products and the products of the subscribed sites
parameter "SubscribedSitesLicensedProducts" = "{concatenation "," of ( (substrings separated by "," of (substring after (parameter "SupportSiteUrl" of action) of line 1 of file (parameter "ActionSiteMapping" of action))) whose (it is contained by (concatenation "," of (following text of first "," of it ) of lines whose ( (preceding text of first "," of it) is contained by (concatenation "," of urls of sites whose (name of it does not start with "opsite" and name of it does not start with "actionsite" and name of it does not start with "mailboxsite" and name of it does not start with "BES Support")) ) of file (parameter "ActionSiteMapping" of action) )) of file (parameter "ActionSiteMapping" of action)) }"

parameter "ClientLicensedProducts" = "{ if (it of (parameter "SubscribedSitesLicensedProducts" of action) is "" ) then (parameter "LicensedProducts" of action) else (parameter "SubscribedSitesLicensedProducts" of action)}"

// first two digit that is major.minor of the client version
parameter "ClientVersion"="{(preceding text of first "." of (it as string) of version of client) & "." & (preceding text of first "." of following text of first "." of (it as string) of version of client) & ".0"}"

// tags name of the licensed products with custom metric
parameter "LicensedProductsWithCustomMetric" = "{concatenation ":" of (( following text of first ( parameter "ClientPrefix" of action ) of ( name of it) & "_" & value of it ) of (  (settings of client) whose( name of it contains (parameter "ClientPrefix" of action) and (parameter "ClientLicensedProducts" of action ) contains following text of first ( parameter "ClientPrefix" of action ) of name of it )))}"

// custom product metrics
parameter "MetricClientSettings" = "{concatenation "," of names of (settings of client) whose( name of it contains ( parameter "ClientPrefix" of action ))}"

// tags name of the licensed products with default metric
parameter "LicensedProductsWithDefMetric" =  "{	if (it of ( parameter "defaultMetric" of action) is "Undefined") then "" else (concatenation ":" of (  it & "_" & (parameter "defaultMetric" of action) ) of substrings separated by "," whose ((parameter "ClientPrefix" of action) & it is not contained by (parameter "MetricClientSettings" of action) ) of (parameter "ClientLicensedProducts" of action )) }"

// tags name of all the licensed product objects
//parameter "OldTagNames" =  "{(parameter "LicensedProductsWithCustomMetric" of action) & ":" & (parameter "LicensedProductsWithDefMetric" of action) }"

parameter "TagNames" =  "{(parameter "LicensedProductsWithCustomMetric" of action) & ":" & (parameter "LicensedProductsWithDefMetric" of action) }"

// rewrite tags with the rebranded names

//parameter "TagNames" = "{ concatenation ":" of (following text of last ";" of item 1 of it & "_" & following text of last "_" of item 0 of it ) of (substrings separated by ":" of (parameter "OldTagNames" of action),lines of file (parameter "ProductMapping" of action )) whose (preceding text of last "_" of item 0 of it = preceding text of first ";" of item 1 of it) }"

// get the existing tags at the client
parameter "existingTags" = "{concatenation ":" of substrings separated by ( "-" &(parameter "ClientVersion" of action) & ".swidtag") of concatenation "" of ( following text of first (parameter "Prefix" of action) of it) of names whose ( it does not contain "Platform_Agent" ) of find files "*" of folder (parameter "IsoFolder" of action) }"
parameter "TagsToHide" = "{concatenation ":" of ( preceding text of last "." of it) of (names of find files "*Platform_Agent*" of folder (parameter "IsoFolder" of action)) whose (it does not contain ".fxtag")}"
parameter "TagsNotHidden" = "{concatenation ":" of ( preceding text of last "." of it) of (names of find files "*Platform_Agent*.swidtag" of folder (parameter "IsoFolder" of action)) whose (it does not contain ".fxtag")}"

if {(((name of operating system) as lowercase) contains "win")}
parameter "TagsToAdd" = "{ concatenation ":" of (substrings separated by ":" of (parameter "TagNames" of action) )whose (it is not contained by (parameter "existingTags" of action) ) }"
parameter "TagsToDelete" = "{ concatenation ":" of (substrings separated by ":" of (parameter "existingTags" of action) )whose (it is not contained by (parameter "TagNames" of action) ) }"
else
parameter "TagsToAdd" = "{ concatenation "\)" of substrings separated by ")" of concatenation "\(" of substrings separated by "(" of concatenation ":" of (substrings separated by ":" of (parameter "TagNames" of action) )whose (it is not contained by (parameter "existingTags" of action) ) }"
parameter "TagsToDelete" = "{ concatenation "\)" of substrings separated by ")" of concatenation "\(" of substrings separated by "(" of concatenation ":" of (substrings separated by ":" of (parameter "existingTags" of action) )whose (it is not contained by (parameter "TagNames" of action) ) }"
endif

if  {((it of (parameter "TagsToAdd" of action) is "" ) and (it of (parameter "TagsToDelete" of action) is "" ) and (it of (parameter "TagsNotHidden" of action) is "" ))}
else
delete __appendfile

if {(((name of operating system) as lowercase) contains "win")}

appendfile @echo off
appendfile setlocal
appendfile set PREFIX={parameter "Prefix" of action}
appendfile set VERSION={parameter "ClientVersion" of action}
appendfile set TAGSOURCEPATH={pathname of client folder of current site}
appendfile set TAGSTOADD={parameter "TagsToAdd" of action}
appendfile set TAGSTODEL={parameter "TagsToDelete" of action}
appendfile set TAGSTOHIDE={parameter "TagsToHide" of action}
appendfile set ISO_FOLDER={parameter "IsoFolder" of action}
appendfile set SWIDTAG_FOLDER={parameter "swidtag_Folder" of action}
appendfile set ISOSWID_FOLDER={parameter "iso_swid_Folder" of action}
appendfile set PROPVERSION_FOLDER={parameter "propVersion_Folder" of action}
appendfile set ERR=0

appendfile if exist "%SWIDTAG_FOLDER%" (
appendfile 	if exist "%ISOSWID_FOLDER%" (
appendfile     del /Q "%ISOSWID_FOLDER%"\*.swidtag
appendfile 	)
appendfile )

appendfile if exist "%SWIDTAG_FOLDER%" (
appendfile 	if exist "%PROPVERSION_FOLDER%" (
appendfile     del /Q "%PROPVERSION_FOLDER%"\*.swidtag
appendfile 	)
appendfile )

appendfile if exist "%ISOSWID_FOLDER%" (
appendfile 	if exist "%PROPVERSION_FOLDER%" (
appendfile     del /Q "%PROPVERSION_FOLDER%"\*.swidtag
appendfile 	)
appendfile )

appendfile :FORLOOP1
appendfile For /F "tokens=1* delims=:" %%A IN ("%TAGSTOADD%") DO (
appendfile     copy "%TAGSOURCEPATH%\%PREFIX%%%A-%VERSION%.sample" "%ISO_FOLDER%\%PREFIX%%%A-%VERSION%.swidtag"
appendfile     if ERRORLEVEL 1 set ERR=1
appendfile     set TAGSTOADD=%%B
appendfile     if not "%TAGSTOADD%"=="" goto FORLOOP1
appendfile )
appendfile :FORLOOP2
appendfile For /F "tokens=1* delims=:" %%A IN ("%TAGSTODEL%") DO (
appendfile     del /Q "%ISO_FOLDER%\%PREFIX%%%A-%VERSION%.swidtag"
appendfile     if ERRORLEVEL 1 set ERR=1
appendfile     set TAGSTODEL=%%B
appendfile     if not "%TAGSTODEL%"=="" goto FORLOOP2
appendfile )
appendfile goto END                                     
appendfile :END
appendfile if "%ERR%"=="1" goto ERROR
appendfile :HIDE
appendfile For /F "tokens=1* delims=:" %%A IN ("%TAGSTOHIDE%") DO (
appendfile     if exist "%ISO_FOLDER%\%%A".swidtag if exist "%ISO_FOLDER%\%%A".hidden del /Q "%ISO_FOLDER%\%%A".swidtag
appendfile     if exist "%ISO_FOLDER%\%%A".swidtag ren "%ISO_FOLDER%\%%A".swidtag "%%A".hidden
appendfile     if exist "%ISO_FOLDER%\%%A".swtag ren "%ISO_FOLDER%\%%A".swtag "%%A".hidden
appendfile     set TAGSTOHIDE=%%B
appendfile     if not "%TAGSTOHIDE%"=="" goto HIDE
appendfile )
appendfile endlocal
appendfile exit /b 0
appendfile :ERROR
appendfile For /F "tokens=1* delims=:" %%A IN ("%TAGSTOHIDE%") DO (
appendfile     echo %ISO_FOLDER%|findstr /lic:"version" >nul
appendfile     if ERRORLEVEL 1 if exist "%ISO_FOLDER%\a".hidden ren "%ISO_FOLDER%\a".hidden "a".swidtag
appendfile     if ERRORLEVEL 0 if exist "%ISO_FOLDER%\a".hidden ren "%ISO_FOLDER%\a".hidden "a".swtag
appendfile     set TAGSTOHIDE=%%B
appendfile     if not "%TAGSTOHIDE%"=="" goto ERROR
appendfile )
appendfile endlocal
appendfile exit /b 0

delete "{parameter "TagDir" of action}\createTags.bat"

copy __appendfile "{parameter "TagDir" of action}\createTags.bat"

waithidden "{parameter "TagDir" of action}\createTags.bat"

else

appendfile #!/bin/sh
appendfile PREFIX={parameter "Prefix" of action}
appendfile VERSION={parameter "ClientVersion" of action}
appendfile TAGSOURCEPATH="{pathname of client folder of current site}"
appendfile TAGSTOADD={parameter "TagsToAdd" of action}
appendfile TAGSTODEL={parameter "TagsToDelete" of action}
appendfile TAGSTOHIDE={parameter "TagsToHide" of action}
appendfile ISO_FOLDER={parameter "IsoFolder" of action}
appendfile SWIDTAG_FOLDER={parameter "swidtag_Folder" of action}
appendfile ISOSWID_FOLDER={parameter "iso_swid_Folder" of action}
appendfile PROPVERSION_FOLDER={parameter "propVersion_Folder" of action}
appendfile ERR=0
appendfile if [ -d "$SWIDTAG_FOLDER" ] && [ -d "$ISOSWID_FOLDER" ]; then
appendfile     rm -f "$ISOSWID_FOLDER"/*.swidtag
appendfile fi
appendfile if [ -d "$SWIDTAG_FOLDER" ] && [ -d "$PROPVERSION_FOLDER" ]; then
appendfile     rm -f "$PROPVERSION_FOLDER"/*.swidtag
appendfile fi
appendfile if [ -d "$ISOSWID_FOLDER" ] && [ -d "$PROPVERSION_FOLDER" ]; then
appendfile     rm -f "$PROPVERSION_FOLDER"/*.swidtag
appendfile fi
appendfile TEMPTAGS=`echo $TAGSTOADD | tr ":" "\n"`
appendfile for i in $TEMPTAGS
appendfile do
appendfile     cp "$TAGSOURCEPATH/$PREFIX$i-$VERSION.sample" "$ISO_FOLDER/$PREFIX$i-$VERSION.swidtag"
appendfile     if [ $? -ne 0 ]; then
appendfile         ERR=1
appendfile     fi
appendfile done

appendfile TEMPTAGS=`echo $TAGSTODEL | tr ":" "\n"`
appendfile for i in $TEMPTAGS
appendfile do
appendfile     rm -f "$ISO_FOLDER/$PREFIX$i-$VERSION.swidtag"
appendfile     if [ $? -ne 0 ]; then
appendfile         ERR=1
appendfile     fi
appendfile done

appendfile TEMPTAGS=`echo $TAGSTOHIDE | tr ":" "\n"` 

appendfile if [ $ERR -ne 0 ]; then
appendfile     case "$ISO_FOLDER" in
appendfile     *version*) : 
appendfile     for i in $TEMPTAGS
appendfile     do
appendfile         if [ -f "$ISO_FOLDER/$i.hidden" ];then
appendfile             mv "$ISO_FOLDER/$i.hidden" "$ISO_FOLDER/$i.swtag"
appendfile         fi
appendfile     done
appendfile     ;;
appendfile     *)     :
appendfile     for i in $TEMPTAGS
appendfile     do
appendfile         if [ -f "$ISO_FOLDER/$i.hidden" ];then
appendfile             mv "$ISO_FOLDER/$i.hidden" "$ISO_FOLDER/$i.swidtag"
appendfile         fi
appendfile     done
appendfile     ;;
appendfile    esac
appendfile fi

appendfile if [ $ERR -eq 0 ]; then
appendfile    for i in $TEMPTAGS
appendfile    do
appendfile         if [ -f "$ISO_FOLDER/$i.hidden" ];then
appendfile             rm -f "$ISO_FOLDER/$i.swidtag"
appendfile         fi
appendfile         if [ -f "$ISO_FOLDER/$i.swidtag" ];then
appendfile             mv "$ISO_FOLDER/$i.swidtag" "$ISO_FOLDER/$i.hidden"
appendfile         fi
appendfile         if [ -f "$ISO_FOLDER/$i.swtag" ];then
appendfile             mv "$ISO_FOLDER/$i.swtag" "$ISO_FOLDER/$i.hidden"
appendfile         fi
appendfile    done
appendfile fi

appendfile exit 0

delete "{parameter "TagDir" of action}/createTags.sh"

copy __appendfile "{parameter "TagDir" of action}/createTags.sh"

wait sh "{parameter "TagDir" of action}/createTags.sh"

endif

endif]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
			<Settings>
				<PreActionShowUI>false</PreActionShowUI>
				<HasRunningMessage>false</HasRunningMessage>
				<HasTimeRange>false</HasTimeRange>
				<HasStartTime>false</HasStartTime>
				<HasEndTime>false</HasEndTime>
				<HasDayOfWeekConstraint>false</HasDayOfWeekConstraint>
				<UseUTCTime>false</UseUTCTime>
				<ActiveUserRequirement>NoRequirement</ActiveUserRequirement>
				<ActiveUserType>AllUsers</ActiveUserType>
				<HasWhose>false</HasWhose>
				<PreActionCacheDownload>false</PreActionCacheDownload>
				<Reapply>true</Reapply>
				<HasReapplyLimit>false</HasReapplyLimit>
				<HasReapplyInterval>true</HasReapplyInterval>
				<ReapplyInterval>P1D</ReapplyInterval>
				<HasRetry>false</HasRetry>
				<HasTemporalDistribution>false</HasTemporalDistribution>
				<ContinueOnErrors>true</ContinueOnErrors>
				<PostActionBehavior Behavior="Nothing"></PostActionBehavior>
				<IsOffer>false</IsOffer>
			</Settings>
			<SettingsLocks>
				<ActionUITitle>false</ActionUITitle>
				<PreActionShowUI>false</PreActionShowUI>
				<PreAction>
					<Text>false</Text>
					<AskToSaveWork>false</AskToSaveWork>
					<ShowActionButton>false</ShowActionButton>
					<ShowCancelButton>false</ShowCancelButton>
					<DeadlineBehavior>false</DeadlineBehavior>
					<ShowConfirmation>false</ShowConfirmation>
				</PreAction>
				<HasRunningMessage>false</HasRunningMessage>
				<RunningMessage>
					<Text>false</Text>
				</RunningMessage>
				<TimeRange>false</TimeRange>
				<StartDateTimeOffset>false</StartDateTimeOffset>
				<EndDateTimeOffset>false</EndDateTimeOffset>
				<DayOfWeekConstraint>false</DayOfWeekConstraint>
				<ActiveUserRequirement>false</ActiveUserRequirement>
				<ActiveUserType>false</ActiveUserType>
				<Whose>false</Whose>
				<PreActionCacheDownload>false</PreActionCacheDownload>
				<Reapply>false</Reapply>
				<ReapplyLimit>false</ReapplyLimit>
				<RetryCount>false</RetryCount>
				<RetryWait>false</RetryWait>
				<TemporalDistribution>false</TemporalDistribution>
				<ContinueOnErrors>false</ContinueOnErrors>
				<PostActionBehavior>
					<Behavior>false</Behavior>
					<AllowCancel>false</AllowCancel>
					<Deadline>false</Deadline>
					<Title>false</Title>
					<Text>false</Text>
				</PostActionBehavior>
				<IsOffer>false</IsOffer>
				<AnnounceOffer>false</AnnounceOffer>
				<OfferCategory>false</OfferCategory>
				<OfferDescriptionHTML>false</OfferDescriptionHTML>
			</SettingsLocks>
		</DefaultAction>
	</Fixlet>
</BES>
