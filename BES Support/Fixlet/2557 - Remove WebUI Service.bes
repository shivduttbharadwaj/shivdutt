<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Remove WebUI Service</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD>Deploy this Fixlet on a device to remove the BigFix WebUI Service.<br><P>This Fixlet will remove:</P><UL><LI>WebUI Service</LI><LI>WebUI Client settings on the Endpoint</LI><LI>Files and directories within the WebUI installation and work directories</LI></UL><P><B><FONT color=red>Important Note:</FONT></B> BigFix Server Version 9.5.3 or above is required to execute this Fixlet</P><P><B><FONT color=red>Important Note:</FONT></B> Ensure there are no other files in the WebUI installation and work directories as they will be removed by this Fixlet.</P><P><B><FONT color=red>Important Note:</FONT></B> This fixlet will <B>not</B> clean the WebUI database tables.</P></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance><![CDATA[version of registration server >= "9.2.6"]]></Relevance>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance><![CDATA[version of client >= "9.5.3.211"]]></Relevance>
		<Relevance><![CDATA[version of registration server >= "9.5.3"]]></Relevance>
		<Relevance>"x86_64" = architecture of operating system</Relevance>
		<Relevance>(exists webui service) OR (exists setting "_WebUIAppEnv_WebUI_DIR" whose(exists value of it) of client) OR (exists setting "_WebUIAppEnv_WEB_CERT_FILE" whose(exists value of it) of client) OR (if (windows of operating system) then ((exists key whose (value "DisplayName" of it = "IBM BigFix WebUI Service") of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of registry) OR (exists key "HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\services\BESWebUI" of registry) OR (if (x64 of operating system) then (exists key "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\BigFix\EnterpriseClient\Settings\Client\_WebUIAppEnv_WebUI_DIR" of registry) else false)) else false)</Relevance>
		<Category></Category>
		<Source>BigFix</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-09-30</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Mon, 10 Oct 2016 17:58:06 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-domain_attributes</Name>
			<Value>BES Component WUI</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Thu, 16 May 2019 09:02:41 +0000</Value>
		</MIMEField>
		<Delay>PT5M</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to uninstall the WebUI Service.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
parameter "workDir" = "{value of setting "_WebUIAppEnv_WebUI_DIR" of client | (if windows of operating system then pathname of program files x32 folder & "\BigFix Enterprise\BES WebUI" else "/var/opt/BESWebUI")}"
parameter "sitesDir" = "{value of setting "_WebUIAppEnv_WORK_DIR" of client | (if windows of operating system then pathname of program files x32 folder & "\BigFix Enterprise\BES WebUI\WebUI\sites" else "/var/opt/BESWebUI/WebUI/sites")}"
parameter "etlDir" = "{value of setting "_WebUIAppEnv_ETL_DIR" of client | (if windows of operating system then pathname of program files x32 folder & "\BigFix Enterprise\BES WebUI\ETL" else "/var/opt/BESWebUI/ETL")}"

if {windows of operating system}
	if {(exists key whose (value "DisplayName" of it = "IBM BigFix WebUI Service") of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of registry)}
		parameter "exePath" = "{parameter "workDir"}\WebUIService.exe"
		// Windows has a special registry key for each program shown in the Add/Remove panel, and each of those keys
		// has a value with the command to uninstall its program. This value might end with a null character "%00",
		// which we need to remove before running the command.
		wait {(if it ends with "%00" then preceding text of last "%00" of it else it) of ((value "UninstallString" of key whose (value "DisplayName" of it = "IBM BigFix WebUI Service") of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" of registry) as string)} /qn
		continue if {exists true whose (if true then (exit code of action = 0) else false)}
		continue if {not exists file (parameter "exePath")}
	else
		// Stop WebUI service wrapper and wait for the Node processes
		if {exists webui service whose (running of it)}
			// This command will wait some seconds but can return before the process stopped
			wait "{pathname of system folder}\cmd.exe" /C net stop "BESWebUI"
			parameter "nodePath" = "{parameter "workDir"}\WebUI\node.exe"
			parameter "currTime" = "{now}"
			// Wait for the service to actually stop, up to 3 minutes
			pause while {(exists processes whose(pathname of image file of it is (parameter "nodePath"))) AND (now - time(parameter "currTime")) < (180*second)}
			continue if {not exists webui service whose (running of it)}
		endif
		// Delete WebUI service from the list of Windows services
		if {(exists webui service) OR (exists key "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\BESWebUI" of registry)}
			wait "{pathname of system folder}\cmd.exe" /C sc delete "BESWebUI"
			continue if {not exists webui service}
		endif
		// Remove firewall rules
		wait "{pathname of system folder}\netsh.exe" advfirewall firewall delete rule name="BES WebUI HTTP"
		wait "{pathname of system folder}\netsh.exe" advfirewall firewall delete rule name="BES WebUI (HTTP)"
		wait "{pathname of system folder}\netsh.exe" advfirewall firewall delete rule name="BES WebUI HTTPS"
		wait "{pathname of system folder}\netsh.exe" advfirewall firewall delete rule name="BES WebUI (HTTPS)"
		wait "{pathname of system folder}\netsh.exe" advfirewall firewall delete rule name="BES WebUI (ICMPv4)"
		wait "{pathname of system folder}\netsh.exe" advfirewall firewall delete rule name="BES WebUI (ICMPv6)"
	endif

	// Remove folders
	if {exists folder (parameter "workDir")}
		wait "{pathname of system folder}\cmd.exe" /C rmdir /Q /S "{parameter "workDir"}"
		continue if {not exists folder (parameter "workDir")}
	endif
	if {exists folder (parameter "etlDir")}
		wait "{pathname of system folder}\cmd.exe" /C rmdir /Q /S "{parameter "etlDir"}"
		continue if {not exists folder (parameter "etlDir")}
	endif
	if {exists folder (parameter "sitesDir")}
		wait "{pathname of system folder}\cmd.exe" /C rmdir /Q /S "{parameter "sitesDir"}"
		continue if {not exists folder (parameter "sitesDir")}
	endif
else
	if {exists package "BESWebUI" of rpm}
		wait rpm -e BESWebUI
		parameter "currTime" = "{now}"
		pause while {(exists processes whose(name of it as string contains "node")) AND (now - time(parameter "currTime")) < (180*second)}
		continue if {not exists package "BESWebUI" of rpm}

		// Remove firewall rules
		parameter "httpPort" = "{value of setting "_WebUI_Redirect_Port" of client | "80"}"
		parameter "httpsPort" = "{value of setting "_WebUI_HTTPS_Port" of client | "443"}"
		delete __appendfile
		appendfile #!/bin/bash
		if {version of operating system >= "7"}
			appendfile /bin/firewall-cmd --permanent --zone=public --remove-port={parameter "httpPort"}/tcp
			appendfile /bin/firewall-cmd --permanent --zone=public --remove-port={parameter "httpsPort"}/tcp
			wait /bin/firewall-cmd --state
			if {exists true whose (if true then (exit code of action = 0) else false)}
				appendfile /bin/systemctl restart firewalld
			endif
		endif
		if {exists rpm "iptables"}
			appendfile /sbin/iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport {parameter "httpPort"} -j ACCEPT
			appendfile /sbin/iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport {parameter "httpsPort"} -j ACCEPT
			appendfile /sbin/service iptables save
			wait /sbin/service iptables status
			if {exit code of action = 0}
				appendfile /sbin/service iptables restart 
			endif 
		endif
		wait /bin/sh __appendfile
	endif

	// Remove folders
	if {exists symlink "BESWebUI" of folder "/opt"}
		delete __appendfile
		appendfile #!/bin/bash
		appendfile rm -rf /opt/BESWebUI/*
		wait /bin/sh __appendfile
		continue if {not exists folder of folder "/opt/BESWebUI"}
		wait /bin/rm /opt/BESWebUI
	else
		wait /bin/rm -rf /opt/BESWebUI
	endif
	if {exists symlink "BESWebUI" of folder "/var/opt"}
		delete __appendfile
		appendfile #!/bin/bash
		appendfile rm -rf /var/opt/BESWebUI/*
		wait /bin/sh __appendfile
		wait /bin/rm /var/opt/BESWebUI
	else
		wait /bin/rm -rf /var/opt/BESWebUI
	endif
	if {exists folder (parameter "etlDir")}
		wait /bin/rm -rf "{parameter "etlDir"}"
		continue if {not exists folder (parameter "etlDir")}
	endif
	if {exists folder (parameter "sitesDir")}
		wait /bin/rm -rf {parameter "sitesDir"}
		continue if {not exists folder (parameter "sitesDir")}
	endif
endif

// Remove known settings
if {exists setting "_BESRelay_WebUISiteGather_Disabled" of client}
	setting delete "_BESRelay_WebUISiteGather_Disabled" on "{parameter "action issue date"}" for client
endif
if {exists setting "_BESRelay_WebUISiteGather_IntervalMinutes" of client}
	setting delete "_BESRelay_WebUISiteGather_IntervalMinutes" on "{parameter "action issue date"}" for client
endif
if {exists setting "_BESRelay_WebUISiteGather_Schedule" of client}
	setting delete "_BESRelay_WebUISiteGather_Schedule" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_AUTOPATCH_EXPOSE_GC" of client}
	setting delete "_WebUIAppEnv_APP_AUTOPATCH_EXPOSE_GC" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_AUTOPATCH_MAX_OLD_SPACE_SIZE" of client}
	setting delete "_WebUIAppEnv_APP_AUTOPATCH_MAX_OLD_SPACE_SIZE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_PORT_MAX" of client}
	setting delete "_WebUIAppEnv_APP_PORT_MAX" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_PORT_MIN" of client}
	setting delete "_WebUIAppEnv_APP_PORT_MIN" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_RESTART_DELAY_SECONDS" of client}
	setting delete "_WebUIAppEnv_APP_RESTART_DELAY_SECONDS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_SERVER_TIME_DRIFT_THRESHOLD_MINUTES" of client}
	setting delete "_WebUIAppEnv_APP_SERVER_TIME_DRIFT_THRESHOLD_MINUTES" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_UPDATE_DELAY_DAYS" of client}
	setting delete "_WebUIAppEnv_APP_UPDATE_DELAY_DAYS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_APP_UPDATE_ENABLE_AUTO" of client}
	setting delete "_WebUIAppEnv_APP_UPDATE_ENABLE_AUTO" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ASYNC_DISABLED" of client}
	setting delete "_WebUIAppEnv_ASYNC_DISABLED" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_CACHE_RETRY_LIMIT" of client}
	setting delete "_WebUIAppEnv_CACHE_RETRY_LIMIT" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_CACHE_RETRY_TIMEOUT" of client}
	setting delete "_WebUIAppEnv_CACHE_RETRY_TIMEOUT" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_CACHE_TTL" of client}
	setting delete "_WebUIAppEnv_CACHE_TTL" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_DATABASE_POOL_MAX_SIZE" of client}
	setting delete "_WebUIAppEnv_DATABASE_POOL_MAX_SIZE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_DATABASE_POOL_SIZE" of client}
	setting delete "_WebUIAppEnv_DATABASE_POOL_SIZE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_DATABASE_QUERY_TIMEOUT_SECONDS" of client}
	setting delete "_WebUIAppEnv_DATABASE_QUERY_TIMEOUT_SECONDS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_DEBUG" of client}
	setting delete "_WebUIAppEnv_DEBUG" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_DEPLOYMENT_DOC_REFRESH_RATE_MS" of client}
	setting delete "_WebUIAppEnv_DEPLOYMENT_DOC_REFRESH_RATE_MS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_DEV" of client}
	setting delete "_WebUIAppEnv_DEV" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_E2ETEST" of client}
	setting delete "_WebUIAppEnv_E2ETEST" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ENABLE_IBMDB_DEBUG" of client}
	setting delete "_WebUIAppEnv_ENABLE_IBMDB_DEBUG" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ENABLE_VERBOSE_CXN_POOL_LOGGING" of client}
	setting delete "_WebUIAppEnv_ENABLE_VERBOSE_CXN_POOL_LOGGING" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ENABLE_WEBUI_METRICS" of client}
	setting delete "_WebUIAppEnv_ENABLE_WEBUI_METRICS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ETL_DIR" of client}
	setting delete "_WebUIAppEnv_ETL_DIR" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ETL_STATISTICS_THRESHOLD" of client}
	setting delete "_WebUIAppEnv_ETL_STATISTICS_THRESHOLD" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_ETL_STATISTICS_THRESHOLD_TIME" of client}
	setting delete "_WebUIAppEnv_ETL_STATISTICS_THRESHOLD_TIME" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_FRAMEWORK_DIR" of client}
	setting delete "_WebUIAppEnv_FRAMEWORK_DIR" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_LOGIN_CACHE_TTL_HOURS" of client}
	setting delete "_WebUIAppEnv_LOGIN_CACHE_TTL_HOURS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_LOGIN_SESSION_TIMEOUT_SECONDS" of client}
	setting delete "_WebUIAppEnv_LOGIN_SESSION_TIMEOUT_SECONDS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_METRICS_CLEANUP_INTERVAL_MIN" of client}
	setting delete "_WebUIAppEnv_METRICS_CLEANUP_INTERVAL_MIN" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_METRICS_MAX" of client}
	setting delete "_WebUIAppEnv_METRICS_MAX" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_METRICS_PATH" of client}
	setting delete "_WebUIAppEnv_METRICS_PATH" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_MSSQL_CXN_ENCRYPT" of client}
	setting delete "_WebUIAppEnv_MSSQL_CXN_ENCRYPT" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_PLATFORM_HOST" of client}
	setting delete "_WebUIAppEnv_PLATFORM_HOST" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_QUERY_ONLY" of client}
	setting delete "_WebUIAppEnv_QUERY_ONLY" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_SAML_AUTHNCONTEXT" of client}
	setting delete "_WebUIAppEnv_SAML_AUTHNCONTEXT" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_SAML_ONLY" of client}
	setting delete "_WebUIAppEnv_SAML_ONLY" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_SKIN_DEFAULT_DIR" of client}
	setting delete "_WebUIAppEnv_SKIN_DEFAULT_DIR" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_SKIN_DEFAULT_FILE" of client}
	setting delete "_WebUIAppEnv_SKIN_DEFAULT_FILE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_SSL_PROTOCOL" of client}
	setting delete "_WebUIAppEnv_SSL_PROTOCOL" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_USER_TEXT" of client}
	setting delete "_WebUIAppEnv_USER_TEXT" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_USE_BFENT" of client}
	setting delete "_WebUIAppEnv_USE_BFENT" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_USE_DB_TRIGGERS" of client}
	setting delete "_WebUIAppEnv_USE_DB_TRIGGERS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_UV_THREADPOOL_SIZE" of client}
	setting delete "_WebUIAppEnv_UV_THREADPOOL_SIZE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_WEB_CERT_FILE" of client}
	setting delete "_WebUIAppEnv_WEB_CERT_FILE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_WEB_CIPHERS" of client}
	setting delete "_WebUIAppEnv_WEB_CIPHERS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_WEB_KEY_FILE" of client}
	setting delete "_WebUIAppEnv_WEB_KEY_FILE" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_WORK_DELAY_SECONDS" of client}
	setting delete "_WebUIAppEnv_WORK_DELAY_SECONDS" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_WORK_DIR" of client}
	setting delete "_WebUIAppEnv_WORK_DIR" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUIAppEnv_WebUI_DIR" of client}
	setting delete "_WebUIAppEnv_WebUI_DIR" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_AppServer_HostName" of client}
	setting delete "_WebUI_AppServer_HostName" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_AppServer_IsEnabled" of client}
	setting delete "_WebUI_AppServer_IsEnabled" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_Cryptography_FipsMode" of client}
	setting delete "_WebUI_Cryptography_FipsMode" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_ETL_DelaySeconds" of client}
	setting delete "_WebUI_ETL_DelaySeconds" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_HTTPS_Port" of client}
	setting delete "_WebUI_HTTPS_Port" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_HTTPS_StrictTransportSecurity" of client}
	setting delete "_WebUI_HTTPS_StrictTransportSecurity" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_Logging_Filter" of client}
	setting delete "_WebUI_Logging_Filter" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_Logging_LogMaxSize" of client}
	setting delete "_WebUI_Logging_LogMaxSize" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_Logging_LogPath" of client}
	setting delete "_WebUI_Logging_LogPath" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_Redirect_Enable" of client}
	setting delete "_WebUI_Redirect_Enable" on "{parameter "action issue date"}" for client
endif
if {exists setting "_WebUI_Redirect_Port" of client}
	setting delete "_WebUI_Redirect_Port" on "{parameter "action issue date"}" for client
endif

// Remove any leftovers in the Windows registry
if {windows of operating system}
	parameter "ClientSettingsKey" = "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\BigFix\EnterpriseClient\Settings\Client"

	delete __appendfile
	appendfile Windows Registry Editor Version 5.00

	// Leftover BigFix client settings keys
	appendfile [-{parameter "ClientSettingsKey"}\_BESRelay_WebUISiteGather_Disabled]
	appendfile [-{parameter "ClientSettingsKey"}\_BESRelay_WebUISiteGather_IntervalMinutes]
	appendfile [-{parameter "ClientSettingsKey"}\_BESRelay_WebUISiteGather_Schedule]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_AUTOPATCH_EXPOSE_GC]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_AUTOPATCH_MAX_OLD_SPACE_SIZE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_PORT_MAX]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_PORT_MIN]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_RESTART_DELAY_SECONDS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_SERVER_TIME_DRIFT_THRESHOLD_MINUTES]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_UPDATE_DELAY_DAYS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_APP_UPDATE_ENABLE_AUTO]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ASYNC_DISABLED]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_CACHE_RETRY_LIMIT]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_CACHE_RETRY_TIMEOUT]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_CACHE_TTL]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_DATABASE_POOL_MAX_SIZE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_DATABASE_POOL_SIZE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_DATABASE_QUERY_TIMEOUT_SECONDS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_DEBUG]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_DEPLOYMENT_DOC_REFRESH_RATE_MS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_DEV]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_E2ETEST]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ENABLE_IBMDB_DEBUG]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ENABLE_VERBOSE_CXN_POOL_LOGGING]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ENABLE_WEBUI_METRICS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ETL_DIR]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ETL_STATISTICS_THRESHOLD]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_ETL_STATISTICS_THRESHOLD_TIME]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_FRAMEWORK_DIR]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_LOGIN_CACHE_TTL_HOURS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_LOGIN_SESSION_TIMEOUT_SECONDS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_METRICS_CLEANUP_INTERVAL_MIN]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_METRICS_MAX]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_METRICS_PATH]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_MSSQL_CXN_ENCRYPT]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_PLATFORM_HOST]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_QUERY_ONLY]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_SAML_AUTHNCONTEXT]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_SAML_ONLY]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_SKIN_DEFAULT_DIR]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_SKIN_DEFAULT_FILE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_SSL_PROTOCOL]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_USER_TEXT]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_USE_BFENT]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_USE_DB_TRIGGERS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_UV_THREADPOOL_SIZE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_WEB_CERT_FILE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_WEB_CIPHERS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_WEB_KEY_FILE]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_WORK_DELAY_SECONDS]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_WORK_DIR]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUIAppEnv_WebUI_DIR]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_AppServer_HostName]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_AppServer_IsEnabled]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_Cryptography_FipsMode]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_ETL_DelaySeconds]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_HTTPS_Port]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_HTTPS_StrictTransportSecurity]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_Logging_Filter]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_Logging_LogMaxSize]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_Logging_LogPath]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_Redirect_Enable]
	appendfile [-{parameter "ClientSettingsKey"}\_WebUI_Redirect_Port]

	// Leftover Windows service keys
	appendfile [-HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\BESWebUI]
	appendfile [-HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\BESWebUI]
	appendfile [-HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\BESWebUI]

	// Leftover entries in App Paths
	appendfile [-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\WebUIService.exe]
	appendfile [-HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\App Paths\WebUIService.exe]

	parameter "regFilePath" = "{(client folder of current site as string) & "\deleteBESWebUIService.reg"}"
	delete "{parameter "regFilePath"}"
	move __appendfile "{parameter "regFilePath"}"
	wait "{pathname of system folder}\cmd.exe" /C regedit /S "{parameter "regFilePath"}"
	delete "{parameter "regFilePath"}"
endif
]]></ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
