<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>_Run Foundation Windows2008-CSD</Title>
		<Description><![CDATA[This task will run the endpoint code for Windows2008-CSD and only check Foundation rules. The check fixlets and measured values analyses will automatically update shortly after completion.
				<p><small><b>Version:</b>&nbsp;3.9.0<br><b>Build ID:</b>&nbsp;20190123-2090</small></p><P>----------------------------------------------------------------------------------<BR>Licensed Materials - Property of IBM<BR>(c) Copyright IBM Corp. 2019. All Rights Reserved.</P>
		]]></Description>
		<Relevance>
				
		(
			if exists setting "_GCM_Windows2008-CSD_OSRelevance_Override" whose (value of it != "") of client then (
				true
			)
			else (
				name of operating system as lowercase contains "win2008"
			)
		)
		</Relevance>
		<Relevance><![CDATA[(version of client >= "9.2")]]></Relevance>
		<Relevance>exists file "/HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client</Relevance>
		<Relevance>(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)</Relevance>
		<Relevance><![CDATA[exists file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.AnonFtpIISV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.CIMV2ClassesV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.FileAuditV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.FilePermsV5.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.FileRegPermsV1.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.FileSharingV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.GenericRegistryKeyV3.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.GroupsV4.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.LogSizeV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.NetAccountsV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.NetstatV3.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.OSLevelV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.PwExpiryV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.RegPermsV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.ServicesV4.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.SnmpActiveV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.UserV3.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.any.wwep.TaskSchedulerV3.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.multi.AuditPolicyV4.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.multi.GPOV4.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.multi.KerberosV2.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[exists file "win.multi.PWSCollectorV1.jar" of folder "collectors" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client]]></Relevance>
		<Relevance><![CDATA[
						
		if exist values of settings ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client then
			(if value of setting ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client as string as lowercase = "halted" then False else True)
		else True

		]]></Relevance>
		<Relevance><![CDATA[
						
		if (exists true whose (if true then (exists (if exist values of settings ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client then value of setting ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client else error "not set") whose (it as string as lowercase = "disabled")) else False)) Then True 
		Else
		(if exist values of settings ("GTS_" & (name of current site) & "_GCM_Dates") of client Then
		( if( exists file it ) then (if ((line 1 of file it does not contain ((date (local time zone) of now ) as string)) AND ((exists true whose (if true then (exists (if exist values of settings ("GTS_" & (name of current site) & "_GCM_Dates") of client then value of setting ("GTS_" & (name of current site) & "_GCM_Dates") of client else error "not set") whose ((it as string as lowercase contains (("|" & (day_of_month of it as two digits) & "-" & first 3 of (month of it as string) & "|" ) of date (local time zone) of now) as lowercase) OR (it as string as lowercase contains (("|" & (day_of_month of it as two digits) & "-" & first 3 of (month of it as string) & "-" & year of it as string & "|") of date (local time zone) of now) as lowercase))) else False)))) then True else False) else True) of (pathname of parent folder of parent folder of folder ( pathname of client folder of current site) & "/__GTS/FlagFiles/IEMHC/GCM_" & (name of current site) & "_" & "Windows2008-CSD" & ".txt")
		Else False)
		]]></Relevance>
		<Category>Operating System</Category>
		<Source>GCM</Source>
		<SourceID>3.9.0</SourceID>
		<SourceReleaseDate>2019-01-23</SourceReleaseDate>
		<MIMEField>
			<Name>x-fixlet-ibm-copyright</Name>
			<Value>Licensed Materials - Property of IBM; (c) Copyright IBM Corp. 2019. All Rights Reserved.</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-gcm-author</Name>
			<Value>GTS GCM Team</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-gcm-origin</Name>
			<Value>GTS GCM Team</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-supported-csd-version</Name>
			<Value>4.0C</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-requested-id</Name>
			<Value>31220002</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-gcm-purpose</Name>
			<Value>lifecycle</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Fri, 15 Mar 2019 09:18:17 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy default action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		
if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
	else
	parameter "reportoutput" = ""
endif

if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
else
	parameter "dump" = "-Xdump:none"
endif


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

		appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD" 
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\GCMBigfix_HealthCheck.log"  2>&1
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\GCMBigfix_HealthCheck.log"  2>&1
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
	
	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
		</DefaultAction>
		<Action ID="Action2">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy action without -Xdump:none option.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
else
	parameter "reportoutput" = ""
endif


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD"
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\ecm" /s/h/e/k/f/c/i/y 
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
		</Action>
		<Action ID="Action3">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy action with custom IBM JVM command-line options.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
else
	parameter "reportoutput" = ""
endif

action parameter query "custom_options" with description "Please input the custom IBM JVM command-line options.%0d%0aExample:%0d%0aTo resolve %22java.lang.OutOfMemoryError: Java heap space%22 error, try increase heap space with %22-Xms512m -Xmx1024m%22%0d%0aWARNING: Invalid or inappropriate parameters may result in errors or unpredictable results" and with default value ""


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "custom_options"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "custom_options"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "custom_options"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "custom_options"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
		</Action>
		<Action ID="Action4">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy action with specific rule options.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
	else
	parameter "reportoutput" = ""
endif

if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
else
	parameter "dump" = "-Xdump:none"
endif

action parameter query "rule_value" with description "Please input the rule IDs, rule titles or rule names, separated by commas." and with default value ""


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

]]></ActionScript>
		</Action>
		<Action ID="Action5">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[ to deploy action with <b>S-Check Only</b>.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
	else
	parameter "reportoutput" = ""
endif

if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
else
	parameter "dump" = "-Xdump:none"
endif


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\GCMBigfix_HealthCheck.log"  2>&1
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\GCMBigfix_HealthCheck.log"  2>&1
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/GCMBigfix_HealthCheck.log" 2>&1
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/GCMBigfix_HealthCheck.log" 2>&1
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
		</Action>
		<Action ID="Action6">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[ to deploy action with <b>S-Check Only</b> without -Xdump:none option.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
else
	parameter "reportoutput" = ""
endif


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
		</Action>
		<Action ID="Action7">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[ to deploy action with <b>S-Check Only</b> with custom IBM JVM command-line options.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
else
	parameter "reportoutput" = ""
endif

action parameter query "custom_options" with description "Please input the custom IBM JVM command-line options.%0d%0aExample:%0d%0aTo resolve %22java.lang.OutOfMemoryError: Java heap space%22 error, try increase heap space with %22-Xms512m -Xmx1024m%22%0d%0aWARNING: Invalid or inappropriate parameters may result in errors or unpredictable results" and with default value ""


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "custom_options"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "custom_options"} "{storage folder of client}\__GTS\__IEMHC\HCLauncher_390\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2008-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "custom_options"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "custom_options"} "{storage folder of client}/__GTS/__IEMHC/HCLauncher_390/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2008-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2008-CSD") of storage folder of client is "5544f7b99c983453c8d3d0b146aae5082e6a2c7f6112e1b229ca8009c5a2102e") | false) OR not ((sha2_256 of file "HCLauncher_390/HCLauncher.jar" of folder "__GTS/__IEMHC" of storage folder of client is "49404f6972630aac3dd28117a0f75ec518aecb4c904bd053166da509bf84c0d7") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2008-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
		</Action>
	</Task>
</BES>
