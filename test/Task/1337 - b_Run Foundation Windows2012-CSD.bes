<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>_Run Foundation Windows2012-CSD</Title>
		<Description><![CDATA[This task will run the endpoint code for Windows2012-CSD and only check Foundation rules. The action type "Install only (no scan)" will perform the task of preparing and installing the policy but WILL NOT run any health check on the selected endpoint. Rest all actions will perform the complete health check process i.e. action of Installing the policy and Running the health check scan . The check fixlets and measured values analyses will automatically update shortly after completion. 
<P><SMALL><B>Version:</B>&nbsp;4.0.0<BR><B>Build ID:</B>&nbsp;20190307-2125</SMALL></P>
<P>----------------------------------------------------------------------------------<BR>Licensed Materials - Property of IBM<BR>(c) Copyright IBM Corp. 2019. All Rights Reserved.</P>]]></Description>
		<Relevance>
				
		(
			if exists setting "_GCM_Windows2012-CSD_OSRelevance_Override" whose (value of it != "") of client then (
				true
			)
			else (
				name of operating system as lowercase contains "win7"
			)
		)
		</Relevance>
		<Relevance><![CDATA[(version of client >= "9.2")]]></Relevance>
		<Relevance><![CDATA[
						
		if exist values of settings ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client then
			(if value of setting ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client as string as lowercase = "halted" then False else True)
		else True

		]]></Relevance>
		<Relevance><![CDATA[
						
		if(((not exists settings ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client) or (value of setting ("GTS_GCM_ENHANCED_SCHEDULING_" & (name of current site)) of client as string as lowercase = "disabled"))|false) then True
		Else
		(if exist values of settings ("GTS_" & (name of current site) & "_GCM_Dates") of client Then
		( if( exists file it ) then (if ((line 1 of file it does not contain ((date (local time zone) of now ) as string)) AND ((exists true whose (if true then (exists (if exist values of settings ("GTS_" & (name of current site) & "_GCM_Dates") of client then value of setting ("GTS_" & (name of current site) & "_GCM_Dates") of client else error "not set") whose ((it as string as lowercase contains (("|" & (day_of_month of it as two digits) & "-" & first 3 of (month of it as string) & "|" ) of date (local time zone) of now) as lowercase) OR (it as string as lowercase contains (("|" & (day_of_month of it as two digits) & "-" & first 3 of (month of it as string) & "-" & year of it as string & "|") of date (local time zone) of now) as lowercase))) else False)))) then True else False) else True) of (pathname of parent folder of parent folder of folder ( pathname of client folder of current site) & "/__GTS/FlagFiles/IEMHC/GCM_" & (name of current site) & "_" & "Windows2012-CSD" & ".txt")
		Else False)
		]]></Relevance>
		<Category>Operating System</Category>
		<Source>GCM</Source>
		<SourceID>4.0.0</SourceID>
		<SourceReleaseDate>2019-03-07</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-ibm-copyright</Name>
			<Value>Licensed Materials - Property of IBM; (c) Copyright IBM Corp. 2019. All Rights Reserved.</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-gcm-author</Name>
			<Value>GTS GCM Team</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-gcm-origin</Name>
			<Value>GTS GCM Team</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-supported-csd-version</Name>
			<Value>3.0L</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-requested-id</Name>
			<Value>31230002</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-gcm-purpose</Name>
			<Value>lifecycle</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Wed, 27 Mar 2019 10:35:53 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action to Prepare, Install and Scan the Endpoint.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		
begin prefetch block
	if {exists setting "_GCM_Download_BasePath" whose (value of it != "") of client}
		parameter "basepath" = "{value of setting "_GCM_Download_BasePath" of client}"
	else
		parameter "basepath" = "http://localhost:52311/iemhc/20190307-2125"
	endif
	
	if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
    else
	parameter "dump" = "-Xdump:none"
	endif	
	
	//Start of Prepare endpoint	
	//determine if JRE upgrade is required
		if{(windows of operating system) and (not x64 of operating system)}
	 if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win32" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}" 
     parameter "input_jre_win32" = "80530"
       if{parameter "input_jre_win32" > parameter "downloaded_jre_win32"}
        parameter "jre_download_win32" = "true"
	   add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	   else
		 parameter "jre_download_win32" = "false"	  	
	   endif
	 else
	 parameter "jre_download_win32" = "true"
	 add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip 
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
		
	endif
   endif	
    
  	if{(windows of operating system) and (x64 of operating system)}
	if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win64" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}"
    parameter "input_jre_win64" = "80530"
     if {parameter "input_jre_win64" > parameter "downloaded_jre_win64"}
      parameter "jre_download_win64" = "true"
	   add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	 else
	  parameter "jre_download_win64" = "false"
	endif
	else
	parameter "jre_download_win64" = "true"
	add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	
	endif
 endif	
  	
	// determine if Tools update is needed
parameter "updateTools" = "{not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}"

	// only download HCLauncher if needed
if {parameter "updateTools" as lowercase is "true"}
add prefetch item name=HCLauncher.jar sha1=b8c64af8249e34fe07c4f2ea700916f12f6b6f8c sha256=9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08 size=8886900 url={parameter "basepath"}/400/20190307-2125/HCLauncher/HCLauncher.jar
endif

add prefetch item name=policy.xml sha1=7d3afbef54830bc737cd0e7970835bfcfbe44b23 sha256=b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587 size=343498 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/policy.xml

add prefetch item name=Collectors.zip sha1=7752cd4ca86ebb48f03c6598c0f38a2fb21fe7c3 sha256=4b824ff826f6b50fbcbd90f511d37373ae93e056f2783946e9183d4fe3a714ba size=6255876 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/Collectors.zip

add prefetch item name=RemediationScript.zip sha1=306a9a36b605db4b7ba922c38b706b54f0e9995d sha256=70fd3f53e5948b09669015fca363e5acd1ffdd32d041c7c43fa572160cbc7aaa size=169521 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/RemediationScript.zip

add prefetch item name=cuz.jar sha1=76dd952a93b4bbda50511acff681d6805487baa7 sha256=ce2147227f5822c3e9a4e7909bf4178ea8299de3d6e9c118e813c85e53492caa size=179698 url={parameter "basepath"}/400/20190307-2125/tools/cuz.jar

end prefetch block

parameter "build_id" = "20190307-2125"
parameter "version" = "4.0.0"

//extract the JRE
   if{(windows of operating system) and (not x64 of operating system)}
    if {parameter "jre_download_win32" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


	wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-i386.zip" -d "{storage folder of client}\__GTS"
	appendfile 7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393
	 //JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

	 
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

  endif
 endif 

 if{(windows of operating system) and (x64 of operating system)}
   if{parameter "jre_download_win64" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


    wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-x86_64.zip" -d "{storage folder of client}\__GTS"    
  	appendfile 6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea
  	//JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

  	
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

   endif
  endif 

// clean up the work folder
folder delete "{storage folder of client}/__GTS/Temp"

folder create "{storage folder of client}/__GTS/__UIDEXT"
folder create "{storage folder of client}/__GTS/__IEMHC"

if {parameter "updateTools" as lowercase is "true"}
// clean and add the HCLauncher.jar
folder delete "{storage folder of client}/__GTS/__IEMHC/HCLauncher"
folder delete "{storage folder of client}/__GTS/HCLauncher_400"
folder create "{storage folder of client}/__GTS/HCLauncher_400"

copy "{client folder of current site}/__Download/HCLauncher.jar" "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar"

appendfile Bigfix buildID: {parameter "build_id"}
move __appendfile "{storage folder of client}/__GTS/HCLauncher_400/version.txt"

//HCLauncher version .txt
if{windows of operating system}
 appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -version >> "{storage folder of client}\__GTS\HCLauncher_400\version.txt" 2>&1 
 delete launch.bat
 move __appendfile launch.bat
 wait launch.bat
else
 appendfile #!/bin/sh
 appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -version >> "{storage folder of client}/__GTS/HCLauncher_400/version.txt" 2>&1
 delete launch.sh
 move __appendfile launch.sh
 wait chmod 750 launch.sh
 wait "{client folder of current site}/launch.sh"
 endif
endif



//End of Prepare Endpoint

//Start of Install policy

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/policy_parameters.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/localpolicy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/localpolicy.xml"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "freshness.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/freshness.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/freshness.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault"
endif
if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
endif

folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"

//moving vault folder
if{exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD_backup") of storage folder of client|false}
move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault"
endif

copy "{client folder of current site}/__Download/policy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml"

// unzip the Collectors.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\Collectors.zip" 	
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/Collectors.zip"	
endif

// unzip the RemediationScript.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\RemediationScript.zip" RemediationScript
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/RemediationScript.zip" RemediationScript
endif

if {exit code of action != 0}
exit {exit code of action}
endif

// create version.txt
appendfile {now as string}
appendfile Windows-2012-CSD-3.0L
appendfile {parameter "version"}
appendfile {parameter "build_id"}
delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"
move __appendfile "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"

// Set the GTS_GCM_Enhanched_Scheduling_<site name> setting to DISABLED if the setting is empty or does not exists AND there is no GTS_<site name>_GCM_Dates setting
if {( (not exists setting ("GTS_GCM_ENHANCED_SCHEDULING_"&(name of current site)) whose (value of it != "") of client) AND ((not exists values of setting ("GTS_"&(name of current site)&"_GCM_Dates") of client)|True) )}
	setting "GTS_GCM_ENHANCED_SCHEDULING_{name of current site}"="DISABLED" on "{date (local time zone) of now & time (local time zone) of now}" for client
endif

//End of Install Policy

parameter "customJVM" = ""
parameter "xdump_check"     = ""

if "{(exists lines of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|false}"
	parameter "customJVM"   = "{(line 1 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
	parameter "xdump_check" = "{(line 2 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
    if {parameter "xdump_check" as lowercase is "no"}
        parameter "dump" = ""
    endif
endif




if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
	else
	parameter "reportoutput" = ""
endif


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy"
		endif
	endif

		appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" 
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\GCMBigfix_HealthCheck.log"  2>&1
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\GCMBigfix_HealthCheck.log"  2>&1
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
	
	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2012-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</DefaultAction>
		<Action ID="Action2">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy action to Prepare, Install and Scan with specific rule options.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		
begin prefetch block
	if {exists setting "_GCM_Download_BasePath" whose (value of it != "") of client}
		parameter "basepath" = "{value of setting "_GCM_Download_BasePath" of client}"
	else
		parameter "basepath" = "http://localhost:52311/iemhc/20190307-2125"
	endif
	
	if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
    else
	parameter "dump" = "-Xdump:none"
	endif	
	
	//Start of Prepare endpoint	
	//determine if JRE upgrade is required
		if{(windows of operating system) and (not x64 of operating system)}
	 if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win32" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}" 
     parameter "input_jre_win32" = "80530"
       if{parameter "input_jre_win32" > parameter "downloaded_jre_win32"}
        parameter "jre_download_win32" = "true"
	   add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	   else
		 parameter "jre_download_win32" = "false"	  	
	   endif
	 else
	 parameter "jre_download_win32" = "true"
	 add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip 
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
		
	endif
   endif	
    
  	if{(windows of operating system) and (x64 of operating system)}
	if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win64" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}"
    parameter "input_jre_win64" = "80530"
     if {parameter "input_jre_win64" > parameter "downloaded_jre_win64"}
      parameter "jre_download_win64" = "true"
	   add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	 else
	  parameter "jre_download_win64" = "false"
	endif
	else
	parameter "jre_download_win64" = "true"
	add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	
	endif
 endif	
  	
	// determine if Tools update is needed
parameter "updateTools" = "{not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}"

	// only download HCLauncher if needed
if {parameter "updateTools" as lowercase is "true"}
add prefetch item name=HCLauncher.jar sha1=b8c64af8249e34fe07c4f2ea700916f12f6b6f8c sha256=9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08 size=8886900 url={parameter "basepath"}/400/20190307-2125/HCLauncher/HCLauncher.jar
endif

add prefetch item name=policy.xml sha1=7d3afbef54830bc737cd0e7970835bfcfbe44b23 sha256=b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587 size=343498 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/policy.xml

add prefetch item name=Collectors.zip sha1=7752cd4ca86ebb48f03c6598c0f38a2fb21fe7c3 sha256=4b824ff826f6b50fbcbd90f511d37373ae93e056f2783946e9183d4fe3a714ba size=6255876 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/Collectors.zip

add prefetch item name=RemediationScript.zip sha1=306a9a36b605db4b7ba922c38b706b54f0e9995d sha256=70fd3f53e5948b09669015fca363e5acd1ffdd32d041c7c43fa572160cbc7aaa size=169521 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/RemediationScript.zip

add prefetch item name=cuz.jar sha1=76dd952a93b4bbda50511acff681d6805487baa7 sha256=ce2147227f5822c3e9a4e7909bf4178ea8299de3d6e9c118e813c85e53492caa size=179698 url={parameter "basepath"}/400/20190307-2125/tools/cuz.jar

end prefetch block

parameter "build_id" = "20190307-2125"
parameter "version" = "4.0.0"

//extract the JRE
   if{(windows of operating system) and (not x64 of operating system)}
    if {parameter "jre_download_win32" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


	wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-i386.zip" -d "{storage folder of client}\__GTS"
	appendfile 7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393
	 //JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

	 
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

  endif
 endif 

 if{(windows of operating system) and (x64 of operating system)}
   if{parameter "jre_download_win64" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


    wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-x86_64.zip" -d "{storage folder of client}\__GTS"    
  	appendfile 6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea
  	//JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

  	
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

   endif
  endif 

// clean up the work folder
folder delete "{storage folder of client}/__GTS/Temp"

folder create "{storage folder of client}/__GTS/__UIDEXT"
folder create "{storage folder of client}/__GTS/__IEMHC"

if {parameter "updateTools" as lowercase is "true"}
// clean and add the HCLauncher.jar
folder delete "{storage folder of client}/__GTS/__IEMHC/HCLauncher"
folder delete "{storage folder of client}/__GTS/HCLauncher_400"
folder create "{storage folder of client}/__GTS/HCLauncher_400"

copy "{client folder of current site}/__Download/HCLauncher.jar" "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar"

appendfile Bigfix buildID: {parameter "build_id"}
move __appendfile "{storage folder of client}/__GTS/HCLauncher_400/version.txt"

//HCLauncher version .txt
if{windows of operating system}
 appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -version >> "{storage folder of client}\__GTS\HCLauncher_400\version.txt" 2>&1 
 delete launch.bat
 move __appendfile launch.bat
 wait launch.bat
else
 appendfile #!/bin/sh
 appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -version >> "{storage folder of client}/__GTS/HCLauncher_400/version.txt" 2>&1
 delete launch.sh
 move __appendfile launch.sh
 wait chmod 750 launch.sh
 wait "{client folder of current site}/launch.sh"
 endif
endif



//End of Prepare Endpoint

//Start of Install policy

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/policy_parameters.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/localpolicy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/localpolicy.xml"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "freshness.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/freshness.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/freshness.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault"
endif
if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
endif

folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"

//moving vault folder
if{exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD_backup") of storage folder of client|false}
move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault"
endif

copy "{client folder of current site}/__Download/policy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml"

// unzip the Collectors.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\Collectors.zip" 	
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/Collectors.zip"	
endif

// unzip the RemediationScript.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\RemediationScript.zip" RemediationScript
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/RemediationScript.zip" RemediationScript
endif

if {exit code of action != 0}
exit {exit code of action}
endif

// create version.txt
appendfile {now as string}
appendfile Windows-2012-CSD-3.0L
appendfile {parameter "version"}
appendfile {parameter "build_id"}
delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"
move __appendfile "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"

// Set the GTS_GCM_Enhanched_Scheduling_<site name> setting to DISABLED if the setting is empty or does not exists AND there is no GTS_<site name>_GCM_Dates setting
if {( (not exists setting ("GTS_GCM_ENHANCED_SCHEDULING_"&(name of current site)) whose (value of it != "") of client) AND ((not exists values of setting ("GTS_"&(name of current site)&"_GCM_Dates") of client)|True) )}
	setting "GTS_GCM_ENHANCED_SCHEDULING_{name of current site}"="DISABLED" on "{date (local time zone) of now & time (local time zone) of now}" for client
endif

//End of Install Policy

parameter "customJVM" = ""
parameter "xdump_check"     = ""

if "{(exists lines of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|false}"
	parameter "customJVM"   = "{(line 1 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
	parameter "xdump_check" = "{(line 2 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
    if {parameter "xdump_check" as lowercase is "no"}
        parameter "dump" = ""
    endif
endif



if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
	else
	parameter "reportoutput" = ""
endif

action parameter query "rule_value" with description "Please input the rule IDs, rule titles or rule names, separated by commas." and with default value ""


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml" -rule {parameter "rule_value"} -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2012-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</Action>
		<Action ID="Action3">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[ to deploy action to Prepare, Install and Scan with <B>S-Check Only</B>.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		
begin prefetch block
	if {exists setting "_GCM_Download_BasePath" whose (value of it != "") of client}
		parameter "basepath" = "{value of setting "_GCM_Download_BasePath" of client}"
	else
		parameter "basepath" = "http://localhost:52311/iemhc/20190307-2125"
	endif
	
	if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
    else
	parameter "dump" = "-Xdump:none"
	endif	
	
	//Start of Prepare endpoint	
	//determine if JRE upgrade is required
		if{(windows of operating system) and (not x64 of operating system)}
	 if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win32" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}" 
     parameter "input_jre_win32" = "80530"
       if{parameter "input_jre_win32" > parameter "downloaded_jre_win32"}
        parameter "jre_download_win32" = "true"
	   add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	   else
		 parameter "jre_download_win32" = "false"	  	
	   endif
	 else
	 parameter "jre_download_win32" = "true"
	 add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip 
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
		
	endif
   endif	
    
  	if{(windows of operating system) and (x64 of operating system)}
	if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win64" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}"
    parameter "input_jre_win64" = "80530"
     if {parameter "input_jre_win64" > parameter "downloaded_jre_win64"}
      parameter "jre_download_win64" = "true"
	   add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	 else
	  parameter "jre_download_win64" = "false"
	endif
	else
	parameter "jre_download_win64" = "true"
	add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	
	endif
 endif	
  	
	// determine if Tools update is needed
parameter "updateTools" = "{not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}"

	// only download HCLauncher if needed
if {parameter "updateTools" as lowercase is "true"}
add prefetch item name=HCLauncher.jar sha1=b8c64af8249e34fe07c4f2ea700916f12f6b6f8c sha256=9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08 size=8886900 url={parameter "basepath"}/400/20190307-2125/HCLauncher/HCLauncher.jar
endif

add prefetch item name=policy.xml sha1=7d3afbef54830bc737cd0e7970835bfcfbe44b23 sha256=b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587 size=343498 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/policy.xml

add prefetch item name=Collectors.zip sha1=7752cd4ca86ebb48f03c6598c0f38a2fb21fe7c3 sha256=4b824ff826f6b50fbcbd90f511d37373ae93e056f2783946e9183d4fe3a714ba size=6255876 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/Collectors.zip

add prefetch item name=RemediationScript.zip sha1=306a9a36b605db4b7ba922c38b706b54f0e9995d sha256=70fd3f53e5948b09669015fca363e5acd1ffdd32d041c7c43fa572160cbc7aaa size=169521 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/RemediationScript.zip

add prefetch item name=cuz.jar sha1=76dd952a93b4bbda50511acff681d6805487baa7 sha256=ce2147227f5822c3e9a4e7909bf4178ea8299de3d6e9c118e813c85e53492caa size=179698 url={parameter "basepath"}/400/20190307-2125/tools/cuz.jar

end prefetch block

parameter "build_id" = "20190307-2125"
parameter "version" = "4.0.0"

//extract the JRE
   if{(windows of operating system) and (not x64 of operating system)}
    if {parameter "jre_download_win32" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


	wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-i386.zip" -d "{storage folder of client}\__GTS"
	appendfile 7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393
	 //JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

	 
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

  endif
 endif 

 if{(windows of operating system) and (x64 of operating system)}
   if{parameter "jre_download_win64" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


    wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-x86_64.zip" -d "{storage folder of client}\__GTS"    
  	appendfile 6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea
  	//JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

  	
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

   endif
  endif 

// clean up the work folder
folder delete "{storage folder of client}/__GTS/Temp"

folder create "{storage folder of client}/__GTS/__UIDEXT"
folder create "{storage folder of client}/__GTS/__IEMHC"

if {parameter "updateTools" as lowercase is "true"}
// clean and add the HCLauncher.jar
folder delete "{storage folder of client}/__GTS/__IEMHC/HCLauncher"
folder delete "{storage folder of client}/__GTS/HCLauncher_400"
folder create "{storage folder of client}/__GTS/HCLauncher_400"

copy "{client folder of current site}/__Download/HCLauncher.jar" "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar"

appendfile Bigfix buildID: {parameter "build_id"}
move __appendfile "{storage folder of client}/__GTS/HCLauncher_400/version.txt"

//HCLauncher version .txt
if{windows of operating system}
 appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -version >> "{storage folder of client}\__GTS\HCLauncher_400\version.txt" 2>&1 
 delete launch.bat
 move __appendfile launch.bat
 wait launch.bat
else
 appendfile #!/bin/sh
 appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -version >> "{storage folder of client}/__GTS/HCLauncher_400/version.txt" 2>&1
 delete launch.sh
 move __appendfile launch.sh
 wait chmod 750 launch.sh
 wait "{client folder of current site}/launch.sh"
 endif
endif



//End of Prepare Endpoint

//Start of Install policy

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/policy_parameters.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/localpolicy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/localpolicy.xml"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "freshness.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/freshness.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/freshness.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault"
endif
if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
endif

folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"

//moving vault folder
if{exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD_backup") of storage folder of client|false}
move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault"
endif

copy "{client folder of current site}/__Download/policy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml"

// unzip the Collectors.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\Collectors.zip" 	
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/Collectors.zip"	
endif

// unzip the RemediationScript.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\RemediationScript.zip" RemediationScript
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/RemediationScript.zip" RemediationScript
endif

if {exit code of action != 0}
exit {exit code of action}
endif

// create version.txt
appendfile {now as string}
appendfile Windows-2012-CSD-3.0L
appendfile {parameter "version"}
appendfile {parameter "build_id"}
delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"
move __appendfile "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"

// Set the GTS_GCM_Enhanched_Scheduling_<site name> setting to DISABLED if the setting is empty or does not exists AND there is no GTS_<site name>_GCM_Dates setting
if {( (not exists setting ("GTS_GCM_ENHANCED_SCHEDULING_"&(name of current site)) whose (value of it != "") of client) AND ((not exists values of setting ("GTS_"&(name of current site)&"_GCM_Dates") of client)|True) )}
	setting "GTS_GCM_ENHANCED_SCHEDULING_{name of current site}"="DISABLED" on "{date (local time zone) of now & time (local time zone) of now}" for client
endif

//End of Install Policy

parameter "customJVM" = ""
parameter "xdump_check"     = ""
if "{(exists lines of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|false}"
	parameter "customJVM"   = "{(line 1 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
	parameter "xdump_check" = "{(line 2 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
    if {parameter "xdump_check" as lowercase is "no"}
        parameter "dump" = ""
    endif
endif



if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
	else
	parameter "reportoutput" = ""
endif


if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\GCMBigfix_HealthCheck.log"  2>&1
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\GCMBigfix_HealthCheck.log"  2>&1
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/GCMBigfix_HealthCheck.log" 2>&1
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml" -Scheck -found  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"} > "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/GCMBigfix_HealthCheck.log" 2>&1
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2012-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</Action>
		<Action ID="Action4">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[to deploy action to Prepare, Install and Scan with <B>GDPR</B>.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		
begin prefetch block
	if {exists setting "_GCM_Download_BasePath" whose (value of it != "") of client}
		parameter "basepath" = "{value of setting "_GCM_Download_BasePath" of client}"
	else
		parameter "basepath" = "http://localhost:52311/iemhc/20190307-2125"
	endif
	
	if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
    else
	parameter "dump" = "-Xdump:none"
	endif	
	
	//Start of Prepare endpoint	
	//determine if JRE upgrade is required
		if{(windows of operating system) and (not x64 of operating system)}
	 if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win32" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}" 
     parameter "input_jre_win32" = "80530"
       if{parameter "input_jre_win32" > parameter "downloaded_jre_win32"}
        parameter "jre_download_win32" = "true"
	   add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	   else
		 parameter "jre_download_win32" = "false"	  	
	   endif
	 else
	 parameter "jre_download_win32" = "true"
	 add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip 
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
		
	endif
   endif	
    
  	if{(windows of operating system) and (x64 of operating system)}
	if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win64" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}"
    parameter "input_jre_win64" = "80530"
     if {parameter "input_jre_win64" > parameter "downloaded_jre_win64"}
      parameter "jre_download_win64" = "true"
	   add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	 else
	  parameter "jre_download_win64" = "false"
	endif
	else
	parameter "jre_download_win64" = "true"
	add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	
	endif
 endif	
  	
	// determine if Tools update is needed
parameter "updateTools" = "{not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}"

	// only download HCLauncher if needed
if {parameter "updateTools" as lowercase is "true"}
add prefetch item name=HCLauncher.jar sha1=b8c64af8249e34fe07c4f2ea700916f12f6b6f8c sha256=9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08 size=8886900 url={parameter "basepath"}/400/20190307-2125/HCLauncher/HCLauncher.jar
endif

add prefetch item name=policy.xml sha1=7d3afbef54830bc737cd0e7970835bfcfbe44b23 sha256=b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587 size=343498 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/policy.xml

add prefetch item name=Collectors.zip sha1=7752cd4ca86ebb48f03c6598c0f38a2fb21fe7c3 sha256=4b824ff826f6b50fbcbd90f511d37373ae93e056f2783946e9183d4fe3a714ba size=6255876 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/Collectors.zip

add prefetch item name=RemediationScript.zip sha1=306a9a36b605db4b7ba922c38b706b54f0e9995d sha256=70fd3f53e5948b09669015fca363e5acd1ffdd32d041c7c43fa572160cbc7aaa size=169521 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/RemediationScript.zip

add prefetch item name=cuz.jar sha1=76dd952a93b4bbda50511acff681d6805487baa7 sha256=ce2147227f5822c3e9a4e7909bf4178ea8299de3d6e9c118e813c85e53492caa size=179698 url={parameter "basepath"}/400/20190307-2125/tools/cuz.jar

end prefetch block

parameter "build_id" = "20190307-2125"
parameter "version" = "4.0.0"

//extract the JRE
   if{(windows of operating system) and (not x64 of operating system)}
    if {parameter "jre_download_win32" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


	wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-i386.zip" -d "{storage folder of client}\__GTS"
	appendfile 7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393
	 //JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

	 
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

  endif
 endif 

 if{(windows of operating system) and (x64 of operating system)}
   if{parameter "jre_download_win64" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


    wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-x86_64.zip" -d "{storage folder of client}\__GTS"    
  	appendfile 6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea
  	//JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

  	
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

   endif
  endif 

// clean up the work folder
folder delete "{storage folder of client}/__GTS/Temp"

folder create "{storage folder of client}/__GTS/__UIDEXT"
folder create "{storage folder of client}/__GTS/__IEMHC"

if {parameter "updateTools" as lowercase is "true"}
// clean and add the HCLauncher.jar
folder delete "{storage folder of client}/__GTS/__IEMHC/HCLauncher"
folder delete "{storage folder of client}/__GTS/HCLauncher_400"
folder create "{storage folder of client}/__GTS/HCLauncher_400"

copy "{client folder of current site}/__Download/HCLauncher.jar" "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar"

appendfile Bigfix buildID: {parameter "build_id"}
move __appendfile "{storage folder of client}/__GTS/HCLauncher_400/version.txt"

//HCLauncher version .txt
if{windows of operating system}
 appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -version >> "{storage folder of client}\__GTS\HCLauncher_400\version.txt" 2>&1 
 delete launch.bat
 move __appendfile launch.bat
 wait launch.bat
else
 appendfile #!/bin/sh
 appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -version >> "{storage folder of client}/__GTS/HCLauncher_400/version.txt" 2>&1
 delete launch.sh
 move __appendfile launch.sh
 wait chmod 750 launch.sh
 wait "{client folder of current site}/launch.sh"
 endif
endif



//End of Prepare Endpoint

//Start of Install policy

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/policy_parameters.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/localpolicy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/localpolicy.xml"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "freshness.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/freshness.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/freshness.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault"
endif
if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
endif

folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"

//moving vault folder
if{exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD_backup") of storage folder of client|false}
move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault"
endif

copy "{client folder of current site}/__Download/policy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml"

// unzip the Collectors.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\Collectors.zip" 	
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/Collectors.zip"	
endif

// unzip the RemediationScript.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\RemediationScript.zip" RemediationScript
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/RemediationScript.zip" RemediationScript
endif

if {exit code of action != 0}
exit {exit code of action}
endif

// create version.txt
appendfile {now as string}
appendfile Windows-2012-CSD-3.0L
appendfile {parameter "version"}
appendfile {parameter "build_id"}
delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"
move __appendfile "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"

// Set the GTS_GCM_Enhanched_Scheduling_<site name> setting to DISABLED if the setting is empty or does not exists AND there is no GTS_<site name>_GCM_Dates setting
if {( (not exists setting ("GTS_GCM_ENHANCED_SCHEDULING_"&(name of current site)) whose (value of it != "") of client) AND ((not exists values of setting ("GTS_"&(name of current site)&"_GCM_Dates") of client)|True) )}
	setting "GTS_GCM_ENHANCED_SCHEDULING_{name of current site}"="DISABLED" on "{date (local time zone) of now & time (local time zone) of now}" for client
endif

//End of Install Policy

parameter "customJVM" = ""
parameter "xdump_check"     = ""
if "{(exists lines of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|false}"
	parameter "customJVM"   = "{(line 1 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
	parameter "xdump_check" = "{(line 2 of file "gcm_config.txt" of folder "__GTS" of storage folder of client)|""}"
    if {parameter "xdump_check" as lowercase is "no"}
        parameter "dump" = ""
    endif
endif



if {exists setting "_GCM_HCLauncher_Report" whose (value of it != "") of client}
	parameter "reportoutput" = "-report"
else
	parameter "reportoutput" = ""
endif

	
if {exists setting "_GCM_HCLauncher_Limit" whose (value of it != "") of client}
	parameter "limitOutput" = "{(it as string as integer | 10000) of value of setting "_GCM_HCLauncher_Limit" of client}"
else
	parameter "limitOutput" = "10000"
endif

if {exists setting "_GCM_HCLauncher_Truncate" whose (value of it != "") of client}
	parameter "truncateOutput" = "{(it as string as integer | 500) of value of setting "_GCM_HCLauncher_Truncate" of client}"
else
	parameter "truncateOutput" = "500"
endif


if {exists setting "_GCM_HCLauncher_Debug" whose (value of it != "") of client}
	parameter "debug" = "-llevel DEBUG"
else
	parameter "debug" = ""
endif

if {exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	parameter "localpolparm" = "-localpolicy"
else
	parameter "localpolparm" = ""
endif

	if {exists file "policy_result.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_result.xml"
		else
			delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_result.xml"
		endif
	endif
	
	if {exists folder "policy" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
		if {windows of operating system}
			folder delete "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy"
		else
			folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy"
		endif
	endif

if {windows of operating system}
	appendfile {name of drive of storage folder of client}
	appendfile cd "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" 
	appendfile xcopy "{storage folder of client}\__GTS\__IEMHC\ecm" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\ecm" /s/h/e/k/f/c/i/y
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -found -audit gdpr  {parameter "localpolparm"} -pparams "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -policy "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD\policy.xml" -found -audit gdpr  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		delete launch.bat
	move __appendfile launch.bat
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait launch.bat
	if {exit code of action != 0}
	exit {exit code of action}
	endif
else
	appendfile #!/bin/sh
	appendfile cd "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
	appendfile cp -R "{storage folder of client}/__GTS/__IEMHC/ecm" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
	
			if {exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
			// launch with external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml" -Scheck -found -audit gdpr  {parameter "localpolparm"} -pparams "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		else
			// launch without external parameters
			appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "customJVM"} {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -policy "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml" -Scheck -found -audit gdpr  {parameter "localpolparm"} -sv {parameter "reportoutput"} {parameter "debug"} -truncate {parameter "truncateOutput"} -limit {parameter "limitOutput"}
		endif
		
	delete launch.sh
	move __appendfile launch.sh
	wait chmod 750 launch.sh
					
	if {not ((sha2_256 of file "policy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client is "b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587") | false) OR not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}
	// SHA256 mismatch, policy.xml, HCLauncher.jar or remediationScript is being tampered
	// Run _Update Fixlet to get update version
		exit 666
	endif
	wait "{client folder of current site}/launch.sh"
	if {exit code of action != 0}
	exit {exit code of action}
	endif
endif

	// ================================================================
// =  ADDED TO WRITE FILE WITH LAST HEALTH CHECK RUN DATE & TIME  =
// ================================================================

// Set this parameter to the name of the fixlet
parameter "GTS_GCM_Current_Fixlet_Name" = "Windows2012-CSD"

parameter "GTS_GCM_GTS_Folder" = "{pathname of parent folder of parent folder of folder ( pathname of client folder of current site)}/__GTS"
parameter "GTS_GCM_FlagFiles_Folder" = "{parameter "GTS_GCM_GTS_Folder"}/FlagFiles"
parameter "GTS_GCM_IEMHC_Folder" = "{parameter "GTS_GCM_FlagFiles_Folder"}/IEMHC"
parameter "GTS_GCM_LastRunFile" = "GCM_{(name of current site)}_{parameter "GTS_GCM_Current_Fixlet_Name" of action}.txt"
parameter "GTS_GCM_ReadMeFile" = "ReadMe.txt"

// Windows create folder structure (if missing)
if {name of operating system as lowercase starts with "win"}
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		dos mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		dos mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		dos mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

else  // Unix create folder structure (if missing)
	if {not exists folder (parameter "GTS_GCM_GTS_Folder")}
		wait mkdir "{parameter "GTS_GCM_GTS_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_FlagFiles_Folder")}
		wait mkdir "{parameter "GTS_GCM_FlagFiles_Folder"}"
    endif
	if {not exists folder (parameter "GTS_GCM_IEMHC_Folder")}
		wait mkdir "{parameter "GTS_GCM_IEMHC_Folder"}"
    endif

endif

//====================================================================
// Now the __GTS/FlagFiles/IEMHC folder structure is in place
// Place a ReadMe.txt file explaining about the purpose of this folder
//  and files and how it can be used (if not already present)
if {not exists file (parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile" of action)}
	delete __createfile
	createfile until EOF
		This is a BigFix IEMHC directory that contains 'GCM_<site name>_<fixlet name>.txt' files.
		Each file contains the date and time of the last run of the Health Check fixlet in that site

		If you want BigFix to perform a new Health Check and :
		1. you want to run only specific Health Check(s): delete the file(s) for the that site and fixlet.
		2. you want to run ALL Health Checks: delete the IEMHC directory (or all files in it).

		As soon as the IEMHC(s) is performed successfully the following will be recreated (if needed):
		- the IEMHC directory.
		- this ReadMe file.
		- for each site and fixlet file that was deleted the GCM_<site name>_<fixlet name>.txt file.
	EOF
	move __createfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_ReadMeFile"}"

endif


//====================================================================
// Write a file with the name of the site and the fixlet and
// write the current date and time in the file

delete __appendfile
appendfile {date (local time zone) of now & time (local time zone) of now}
delete "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"
move __appendfile "{parameter "GTS_GCM_IEMHC_Folder" & "/" & parameter "GTS_GCM_LastRunFile"}"

	]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</Action>
		<Action ID="Action5">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[ to deploy this action Prepare and Install only <B>(no scan)</B>.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
		// Licensed Materials - Property of IBM; (c) Copyright IBM Corporation 2019. All Rights Reserved.
		
begin prefetch block
	if {exists setting "_GCM_Download_BasePath" whose (value of it != "") of client}
		parameter "basepath" = "{value of setting "_GCM_Download_BasePath" of client}"
	else
		parameter "basepath" = "http://localhost:52311/iemhc/20190307-2125"
	endif
	
	if {name of operating system as lowercase contains "sunos" OR name of operating system as lowercase contains "hp-ux"}
	parameter "dump" = ""
    else
	parameter "dump" = "-Xdump:none"
	endif	
	
	//Start of Prepare endpoint	
	//determine if JRE upgrade is required
		if{(windows of operating system) and (not x64 of operating system)}
	 if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win32" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}" 
     parameter "input_jre_win32" = "80530"
       if{parameter "input_jre_win32" > parameter "downloaded_jre_win32"}
        parameter "jre_download_win32" = "true"
	   add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	   else
		 parameter "jre_download_win32" = "false"	  	
	   endif
	 else
	 parameter "jre_download_win32" = "true"
	 add prefetch item name=ibm-java-jre-80-win-i386.zip sha1=ca5823cf252a7c2e1a5e4a349071379765c28a3f sha256=7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393 size=144796382 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-i386.zip 
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
		
	endif
   endif	
    
  	if{(windows of operating system) and (x64 of operating system)}
	if{exists file "version.txt" of folder "__GTS" of storage folder of client}
    parameter "downloaded_jre_win64" = "{first matches (regex "\d\d\d\d\d") of (concatenation of substrings separated by "." of line 5 of file "version.txt" of folder "__GTS" of storage folder of client) as integer}"
    parameter "input_jre_win64" = "80530"
     if {parameter "input_jre_win64" > parameter "downloaded_jre_win64"}
      parameter "jre_download_win64" = "true"
	   add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	   add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	 else
	  parameter "jre_download_win64" = "false"
	endif
	else
	parameter "jre_download_win64" = "true"
	add prefetch item name=ibm-java-jre-80-win-x86_64.zip sha1=1f99a4cfbfe957a5919d76f3056897a5c188a63c sha256=6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea size=173347247 url={parameter "basepath"}/jre/80530/ibm-java-jre-80-win-x86_64.zip
	add prefetch item name=unzip.exe sha1=84debf12767785cd9b43811022407de7413beb6f sha256=2122557d350fd1c59fb0ef32125330bde673e9331eb9371b454c2ad2d82091ac size=204800 url={parameter "basepath"}/400/20190307-2125/tools/unzip.exe
	
	endif
 endif	
  	
	// determine if Tools update is needed
parameter "updateTools" = "{not ((sha2_256 of file "HCLauncher_400/HCLauncher.jar" of folder "__GTS" of storage folder of client is "9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08") | false)}"

	// only download HCLauncher if needed
if {parameter "updateTools" as lowercase is "true"}
add prefetch item name=HCLauncher.jar sha1=b8c64af8249e34fe07c4f2ea700916f12f6b6f8c sha256=9c7e489131cf1485d389936a0119ec8b19f7a84c3db151bc1d2401ce5d30ab08 size=8886900 url={parameter "basepath"}/400/20190307-2125/HCLauncher/HCLauncher.jar
endif

add prefetch item name=policy.xml sha1=7d3afbef54830bc737cd0e7970835bfcfbe44b23 sha256=b49b939c04699c57b2712adef615a338bacd4d80b8a4e33e76d721e05e036587 size=343498 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/policy.xml

add prefetch item name=Collectors.zip sha1=7752cd4ca86ebb48f03c6598c0f38a2fb21fe7c3 sha256=4b824ff826f6b50fbcbd90f511d37373ae93e056f2783946e9183d4fe3a714ba size=6255876 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/Collectors.zip

add prefetch item name=RemediationScript.zip sha1=306a9a36b605db4b7ba922c38b706b54f0e9995d sha256=70fd3f53e5948b09669015fca363e5acd1ffdd32d041c7c43fa572160cbc7aaa size=169521 url={parameter "basepath"}/400/20190307-2125/Windows/Windows.2012.CSD/RemediationScript.zip

add prefetch item name=cuz.jar sha1=76dd952a93b4bbda50511acff681d6805487baa7 sha256=ce2147227f5822c3e9a4e7909bf4178ea8299de3d6e9c118e813c85e53492caa size=179698 url={parameter "basepath"}/400/20190307-2125/tools/cuz.jar

end prefetch block

parameter "build_id" = "20190307-2125"
parameter "version" = "4.0.0"

//extract the JRE
   if{(windows of operating system) and (not x64 of operating system)}
    if {parameter "jre_download_win32" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


	wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-i386.zip" -d "{storage folder of client}\__GTS"
	appendfile 7bb64dee6663127b51c5decf2f98cf90be722e81fe1397dca2136917d9e70393
	 //JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

	 
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

  endif
 endif 

 if{(windows of operating system) and (x64 of operating system)}
   if{parameter "jre_download_win64" as lowercase is "true"}
     
// clean the JRE location
delete "{storage folder of client}/__GTS/__IEMHC/license_en.txt"
delete "{storage folder of client}/__GTS/__IEMHC/notices.txt"
delete "{storage folder of client}/__GTS/__IEMHC/readme.txt"
delete "{storage folder of client}/__GTS/__IEMHC/version.txt"
delete "{storage folder of client}/__GTS/__IEMHC/copyright"
folder delete "{storage folder of client}/__GTS/__IEMHC/docs"
folder delete "{storage folder of client}/__GTS/__IEMHC/properties"
folder delete "{storage folder of client}/__GTS/jre"
folder delete "{storage folder of client}/__GTS/__IEMHC/jre"
folder delete "{storage folder of client}/__GTS/Temp"
folder create "{storage folder of client}/__GTS/Temp"


    wait "{client folder of current site}\__Download\unzip.exe" -o "{client folder of current site}\__Download\ibm-java-jre-80-win-x86_64.zip" -d "{storage folder of client}\__GTS"    
  	appendfile 6ded876650d7edef6a7f41867015338cd062a5ca34eb37f3ed7d35c1457a2fea
  	//JRE Version.txt
if {(exists file "jre/bin/java.exe" of folder "__GTS" of storage folder of client or exists file "jre/bin/java" of folder "__GTS" of storage folder of client)}	
	move __appendfile "{storage folder of client}/__GTS/jre/sha256.txt"
else
	delete __appendfile
endif

  	
// Last Change
appendfile {now as string}

// Version
appendfile {parameter "version"}

// Build ID
appendfile {parameter "build_id"}

// create the version file
delete "{storage folder of client}/__GTS/version.txt"
move __appendfile "{storage folder of client}/__GTS/version.txt"

// append JRE version to end
if{ windows of operating system}
appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -version >> "{storage folder of client}\__GTS\version.txt" 2>&1 
delete launch.bat
move __appendfile launch.bat
wait launch.bat
else
appendfile #!/bin/sh
appendfile "{storage folder of client}/__GTS/jre/bin/java" -version >> "{storage folder of client}/__GTS/version.txt" 2>&1
delete launch.sh
move __appendfile launch.sh
wait chmod 750 launch.sh
wait "{client folder of current site}/launch.sh"
endif

   endif
  endif 

// clean up the work folder
folder delete "{storage folder of client}/__GTS/Temp"

folder create "{storage folder of client}/__GTS/__UIDEXT"
folder create "{storage folder of client}/__GTS/__IEMHC"

if {parameter "updateTools" as lowercase is "true"}
// clean and add the HCLauncher.jar
folder delete "{storage folder of client}/__GTS/__IEMHC/HCLauncher"
folder delete "{storage folder of client}/__GTS/HCLauncher_400"
folder create "{storage folder of client}/__GTS/HCLauncher_400"

copy "{client folder of current site}/__Download/HCLauncher.jar" "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar"

appendfile Bigfix buildID: {parameter "build_id"}
move __appendfile "{storage folder of client}/__GTS/HCLauncher_400/version.txt"

//HCLauncher version .txt
if{windows of operating system}
 appendfile "{storage folder of client}\__GTS\jre\bin\java.exe" -jar {parameter "dump"} "{storage folder of client}\__GTS\HCLauncher_400\HCLauncher.jar" -version >> "{storage folder of client}\__GTS\HCLauncher_400\version.txt" 2>&1 
 delete launch.bat
 move __appendfile launch.bat
 wait launch.bat
else
 appendfile #!/bin/sh
 appendfile "{storage folder of client}/__GTS/jre/bin/java" -jar {parameter "dump"} "{storage folder of client}/__GTS/HCLauncher_400/HCLauncher.jar" -version >> "{storage folder of client}/__GTS/HCLauncher_400/version.txt" 2>&1
 delete launch.sh
 move __appendfile launch.sh
 wait chmod 750 launch.sh
 wait "{client folder of current site}/launch.sh"
 endif
endif



//End of Prepare Endpoint

//Start of Install policy

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "policy_parameters.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy_parameters.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/policy_parameters.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "localpolicy.xml" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/localpolicy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/localpolicy.xml"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists file "freshness.txt" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/freshness.txt" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/freshness.txt"
endif

if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client AND exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault"
endif
if {exists folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD") of storage folder of client}
	folder delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"
endif

folder create "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD"

//moving vault folder
if{exists folder "vault" of folder ("__GTS/__IEMHC/" & name of current site as string & "/Windows2012-CSD_backup") of storage folder of client|false}
move "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD_backup/vault" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/vault"
endif

copy "{client folder of current site}/__Download/policy.xml" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/policy.xml"

// unzip the Collectors.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\Collectors.zip" 	
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/Collectors.zip"	
endif

// unzip the RemediationScript.zip
if {windows of operating system} 
	wait "{storage folder of client}\__GTS\jre\bin\java.exe" -jar "{client folder of current site}\__Download\cuz.jar" "{storage folder of client}\__GTS\__IEMHC\{name of current site}\Windows2012-CSD" "{client folder of current site}\__Download\RemediationScript.zip" RemediationScript
else
	wait "{storage folder of client}/__GTS/jre/bin/java" -jar "{client folder of current site}/__Download/cuz.jar" "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD" "{client folder of current site}/__Download/RemediationScript.zip" RemediationScript
endif

if {exit code of action != 0}
exit {exit code of action}
endif

// create version.txt
appendfile {now as string}
appendfile Windows-2012-CSD-3.0L
appendfile {parameter "version"}
appendfile {parameter "build_id"}
delete "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"
move __appendfile "{storage folder of client}/__GTS/__IEMHC/{name of current site}/Windows2012-CSD/version.txt"

// Set the GTS_GCM_Enhanched_Scheduling_<site name> setting to DISABLED if the setting is empty or does not exists AND there is no GTS_<site name>_GCM_Dates setting
if {( (not exists setting ("GTS_GCM_ENHANCED_SCHEDULING_"&(name of current site)) whose (value of it != "") of client) AND ((not exists values of setting ("GTS_"&(name of current site)&"_GCM_Dates") of client)|True) )}
	setting "GTS_GCM_ENHANCED_SCHEDULING_{name of current site}"="DISABLED" on "{date (local time zone) of now & time (local time zone) of now}" for client
endif

//End of Install Policy

	]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</Action>
	</Task>
</BES>
