<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Register Linux Endpoint Folder as an NFS Repository - AIX</Title>
		<Description><![CDATA[
<TABLE><TBODY><TR><TD> <P>Use this task to enable the Network File System (NFS) service on a targeted Linux system and register a folder location as an NFS repository.</P> <P>Registering an endpoint as an NFS server enables you to use the AIX Advanced Deployment Wizard of the Patches for AIX site to download and manage fix packs directly on the registered endpoint.</P><P><STRONG>Note: </STRONG>Generation of Table of Content for fix packs require an AIX system. This task will grant write permission to the Linux NFS repository for generating the TOC. Please ensure that the AIX endpoint is registered with BigFix.</P> <P><STRONG>Note:</STRONG> The default folder that is registered as the NFS repository is in /var/opt/BESClient/__BESData/__AIX_NFS_REPO. If you specify a custom folder location, the folder must be created on the endpoint before deloying this task.</P> <P><STRONG>Note:</STRONG> You can only register one folder location as an NFS repository for each endpoint.</P></TD></TR></TBODY></TABLE>
]]></Description>
		<Relevance>(if exists property "in proxy agent context" then ( not in proxy agent context ) else true ) AND (if exists property "android" of type "operating system" then ( not android of operating system ) else true )  </Relevance>
		<Relevance>not (name of operating system contains "Linux TinyCore")</Relevance>
		<Relevance><![CDATA[(name of it as lowercase starts with "linux red hat" and version of it >= "6" and version of it <= "7" and exists match (regex "^(i[0-9]86|x86_64)$") of architecture of it) of operating system]]></Relevance>
		<Relevance>exists file "/usr/sbin/rpc.nfsd"</Relevance>
		<Relevance>(NOT exists setting "_BESClient_Custom_PatchesForAIX_NFS_Repo" whose (value of it as integer = 1) of client)</Relevance>
		<Category>Configuration</Category>
		<DownloadSize>0</DownloadSize>
		<Source>BigFix</Source>
		<SourceID><![CDATA[<Unspecified>]]></SourceID>
		<SourceSeverity><![CDATA[<Unspecified>]]></SourceSeverity>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Tue, 11 Jun 2019 21:07:33 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Tue, 11 Jun 2019 21:07:33 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to register endpoints using the default folder.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[//start NFS service
action parameter query "AIXClientIP" with description "IP address of AIX endpoint which will be used to generate Table of Content for fix packs on Linux NFS repository. Write permission to the NFS repository will be granted to this endpoint for generating the TOC."
continue if { exists matches (regex "^[0-9]%7B1,3%7D\.[0-9]%7B1,3%7D\.[0-9]%7B1,3%7D\.[0-9]%7B1,3%7D$") of parameter "AIXClientIP" of action }
if {(NOT (exists process "nfsd")) AND ((version of it = "7") of operating system)}
  wait sh -c "/usr/bin/systemctl start nfs"
  wait sh -c "/usr/bin/systemctl start rpcbind"
elseif {(NOT (exists process "nfsd")) AND ((version of it = "6") of operating system)}
  wait sh -c "service nfs start"
endif
continue if {exists process "nfsd"}

//export the NFS shared folder
parameter "NFSDir" = "/var/opt/BESClient/__BESData/__AIX_NFS_REPO"
if {NOT (exists folder (parameter "NFSDir"))}
  folder create "{parameter "NFSDir"}"
endif
continue if {exists folder (parameter "NFSDir")}

if {NOT (exist file "/etc/exports" whose (exist line whose (it contains (parameter "NFSDir")) of it))}
  wait sh -c "echo \"{parameter "NFSDir"} {parameter "AIXClientIP"}(rw,no_root_squash)\" >> \"/etc/exports\""
endif
wait sh -c "/usr/sbin/exportfs -o {parameter "NFSDir"}"
if {(version of it = "7") of operating system}
  wait sh -c "/usr/bin/systemctl restart nfs"
elseif {(version of it = "6") of operating system}
  wait sh -c "service nfs restart"
endif

wait sh -c "showmount -e localhost >> /var/log/nfs_repo"
continue if {exist file "/var/log/nfs_repo" whose (exist line whose (it contains (parameter "NFSDir")) of it)}

//change client setting
setting "_BESClient_Custom_AIXClientForTOCIP"="{parameter "AIXClientIP"}" on "{now as universal string}" for client
setting "_BESClient_Custom_PatchesForAIX_NFS_Repo"="1" on "{now as universal string}" for client
setting "_BESClient_Custom_PatchesForAIX_NFS_Repo_Loc"="{parameter "NFSDir"}" on "{now as universal string}" for client]]></ActionScript>
		</DefaultAction>
		<Action ID="Action2">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to register endpoints using a custom folder.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action parameter query "NFSDirInput" with description "Folder path of the NFS repository (Note: The folder must exist on the target system.)"
continue if {exists folder (parameter "NFSDirInput")}

parameter "NFSDir" = "{"/" & concatenation "/" of substrings separated by "/" whose (it != "") of (parameter "NFSDirInput")}"
action parameter query "AIXClientIP" with description "IP address of AIX endpoint which will be used to generate Table of Content for fix packs on Linux NFS repository. Write permission to the NFS repository will be granted to this endpoint for generating the TOC."
continue if {exists matches (regex "^[0-9]%7B1,3%7D\.[0-9]%7B1,3%7D\.[0-9]%7B1,3%7D\.[0-9]%7B1,3%7D$") of parameter "AIXClientIP" of action}
//start NFS service
if {(NOT (exists process "nfsd")) AND ((version of it = "7") of operating system)}
  wait sh -c "/usr/bin/systemctl start nfs"
  wait sh -c "/usr/bin/systemctl start rpcbind"
elseif {(NOT (exists process "nfsd")) AND ((version of it = "6") of operating system)}
  wait sh -c "service nfs start"
endif
continue if {exists process "nfsd"}

//export folder
if {NOT (exist file "/etc/exports" whose (exist line whose (it contains (parameter "NFSDir")) of it))}
  wait sh -c "echo \"{parameter "NFSDir"} {parameter "AIXClientIP"}(rw,no_root_squash)\" >> \"/etc/exports\""
endif
wait sh -c "/usr/sbin/exportfs -o \"{parameter "NFSDir"}\""

if {(version of it = "7") of operating system}
  wait sh -c "/usr/bin/systemctl restart nfs"
elseif {(version of it = "6") of operating system}
  wait sh -c "service nfs restart"
endif

wait sh -c "showmount -e localhost >> /var/log/nfs_repo"
continue if {exist file "/var/log/nfs_repo" whose (exist line whose (it contains (parameter "NFSDir")) of it)}

//change client setting
setting "_BESClient_Custom_AIXClientForTOCIP"="{parameter "AIXClientIP"}" on "{now as universal string}" for client
setting "_BESClient_Custom_PatchesForAIX_NFS_Repo"="1" on "{now as universal string}" for client
setting "_BESClient_Custom_PatchesForAIX_NFS_Repo_Loc"="{parameter "NFSDir"}" on "{now as universal string}" for client]]></ActionScript>
		</Action>
	</Task>
</BES>
