<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Windows 10 Business Editions Version 1903 Available - Windows 10 (x64) (English (United States))</Title>
		<Description><![CDATA[
<DIV class=FixletMessage>
<TABLE><TBODY><TR><TD> <DIV> <P>This Fixlet requires downloading the Windows 10 ISO image before deploying the Fixlet. You can use a custom repository to do so. Once this Fixlet completes, restart the target to complete the upgrade process. <P> <P>Before you deploy the Fixlet: <UL> <LI>Ensure that there is sufficient hard disk space. <LI>Check the .iso file size. If it is necessary, increase the pre-caching download limit of your endpoints.<BR>Through the BigFix console, you can set the limit by adding the following settings: <UL> <LI>_BESClient_Download_PreCacheStageDiskLimitMB <LI>_BESClient_Download_NormalStageDiskLimitMB</LI></UL>For more information about configuration settings, see this <A href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Tivoli%20Endpoint%20Manager/page/Configuration%20Settings">wiki article</A>. <LI>You can choose to use a custom repository from which the Windows 10 ISO image can be downloaded. For more information, see this <A href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Tivoli%20Endpoint%20Manager/page/Using%20the%20Custom%20Repository%20Setting%20feature">wiki article</A>. <B>Note</B>:Ensure that the file name of the ISO image is the same in the custom repository and in the action script to avoid errors.</LI></UL> <P></P> <P>After applying the Fixlet, it might take some time for the restart and upgrade process to complete, depending on connection and machine capabilities.</P></DIV></TD></TR></TBODY></TABLE>
</DIV>
<DIV class=FixletProperty>
<H4>File Size:</H4>
4827 MB
 </DIV>
]]></Description>
		<Relevance>(if( name of operating system starts with "Win" ) then platform id of operating system != 3 else false) AND (if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance>x64 of operating system AND not ia64 of operating system</Relevance>
		<Relevance>(it starts with "Win" AND it does not start with "Win20") of name of operating system AND (exists value "CurrentMajorVersionNumber" of it AND value "CurrentMajorVersionNumber" of it as integer = 10) of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" of native registry</Relevance>
		<Relevance>exists regapp "powershell.exe"</Relevance>
		<Relevance><![CDATA[NOT exists value "CurrentBuild" whose (it >= "18362") of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" of native registry]]></Relevance>
		<Relevance>not pending restart "dd9a1a27c5c58140b13facf6755a0c4a40ff0a6d"</Relevance>
		<Relevance>system ui language as string as lowercase = "English (United States)" as lowercase</Relevance>
		<Relevance>exists value "EditionID" whose (it as string as lowercase = "EducationN" as lowercase OR it as string as lowercase = "Education" as lowercase OR it as string as lowercase = "ProfessionalN" as lowercase OR it as string as lowercase = "Professional" as lowercase OR it as string as lowercase = "EnterpriseN" as lowercase OR it as string as lowercase = "Enterprise" as lowercase) of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" of native registry</Relevance>
		<Relevance>(name of it = "Win10" OR (it starts with "Win" AND it does not start with "Win20") of name of it AND (exists value "CurrentMajorVersionNumber" of it AND value "CurrentMajorVersionNumber" of it as integer = 10) of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" of native registry) of operating system</Relevance>
		<Category>Upgrade</Category>
		<DownloadSize>4827807744</DownloadSize>
		<Source>Microsoft</Source>
		<SourceID>Unspecified</SourceID>
		<SourceReleaseDate>2019-06-21</SourceReleaseDate>
		<SourceSeverity>Unspecified</SourceSeverity>
		<CVENames>Unspecified</CVENames>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Wed, 10 Jul 2019 08:34:19 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>no-relevance-health-check</Name>
			<Value>false</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-product-family</Name>
			<Value>Windows</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-component</Name>
			<Value>Unspecified</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-product</Name>
			<Value>Win10</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Fri, 12 Jul 2019 20:46:11 +0000</Value>
		</MIMEField>
		<Delay>PT1S</Delay>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink>to execute this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block	
add prefetch item name =en_windows_10_business_editions_version_1903_x64_dvd_37200948.iso sha1=dd9a1a27c5c58140b13facf6755a0c4a40ff0a6d size=4827807744 url={value of setting "_BESClient_AllowCustomRepoDownloads" of client   | "http://MANUAL_BES_CACHING_REQUIRED/"}en_windows_10_business_editions_version_1903_x64_dvd_37200948.iso sha256=50e0139646630f94d9036edaab1b91e9067741a196aa6205550659e867518bae
end prefetch block

parameter "workISO" = "{pathname of client folder of current site & "\__Download\en_windows_10_business_editions_version_1903_x64_dvd_37200948.iso"}"
continue if {exists file (parameter "workISO")} 
			
// prepare a workpath to temporary files.
parameter "workPath" = "{(value of variable "SystemDrive" of environment) & "\win10_upgrade_temp"}"
waithidden cmd /C rmdir /S /Q "{parameter "workPath"}"
waithidden cmd /C mkdir "{parameter "workPath"}"

// Create the cleanup file.
delete __appendfile
delete __Download\setupcomplete.cmd

appendfile @echo off
appendfile SET WindowsISO="{parameter "workISO"}"
appendfile powershell.exe "Dismount-DiskImage ""%WindowsISO%"""
appendfile rmdir /S /Q "{parameter "workPath"}"

move __appendfile __Download\setupcomplete.cmd


// Create a debug invocation batch to help in case of failures.
// This batch does not perform an update but with the scanonly option allows you to determine what the problem is. 
delete __appendfile

appendfile @echo off
appendfile SET WindowsISO="{parameter "workISO"}"
appendfile FOR /F "skip=3" %%I IN ('powershell.exe "Get-DiskImage """%WindowsISO%""" | Get-Volume | Select-Object {{$_.DriveLetter}"') DO %%I:\setup.exe /auto upgrade /Compat ScanOnly /DynamicUpdate disable /noreboot"
appendfile echo %errorlevel% > "{parameter "workPath"}\out.log"

move __appendfile "{(parameter "workPath") & "/upgradeCheck.bat"}"

// Create the actual invocation script
// Sleep and Dir were added or command would fail with %errorlevel%	183. Possibly a delay on mount.		
delete __appendfile
delete mount.and.install.bat

appendfile @echo on
appendfile SET WindowsISO="{parameter "workISO"}"
appendfile powershell.exe "Mount-DiskImage ""%WindowsISO%"""
appendfile TIMEOUT 10
appendfile FOR /F "skip=3" %%I IN ('powershell.exe "Get-DiskImage """%WindowsISO%""" | Get-Volume | Select-Object {{$_.DriveLetter}"') DO dir %%I: > "{parameter "workPath"}\dir.log" && %%I:\setup.exe /auto upgrade /Quiet /DynamicUpdate disable /noreboot /postoobe "{pathname of client folder of current site & "\__Download\setupcomplete.cmd"}"
appendfile echo %errorlevel% > "{parameter "workPath"}\out.log"
move __appendfile mount.and.install.bat 

wait mount.and.install.bat > "{parameter "workPath"}\cmd.log"

wait __Download\setupcomplete.cmd >"{parameter "workPath"}\setupcomplete.log"

// setup must finish with RC=0 at this stage if things are ok. If that is not the case content of C:\"\win10_upgrade_temp dir holds useful info. 
// Apart from log files, you can run upgradeCheck manually to check with the UI what the problem is. 

action requires restart "dd9a1a27c5c58140b13facf6755a0c4a40ff0a6d"]]></ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
